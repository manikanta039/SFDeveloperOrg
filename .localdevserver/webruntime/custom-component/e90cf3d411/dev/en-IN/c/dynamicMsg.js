Webruntime.define('lwc/dynamicMsg', ['lwc', 'lightning/configProvider', 'aura'], function (lwc, configProvider, aura) { 'use strict';

    function stylesheet(hostSelector, shadowSelector, nativeShadow) {
      return "\n" + (nativeShadow ? (":host {display: block;}") : (hostSelector + " {display: block;}")) + "\n.input-rich-text-placeholder" + shadowSelector + " {color: var(--lwc-colorTextPlaceholder);}\n";
    }
    var _implicitStylesheets = [stylesheet];

    function tmpl($api, $cmp, $slotset, $ctx) {
      const {
        b: api_bind,
        h: api_element
      } = $api;
      const {
        _m0
      } = $ctx;
      return [api_element("span", {
        context: {
          lwc: {
            dom: "manual"
          }
        },
        key: 0,
        on: {
          "click": _m0 || ($ctx._m0 = api_bind($cmp.handleClick))
        }
      }, [])];
    }

    var _tmpl = lwc.registerTemplate(tmpl);
    tmpl.stylesheets = [];
    tmpl.stylesheetTokens = {
      hostAttribute: "lightning-formattedRichText_formattedRichText-host",
      shadowAttribute: "lightning-formattedRichText_formattedRichText"
    };

    var _tmpl$1 = void 0;

    var freeze$1 = Object.freeze || function (x) {
      return x;
    };

    var html = freeze$1(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']); // SVG

    var svg = freeze$1(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'audio', 'canvas', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'video', 'view', 'vkern']);
    var svgFilters = freeze$1(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);
    var mathMl = freeze$1(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover']);
    var text = freeze$1(['#text']);

    var freeze$2 = Object.freeze || function (x) {
      return x;
    };

    var html$1 = freeze$2(['accept', 'action', 'align', 'alt', 'autocomplete', 'background', 'bgcolor', 'border', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'coords', 'crossorigin', 'datetime', 'default', 'dir', 'disabled', 'download', 'enctype', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'integrity', 'ismap', 'label', 'lang', 'list', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'name', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns']);
    var svg$1 = freeze$2(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'tabindex', 'targetx', 'targety', 'transform', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);
    var mathMl$1 = freeze$2(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);
    var xml = freeze$2(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);
    var hasOwnProperty = Object.hasOwnProperty;
    var setPrototypeOf = Object.setPrototypeOf;

    var _ref$1 = typeof Reflect !== 'undefined' && Reflect;

    var apply$1 = _ref$1.apply;

    if (!apply$1) {
      apply$1 = function apply(fun, thisValue, args) {
        return fun.apply(thisValue, args);
      };
    }
    /* Add properties to a lookup table */


    function addToSet(set, array) {
      if (setPrototypeOf) {
        // Make 'in' and truthy checks like Boolean(set.constructor)
        // independent of any properties defined on Object.prototype.
        // Prevent prototype setters from intercepting set as a this value.
        setPrototypeOf(set, null);
      }

      var l = array.length;

      while (l--) {
        var element = array[l];

        if (typeof element === 'string') {
          var lcElement = element.toLowerCase();

          if (lcElement !== element) {
            // Config presets (e.g. tags.js, attrs.js) are immutable.
            if (!Object.isFrozen(array)) {
              array[l] = lcElement;
            }

            element = lcElement;
          }
        }

        set[element] = true;
      }

      return set;
    }
    /* Shallow clone an object */


    function clone(object) {
      var newObject = {};
      var property = void 0;

      for (property in object) {
        if (apply$1(hasOwnProperty, object, [property])) {
          newObject[property] = object[property];
        }
      }

      return newObject;
    }

    var seal = Object.seal || function (x) {
      return x;
    };

    var MUSTACHE_EXPR = seal(/\{\{[\s\S]*|[\s\S]*\}\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode

    var ERB_EXPR = seal(/<%[\s\S]*|[\s\S]*%>/gm);
    var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/); // eslint-disable-line no-useless-escape

    var ARIA_ATTR = seal(/^aria-[\-\w]+$/); // eslint-disable-line no-useless-escape

    var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i // eslint-disable-line no-useless-escape
    );
    var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
    var ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205f\u3000]/g // eslint-disable-line no-control-regex
    );

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    function _toConsumableArray(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      } else {
        return Array.from(arr);
      }
    }

    var _ref = typeof Reflect !== 'undefined' && Reflect;

    var apply = _ref.apply;
    var arraySlice = Array.prototype.slice;
    var freeze = Object.freeze;

    var getGlobal = function getGlobal() {
      return typeof window === 'undefined' ? null : window;
    };

    if (!apply) {
      apply = function apply(fun, thisValue, args) {
        return fun.apply(thisValue, args);
      };
    }
    /**
     * Creates a no-op policy for internal use only.
     * Don't export this function outside this module!
     * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.
     * @param {Document} document The document object (to determine policy name suffix)
     * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types
     * are not supported).
     */


    var _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {
      if ((typeof trustedTypes === 'undefined' ? 'undefined' : _typeof(trustedTypes)) !== 'object' || typeof trustedTypes.createPolicy !== 'function') {
        return null;
      } // Allow the callers to control the unique policy name
      // by adding a data-tt-policy-suffix to the script element with the DOMPurify.
      // Policy creation with duplicate names throws in Trusted Types.


      var suffix = null;
      var ATTR_NAME = 'data-tt-policy-suffix';

      if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) {
        suffix = document.currentScript.getAttribute(ATTR_NAME);
      }

      var policyName = 'dompurify' + (suffix ? '#' + suffix : '');

      try {
        return trustedTypes.createPolicy(policyName, {
          createHTML: function createHTML(html$$1) {
            return html$$1;
          }
        });
      } catch (error) {
        // Policy creation failed (most likely another DOMPurify script has
        // already run). Skip creating the policy, as this will only cause errors
        // if TT are enforced.
        console.warn('TrustedTypes policy ' + policyName + ' could not be created.');
        return null;
      }
    };

    function createDOMPurify() {
      var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();

      var DOMPurify = function DOMPurify(root) {
        return createDOMPurify(root);
      };
      /**
       * Version label, exposed for easier checks
       * if DOMPurify is up to date or not
       */


      DOMPurify.version = '2.0.6';
      /**
       * Array of elements that DOMPurify removed during sanitation.
       * Empty if nothing was removed.
       */

      DOMPurify.removed = [];

      if (!window || !window.document || window.document.nodeType !== 9) {
        // Not running in a browser, provide a factory function
        // so that you can pass your own Window
        DOMPurify.isSupported = false;
        return DOMPurify;
      }

      var originalDocument = window.document;
      var useDOMParser = false;
      var removeTitle = false;
      var document = window.document;
      var DocumentFragment = window.DocumentFragment,
          HTMLTemplateElement = window.HTMLTemplateElement,
          Node = window.Node,
          NodeFilter = window.NodeFilter,
          _window$NamedNodeMap = window.NamedNodeMap,
          NamedNodeMap = _window$NamedNodeMap === undefined ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap,
          Text = window.Text,
          Comment = window.Comment,
          DOMParser = window.DOMParser,
          TrustedTypes = window.TrustedTypes; // As per issue #47, the web-components registry is inherited by a
      // new document created via createHTMLDocument. As per the spec
      // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)
      // a new empty registry is used when creating a template contents owner
      // document, so we use that as our parent document to ensure nothing
      // is inherited.

      if (typeof HTMLTemplateElement === 'function') {
        var template = document.createElement('template');

        if (template.content && template.content.ownerDocument) {
          document = template.content.ownerDocument;
        }
      }

      var trustedTypesPolicy = _createTrustedTypesPolicy(TrustedTypes, originalDocument);

      var emptyHTML = trustedTypesPolicy ? trustedTypesPolicy.createHTML('') : '';
      var _document = document,
          implementation = _document.implementation,
          createNodeIterator = _document.createNodeIterator,
          getElementsByTagName = _document.getElementsByTagName,
          createDocumentFragment = _document.createDocumentFragment;
      var importNode = originalDocument.importNode;
      var hooks = {};
      /**
       * Expose whether this browser supports running the full DOMPurify.
       */

      DOMPurify.isSupported = implementation && typeof implementation.createHTMLDocument !== 'undefined' && document.documentMode !== 9;
      var MUSTACHE_EXPR$$1 = MUSTACHE_EXPR,
          ERB_EXPR$$1 = ERB_EXPR,
          DATA_ATTR$$1 = DATA_ATTR,
          ARIA_ATTR$$1 = ARIA_ATTR,
          IS_SCRIPT_OR_DATA$$1 = IS_SCRIPT_OR_DATA,
          ATTR_WHITESPACE$$1 = ATTR_WHITESPACE;
      var IS_ALLOWED_URI$$1 = IS_ALLOWED_URI;
      /**
       * We consider the elements and attributes below to be safe. Ideally
       * don't add any new ones but feel free to remove unwanted ones.
       */

      /* allowed element names */

      var ALLOWED_TAGS = null;
      var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray(html), _toConsumableArray(svg), _toConsumableArray(svgFilters), _toConsumableArray(mathMl), _toConsumableArray(text)));
      /* Allowed attribute names */

      var ALLOWED_ATTR = null;
      var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray(html$1), _toConsumableArray(svg$1), _toConsumableArray(mathMl$1), _toConsumableArray(xml)));
      /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */

      var FORBID_TAGS = null;
      /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */

      var FORBID_ATTR = null;
      /* Decide if ARIA attributes are okay */

      var ALLOW_ARIA_ATTR = true;
      /* Decide if custom data attributes are okay */

      var ALLOW_DATA_ATTR = true;
      /* Decide if unknown protocols are okay */

      var ALLOW_UNKNOWN_PROTOCOLS = false;
      /* Output should be safe for jQuery's $() factory? */

      var SAFE_FOR_JQUERY = false;
      /* Output should be safe for common template engines.
       * This means, DOMPurify removes data attributes, mustaches and ERB
       */

      var SAFE_FOR_TEMPLATES = false;
      /* Decide if document with <html>... should be returned */

      var WHOLE_DOCUMENT = false;
      /* Track whether config is already set on this instance of DOMPurify. */

      var SET_CONFIG = false;
      /* Decide if all elements (e.g. style, script) must be children of
       * document.body. By default, browsers might move them to document.head */

      var FORCE_BODY = false;
      /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html
       * string (or a TrustedHTML object if Trusted Types are supported).
       * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead
       */

      var RETURN_DOM = false;
      /* Decide if a DOM `DocumentFragment` should be returned, instead of a html
       * string  (or a TrustedHTML object if Trusted Types are supported) */

      var RETURN_DOM_FRAGMENT = false;
      /* If `RETURN_DOM` or `RETURN_DOM_FRAGMENT` is enabled, decide if the returned DOM
       * `Node` is imported into the current `Document`. If this flag is not enabled the
       * `Node` will belong (its ownerDocument) to a fresh `HTMLDocument`, created by
       * DOMPurify. */

      var RETURN_DOM_IMPORT = false;
      /* Try to return a Trusted Type object instead of a string, retrun a string in
       * case Trusted Types are not supported  */

      var RETURN_TRUSTED_TYPE = false;
      /* Output should be free from DOM clobbering attacks? */

      var SANITIZE_DOM = true;
      /* Keep element content when removing element? */

      var KEEP_CONTENT = true;
      /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead
       * of importing it into a new Document and returning a sanitized copy */

      var IN_PLACE = false;
      /* Allow usage of profiles like html, svg and mathMl */

      var USE_PROFILES = {};
      /* Tags to ignore content of when KEEP_CONTENT is true */

      var FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'script', 'style', 'template', 'thead', 'title', 'svg', 'video']);
      /* Tags that are safe for data: URIs */

      var DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image']);
      /* Attributes safe for values like "javascript:" */

      var URI_SAFE_ATTRIBUTES = null;
      var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'summary', 'title', 'value', 'style', 'xmlns']);
      /* Keep a reference to config to pass to hooks */

      var CONFIG = null;
      /* Ideally, do not touch anything below this line */

      /* ______________________________________________ */

      var formElement = document.createElement('form');
      /**
       * _parseConfig
       *
       * @param  {Object} cfg optional config literal
       */
      // eslint-disable-next-line complexity

      var _parseConfig = function _parseConfig(cfg) {
        if (CONFIG && CONFIG === cfg) {
          return;
        }
        /* Shield configuration object from tampering */


        if (!cfg || (typeof cfg === 'undefined' ? 'undefined' : _typeof(cfg)) !== 'object') {
          cfg = {};
        }
        /* Set configuration parameters */


        ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;
        ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;
        URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR) : DEFAULT_URI_SAFE_ATTRIBUTES;
        FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS) : {};
        FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR) : {};
        USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;
        ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true

        ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true

        ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false

        SAFE_FOR_JQUERY = cfg.SAFE_FOR_JQUERY || false; // Default false

        SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false

        WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false

        RETURN_DOM = cfg.RETURN_DOM || false; // Default false

        RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false

        RETURN_DOM_IMPORT = cfg.RETURN_DOM_IMPORT || false; // Default false

        RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false

        FORCE_BODY = cfg.FORCE_BODY || false; // Default false

        SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true

        KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true

        IN_PLACE = cfg.IN_PLACE || false; // Default false

        IS_ALLOWED_URI$$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$$1;

        if (SAFE_FOR_TEMPLATES) {
          ALLOW_DATA_ATTR = false;
        }

        if (RETURN_DOM_FRAGMENT) {
          RETURN_DOM = true;
        }
        /* Parse profile info */


        if (USE_PROFILES) {
          ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray(text)));
          ALLOWED_ATTR = [];

          if (USE_PROFILES.html === true) {
            addToSet(ALLOWED_TAGS, html);
            addToSet(ALLOWED_ATTR, html$1);
          }

          if (USE_PROFILES.svg === true) {
            addToSet(ALLOWED_TAGS, svg);
            addToSet(ALLOWED_ATTR, svg$1);
            addToSet(ALLOWED_ATTR, xml);
          }

          if (USE_PROFILES.svgFilters === true) {
            addToSet(ALLOWED_TAGS, svgFilters);
            addToSet(ALLOWED_ATTR, svg$1);
            addToSet(ALLOWED_ATTR, xml);
          }

          if (USE_PROFILES.mathMl === true) {
            addToSet(ALLOWED_TAGS, mathMl);
            addToSet(ALLOWED_ATTR, mathMl$1);
            addToSet(ALLOWED_ATTR, xml);
          }
        }
        /* Merge configuration parameters */


        if (cfg.ADD_TAGS) {
          if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
            ALLOWED_TAGS = clone(ALLOWED_TAGS);
          }

          addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);
        }

        if (cfg.ADD_ATTR) {
          if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
            ALLOWED_ATTR = clone(ALLOWED_ATTR);
          }

          addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);
        }

        if (cfg.ADD_URI_SAFE_ATTR) {
          addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);
        }
        /* Add #text in case KEEP_CONTENT is set to true */


        if (KEEP_CONTENT) {
          ALLOWED_TAGS['#text'] = true;
        }
        /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */


        if (WHOLE_DOCUMENT) {
          addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);
        }
        /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */


        if (ALLOWED_TAGS.table) {
          addToSet(ALLOWED_TAGS, ['tbody']);
          delete FORBID_TAGS.tbody;
        } // Prevent further manipulation of configuration.
        // Not available in IE8, Safari 5, etc.


        if (freeze) {
          freeze(cfg);
        }

        CONFIG = cfg;
      };
      /**
       * _forceRemove
       *
       * @param  {Node} node a DOM node
       */


      var _forceRemove = function _forceRemove(node) {
        DOMPurify.removed.push({
          element: node
        });

        try {
          node.parentNode.removeChild(node);
        } catch (error) {
          node.outerHTML = emptyHTML;
        }
      };
      /**
       * _removeAttribute
       *
       * @param  {String} name an Attribute name
       * @param  {Node} node a DOM node
       */


      var _removeAttribute = function _removeAttribute(name, node) {
        try {
          DOMPurify.removed.push({
            attribute: node.getAttributeNode(name),
            from: node
          });
        } catch (error) {
          DOMPurify.removed.push({
            attribute: null,
            from: node
          });
        }

        node.removeAttribute(name);
      };
      /**
       * _initDocument
       *
       * @param  {String} dirty a string of dirty markup
       * @return {Document} a DOM, filled with the dirty markup
       */


      var _initDocument = function _initDocument(dirty) {
        /* Create a HTML document */
        var doc = void 0;
        var leadingWhitespace = void 0;

        if (FORCE_BODY) {
          dirty = '<remove></remove>' + dirty;
        } else {
          /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */
          var matches = dirty.match(/^[\s]+/);
          leadingWhitespace = matches && matches[0];

          if (leadingWhitespace) {
            dirty = dirty.slice(leadingWhitespace.length);
          }
        }
        /* Use DOMParser to workaround Firefox bug (see comment below) */


        if (useDOMParser) {
          try {
            doc = new DOMParser().parseFromString(dirty, 'text/html');
          } catch (error) {}
        }
        /* Remove title to fix a mXSS bug in older MS Edge */


        if (removeTitle) {
          addToSet(FORBID_TAGS, ['title']);
        }
        /* Otherwise use createHTMLDocument, because DOMParser is unsafe in
        Safari (see comment below) */


        if (!doc || !doc.documentElement) {
          doc = implementation.createHTMLDocument('');
          var _doc = doc,
              body = _doc.body;
          body.parentNode.removeChild(body.parentNode.firstElementChild);
          body.outerHTML = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
        }

        if (leadingWhitespace) {
          doc.body.insertBefore(document.createTextNode(leadingWhitespace), doc.body.childNodes[0] || null);
        }
        /* Work on whole document or just its body */


        return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];
      }; // Firefox uses a different parser for innerHTML rather than
      // DOMParser (see https://bugzilla.mozilla.org/show_bug.cgi?id=1205631)
      // which means that you *must* use DOMParser, otherwise the output may
      // not be safe if used in a document.write context later.
      //
      // So we feature detect the Firefox bug and use the DOMParser if necessary.
      //
      // Chrome 77 and other versions ship an mXSS bug that caused a bypass to
      // happen. We now check for the mXSS trigger and react accordingly.


      if (DOMPurify.isSupported) {
        (function () {
          try {
            var doc = _initDocument('<svg><p><textarea><img src="</textarea><img src=x abc=1//">');

            if (doc.querySelector('svg img')) {
              useDOMParser = true;
            }
          } catch (error) {}
        })();

        (function () {
          try {
            var doc = _initDocument('<x/><title>&lt;/title&gt;&lt;img&gt;');

            if (/<\/title/.test(doc.querySelector('title').innerHTML)) {
              removeTitle = true;
            }
          } catch (error) {}
        })();
      }
      /**
       * _createIterator
       *
       * @param  {Document} root document/fragment to create iterator for
       * @return {Iterator} iterator instance
       */


      var _createIterator = function _createIterator(root) {
        return createNodeIterator.call(root.ownerDocument || root, root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, function () {
          return NodeFilter.FILTER_ACCEPT;
        }, false);
      };
      /**
       * _isClobbered
       *
       * @param  {Node} elm element to check for clobbering attacks
       * @return {Boolean} true if clobbered, false if safe
       */


      var _isClobbered = function _isClobbered(elm) {
        if (elm instanceof Text || elm instanceof Comment) {
          return false;
        }

        if (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string') {
          return true;
        }

        return false;
      };
      /**
       * _isNode
       *
       * @param  {Node} obj object to check whether it's a DOM node
       * @return {Boolean} true is object is a DOM node
       */


      var _isNode = function _isNode(obj) {
        return (typeof Node === 'undefined' ? 'undefined' : _typeof(Node)) === 'object' ? obj instanceof Node : obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && typeof obj.nodeType === 'number' && typeof obj.nodeName === 'string';
      };
      /**
       * _executeHook
       * Execute user configurable hooks
       *
       * @param  {String} entryPoint  Name of the hook's entry point
       * @param  {Node} currentNode node to work on with the hook
       * @param  {Object} data additional hook parameters
       */


      var _executeHook = function _executeHook(entryPoint, currentNode, data) {
        if (!hooks[entryPoint]) {
          return;
        }

        hooks[entryPoint].forEach(function (hook) {
          hook.call(DOMPurify, currentNode, data, CONFIG);
        });
      };
      /**
       * _sanitizeElements
       *
       * @protect nodeName
       * @protect textContent
       * @protect removeChild
       *
       * @param   {Node} currentNode to check for permission to exist
       * @return  {Boolean} true if node was killed, false if left alive
       */
      // eslint-disable-next-line complexity


      var _sanitizeElements = function _sanitizeElements(currentNode) {
        var content = void 0;
        /* Execute a hook if present */

        _executeHook('beforeSanitizeElements', currentNode, null);
        /* Check if element is clobbered or can clobber */


        if (_isClobbered(currentNode)) {
          _forceRemove(currentNode);

          return true;
        }
        /* Now let's check the element's type and name */


        var tagName = currentNode.nodeName.toLowerCase();
        /* Execute a hook if present */

        _executeHook('uponSanitizeElement', currentNode, {
          tagName: tagName,
          allowedTags: ALLOWED_TAGS
        });
        /* Take care of an mXSS pattern using p, br inside svg, math */


        if ((tagName === 'svg' || tagName === 'math') && currentNode.querySelectorAll('p, br').length !== 0) {
          _forceRemove(currentNode);

          return true;
        }
        /* Remove element if anything forbids its presence */


        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
          /* Keep content except for black-listed elements */
          if (KEEP_CONTENT && !FORBID_CONTENTS[tagName] && typeof currentNode.insertAdjacentHTML === 'function') {
            try {
              var htmlToInsert = currentNode.innerHTML;
              currentNode.insertAdjacentHTML('AfterEnd', trustedTypesPolicy ? trustedTypesPolicy.createHTML(htmlToInsert) : htmlToInsert);
            } catch (error) {}
          }

          _forceRemove(currentNode);

          return true;
        }
        /* Remove in case a noscript/noembed XSS is suspected */


        if (tagName === 'noscript' && /<\/noscript/i.test(currentNode.innerHTML)) {
          _forceRemove(currentNode);

          return true;
        }

        if (tagName === 'noembed' && /<\/noembed/i.test(currentNode.innerHTML)) {
          _forceRemove(currentNode);

          return true;
        }
        /* Convert markup to cover jQuery behavior */


        if (SAFE_FOR_JQUERY && !currentNode.firstElementChild && (!currentNode.content || !currentNode.content.firstElementChild) && /</g.test(currentNode.textContent)) {
          DOMPurify.removed.push({
            element: currentNode.cloneNode()
          });

          if (currentNode.innerHTML) {
            currentNode.innerHTML = currentNode.innerHTML.replace(/</g, '&lt;');
          } else {
            currentNode.innerHTML = currentNode.textContent.replace(/</g, '&lt;');
          }
        }
        /* Sanitize element content to be template-safe */


        if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {
          /* Get the element's text content */
          content = currentNode.textContent;
          content = content.replace(MUSTACHE_EXPR$$1, ' ');
          content = content.replace(ERB_EXPR$$1, ' ');

          if (currentNode.textContent !== content) {
            DOMPurify.removed.push({
              element: currentNode.cloneNode()
            });
            currentNode.textContent = content;
          }
        }
        /* Execute a hook if present */


        _executeHook('afterSanitizeElements', currentNode, null);

        return false;
      };
      /**
       * _isValidAttribute
       *
       * @param  {string} lcTag Lowercase tag name of containing element.
       * @param  {string} lcName Lowercase attribute name.
       * @param  {string} value Attribute value.
       * @return {Boolean} Returns true if `value` is valid, otherwise false.
       */
      // eslint-disable-next-line complexity


      var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {
        /* Make sure attribute cannot clobber */
        if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {
          return false;
        }
        /* Allow valid data-* attributes: At least one character after "-"
            (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)
            XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)
            We don't need to check the value; it's always URI safe. */


        if (ALLOW_DATA_ATTR && DATA_ATTR$$1.test(lcName)) ; else if (ALLOW_ARIA_ATTR && ARIA_ATTR$$1.test(lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
          return false;
          /* Check value is safe. First, is attr inert? If so, is safe */
        } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (IS_ALLOWED_URI$$1.test(value.replace(ATTR_WHITESPACE$$1, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && value.indexOf('data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !IS_SCRIPT_OR_DATA$$1.test(value.replace(ATTR_WHITESPACE$$1, ''))) ; else if (!value) ; else {
          return false;
        }

        return true;
      };
      /**
       * _sanitizeAttributes
       *
       * @protect attributes
       * @protect nodeName
       * @protect removeAttribute
       * @protect setAttribute
       *
       * @param  {Node} currentNode to sanitize
       */


      var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {
        var attr = void 0;
        var value = void 0;
        var lcName = void 0;
        var idAttr = void 0;
        var l = void 0;
        /* Execute a hook if present */

        _executeHook('beforeSanitizeAttributes', currentNode, null);

        var attributes = currentNode.attributes;
        /* Check if we have attributes; if not we might have a text node */

        if (!attributes) {
          return;
        }

        var hookEvent = {
          attrName: '',
          attrValue: '',
          keepAttr: true,
          allowedAttributes: ALLOWED_ATTR
        };
        l = attributes.length;
        /* Go backwards over all attributes; safely remove bad ones */

        while (l--) {
          attr = attributes[l];
          var _attr = attr,
              name = _attr.name,
              namespaceURI = _attr.namespaceURI;
          value = attr.value.trim();
          lcName = name.toLowerCase();
          /* Execute a hook if present */

          hookEvent.attrName = lcName;
          hookEvent.attrValue = value;
          hookEvent.keepAttr = true;

          _executeHook('uponSanitizeAttribute', currentNode, hookEvent);

          value = hookEvent.attrValue;
          /* Remove attribute */
          // Safari (iOS + Mac), last tested v8.0.5, crashes if you try to
          // remove a "name" attribute from an <img> tag that has an "id"
          // attribute at the time.

          if (lcName === 'name' && currentNode.nodeName === 'IMG' && attributes.id) {
            idAttr = attributes.id;
            attributes = apply(arraySlice, attributes, []);

            _removeAttribute('id', currentNode);

            _removeAttribute(name, currentNode);

            if (attributes.indexOf(idAttr) > l) {
              currentNode.setAttribute('id', idAttr.value);
            }
          } else if ( // This works around a bug in Safari, where input[type=file]
          // cannot be dynamically set after type has been removed
          currentNode.nodeName === 'INPUT' && lcName === 'type' && value === 'file' && hookEvent.keepAttr && (ALLOWED_ATTR[lcName] || !FORBID_ATTR[lcName])) {
            continue;
          } else {
            // This avoids a crash in Safari v9.0 with double-ids.
            // The trick is to first set the id to be empty and then to
            // remove the attribute
            if (name === 'id') {
              currentNode.setAttribute(name, '');
            }

            _removeAttribute(name, currentNode);
          }
          /* Did the hooks approve of the attribute? */


          if (!hookEvent.keepAttr) {
            continue;
          }
          /* Sanitize attribute content to be template-safe */


          if (SAFE_FOR_TEMPLATES) {
            value = value.replace(MUSTACHE_EXPR$$1, ' ');
            value = value.replace(ERB_EXPR$$1, ' ');
          }
          /* Is `value` valid for this attribute? */


          var lcTag = currentNode.nodeName.toLowerCase();

          if (!_isValidAttribute(lcTag, lcName, value)) {
            continue;
          }
          /* Handle invalid data-* attribute set by try-catching it */


          try {
            if (namespaceURI) {
              currentNode.setAttributeNS(namespaceURI, name, value);
            } else {
              /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. "x-schema". */
              currentNode.setAttribute(name, value);
            }

            DOMPurify.removed.pop();
          } catch (error) {}
        }
        /* Execute a hook if present */


        _executeHook('afterSanitizeAttributes', currentNode, null);
      };
      /**
       * _sanitizeShadowDOM
       *
       * @param  {DocumentFragment} fragment to iterate over recursively
       */


      var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {
        var shadowNode = void 0;

        var shadowIterator = _createIterator(fragment);
        /* Execute a hook if present */


        _executeHook('beforeSanitizeShadowDOM', fragment, null);

        while (shadowNode = shadowIterator.nextNode()) {
          /* Execute a hook if present */
          _executeHook('uponSanitizeShadowNode', shadowNode, null);
          /* Sanitize tags and elements */


          if (_sanitizeElements(shadowNode)) {
            continue;
          }
          /* Deep shadow DOM detected */


          if (shadowNode.content instanceof DocumentFragment) {
            _sanitizeShadowDOM(shadowNode.content);
          }
          /* Check attributes, sanitize if necessary */


          _sanitizeAttributes(shadowNode);
        }
        /* Execute a hook if present */


        _executeHook('afterSanitizeShadowDOM', fragment, null);
      };
      /**
       * Sanitize
       * Public method providing core sanitation functionality
       *
       * @param {String|Node} dirty string or DOM node
       * @param {Object} configuration object
       */
      // eslint-disable-next-line complexity


      DOMPurify.sanitize = function (dirty, cfg) {
        var body = void 0;
        var importedNode = void 0;
        var currentNode = void 0;
        var oldNode = void 0;
        var returnNode = void 0;
        /* Make sure we have a string to sanitize.
          DO NOT return early, as this will return the wrong type if
          the user has requested a DOM object rather than a string */

        if (!dirty) {
          dirty = '<!-->';
        }
        /* Stringify, in case dirty is an object */


        if (typeof dirty !== 'string' && !_isNode(dirty)) {
          // eslint-disable-next-line no-negated-condition
          if (typeof dirty.toString !== 'function') {
            throw new TypeError('toString is not a function');
          } else {
            dirty = dirty.toString();

            if (typeof dirty !== 'string') {
              throw new TypeError('dirty is not a string, aborting');
            }
          }
        }
        /* Check we can run. Otherwise fall back or ignore */


        if (!DOMPurify.isSupported) {
          if (_typeof(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {
            if (typeof dirty === 'string') {
              return window.toStaticHTML(dirty);
            }

            if (_isNode(dirty)) {
              return window.toStaticHTML(dirty.outerHTML);
            }
          }

          return dirty;
        }
        /* Assign config vars */


        if (!SET_CONFIG) {
          _parseConfig(cfg);
        }
        /* Clean up removed elements */


        DOMPurify.removed = [];

        if (IN_PLACE) ; else if (dirty instanceof Node) {
          /* If dirty is a DOM element, append to an empty document to avoid
             elements being stripped by the parser */
          body = _initDocument('<!-->');
          importedNode = body.ownerDocument.importNode(dirty, true);

          if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {
            /* Node is already a body, use as is */
            body = importedNode;
          } else if (importedNode.nodeName === 'HTML') {
            body = importedNode;
          } else {
            // eslint-disable-next-line unicorn/prefer-node-append
            body.appendChild(importedNode);
          }
        } else {
          /* Exit directly if we have nothing to do */
          if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && RETURN_TRUSTED_TYPE && dirty.indexOf('<') === -1) {
            return trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
          }
          /* Initialize the document to work on */


          body = _initDocument(dirty);
          /* Check we have a DOM node from the data */

          if (!body) {
            return RETURN_DOM ? null : emptyHTML;
          }
        }
        /* Remove first element node (ours) if FORCE_BODY is set */


        if (body && FORCE_BODY) {
          _forceRemove(body.firstChild);
        }
        /* Get node iterator */


        var nodeIterator = _createIterator(IN_PLACE ? dirty : body);
        /* Now start iterating over the created document */


        while (currentNode = nodeIterator.nextNode()) {
          /* Fix IE's strange behavior with manipulated textNodes #89 */
          if (currentNode.nodeType === 3 && currentNode === oldNode) {
            continue;
          }
          /* Sanitize tags and elements */


          if (_sanitizeElements(currentNode)) {
            continue;
          }
          /* Shadow DOM detected, sanitize it */


          if (currentNode.content instanceof DocumentFragment) {
            _sanitizeShadowDOM(currentNode.content);
          }
          /* Check attributes, sanitize if necessary */


          _sanitizeAttributes(currentNode);

          oldNode = currentNode;
        }

        oldNode = null;
        /* If we sanitized `dirty` in-place, return it. */

        if (IN_PLACE) {
          return dirty;
        }
        /* Return sanitized string or DOM */


        if (RETURN_DOM) {
          if (RETURN_DOM_FRAGMENT) {
            returnNode = createDocumentFragment.call(body.ownerDocument);

            while (body.firstChild) {
              // eslint-disable-next-line unicorn/prefer-node-append
              returnNode.appendChild(body.firstChild);
            }
          } else {
            returnNode = body;
          }

          if (RETURN_DOM_IMPORT) {
            /* AdoptNode() is not used because internal state is not reset
                   (e.g. the past names map of a HTMLFormElement), this is safe
                   in theory but we would rather not risk another attack vector.
                   The state that is cloned by importNode() is explicitly defined
                   by the specs. */
            returnNode = importNode.call(originalDocument, returnNode, true);
          }

          return returnNode;
        }

        var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
        /* Sanitize final string template-safe */

        if (SAFE_FOR_TEMPLATES) {
          serializedHTML = serializedHTML.replace(MUSTACHE_EXPR$$1, ' ');
          serializedHTML = serializedHTML.replace(ERB_EXPR$$1, ' ');
        }

        return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
      };
      /**
       * Public method to set the configuration once
       * setConfig
       *
       * @param {Object} cfg configuration object
       */


      DOMPurify.setConfig = function (cfg) {
        _parseConfig(cfg);

        SET_CONFIG = true;
      };
      /**
       * Public method to remove the configuration
       * clearConfig
       *
       */


      DOMPurify.clearConfig = function () {
        CONFIG = null;
        SET_CONFIG = false;
      };
      /**
       * Public method to check if an attribute value is valid.
       * Uses last set config, if any. Otherwise, uses config defaults.
       * isValidAttribute
       *
       * @param  {string} tag Tag name of containing element.
       * @param  {string} attr Attribute name.
       * @param  {string} value Attribute value.
       * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.
       */


      DOMPurify.isValidAttribute = function (tag, attr, value) {
        /* Initialize shared config vars if necessary. */
        if (!CONFIG) {
          _parseConfig({});
        }

        var lcTag = tag.toLowerCase();
        var lcName = attr.toLowerCase();
        return _isValidAttribute(lcTag, lcName, value);
      };
      /**
       * AddHook
       * Public method to add DOMPurify hooks
       *
       * @param {String} entryPoint entry point for the hook to add
       * @param {Function} hookFunction function to execute
       */


      DOMPurify.addHook = function (entryPoint, hookFunction) {
        if (typeof hookFunction !== 'function') {
          return;
        }

        hooks[entryPoint] = hooks[entryPoint] || [];
        hooks[entryPoint].push(hookFunction);
      };
      /**
       * RemoveHook
       * Public method to remove a DOMPurify hook at a given entryPoint
       * (pops it from the stack of hooks if more are present)
       *
       * @param {String} entryPoint entry point for the hook to remove
       */


      DOMPurify.removeHook = function (entryPoint) {
        if (hooks[entryPoint]) {
          hooks[entryPoint].pop();
        }
      };
      /**
       * RemoveHooks
       * Public method to remove all DOMPurify hooks at a given entryPoint
       *
       * @param  {String} entryPoint entry point for the hooks to remove
       */


      DOMPurify.removeHooks = function (entryPoint) {
        if (hooks[entryPoint]) {
          hooks[entryPoint] = [];
        }
      };
      /**
       * RemoveAllHooks
       * Public method to remove all DOMPurify hooks
       *
       */


      DOMPurify.removeAllHooks = function () {
        hooks = {};
      };

      return DOMPurify;
    }

    var purify = createDOMPurify();
    var purify$1 = lwc.registerComponent(purify, {
      tmpl: _tmpl$1
    });

    /**
     * Sanitize method providing core sanitation functionality
     *
     * @param {String|Node} dirty string or DOM node
     * @param {Object} configuration object
     * @return {String} sanitized string
     */

    function sanitizeHTML(dirty, config) {
      return purify$1.sanitize(dirty, config);
    }

    function assert(condition, message) {
      {
        if (!condition) {
          throw new Error(message);
        }
      }
    }

    /**
    An emitter implementation based on the Node.js EventEmitter API:
    https://nodejs.org/dist/latest-v6.x/docs/api/events.html#events_class_eventemitter
    **/
    class EventEmitter {
      constructor() {
        this.registry = {};
      }
      /**
      Registers a listener on the emitter
      @method EventEmitter#on
      @param {String} name - The name of the event
      @param {Function} listener - The callback function
      @return {EventEmitter} - Returns a reference to the `EventEmitter` so that calls can be chained
      **/


      on(name, listener) {
        this.registry[name] = this.registry[name] || [];
        this.registry[name].push(listener);
        return this;
      }
      /**
      Registers a listener on the emitter that only executes once
      @method EventEmitter#once
      @param {String} name - The name of the event
      @param {Function} listener - The callback function
      @return {EventEmitter} - Returns a reference to the `EventEmitter` so that calls can be chained
      **/


      once(name, listener) {
        const doOnce = function () {
          listener.apply(null, arguments);
          this.removeListener(name, doOnce);
        }.bind(this);

        this.on(name, doOnce);
        return this;
      }
      /**
      Synchronously calls each listener registered with the specified event
      @method EventEmitter#emit
      @param {String} name - The name of the event
      @return {Boolean} - Returns `true` if the event had listeners, `false` otherwise
      **/


      emit(name) {
        const args = Array.prototype.slice.call(arguments, 1);
        const listeners = this.registry[name];
        let count = 0;

        if (listeners) {
          listeners.forEach(listener => {
            count += 1;
            listener.apply(null, args);
          });
        }

        return count > 0;
      }
      /**
      Removes the specified `listener` from the listener array for the event named `name`
      @method EventEmitter#removeListener
      @param {String} name - The name of the event
      @param {Function} listener - The callback function
      @return {EventEmitter} - Returns a reference to the `EventEmitter` so that calls can be chained
      **/


      removeListener(name, listener) {
        const listeners = this.registry[name];

        if (listeners) {
          for (let i = 0, len = listeners.length; i < len; i += 1) {
            if (listeners[i] === listener) {
              listeners.splice(i, 1);
              return this;
            }
          }
        }

        return this;
      }

    }

    var salesforceLocale = 'en-US';

    const urlRegexString = "((?:(?:https?|ftp):\\/\\/(?:[\\w\\-\\|=%~#\\/+*@\\.,;:\\?!']|&){0,2047}(?:[\\(\\)\\.\\w=\\/+#-]*)[^\\s()\\.<>,;\\[\\]`'\"])|(?:\\b(?:[a-z0-9](?:[-a-z0-9]{0,62}[a-z0-9])?\\.)+(?:AC|AD|AE|AERO|AF|AG|AI|AL|AM|AN|AO|AQ|AR|ARPA|AS|ASIA|AT|AU|AW|AX|AZ|BA|BB|BD|BE|BF|BG|BH|BI|BIZ|BJ|BM|BN|BO|BR|BS|BT|BV|BW|BY|BZ|CA|CAT|CC|CD|CF|CG|CH|CI|CK|CL|CM|CN|CO|COM|COOP|CR|CU|CV|CX|CY|CZ|DE|DJ|DK|DM|DO|DZ|EC|EDU|EE|EG|ER|ES|ET|EU|FI|FJ|FK|FM|FO|FR|GA|GB|GD|GE|GF|GG|GH|GI|GL|GM|GN|GOV|GP|GQ|GR|GS|GT|GU|GW|GY|HK|HM|HN|HR|HT|HU|ID|IE|IL|IM|IN|INFO|INT|IO|IQ|IR|IS|IT|JE|JM|JO|JOBS|JP|KE|KG|KH|KI|KM|KN|KP|KR|KW|KY|KZ|LA|LB|LC|LI|LK|LR|LS|LT|LU|LV|LY|MA|MC|MD|ME|MG|MH|MIL|MK|ML|MM|MN|MO|MOBI|MP|MQ|MR|MS|MT|MU|MUSEUM|MV|MW|MX|MY|MZ|NA|NAME|NC|NE|NET|NF|NG|NI|NL|NO|NP|NR|NU|NZ|OM|ORG|PA|PE|PF|PG|PH|PK|PL|PM|PN|PR|PRO|PS|PT|PW|PY|QA|RE|RO|RS|RU|RW|SA|SB|SC|SD|SE|SG|SH|SI|SJ|SK|SL|SM|SN|SO|SR|ST|SU|SV|SY|SZ|TC|TD|TEL|TF|TG|TH|TJ|TK|TL|TM|TN|TO|TP|TR|TRAVEL|TT|TV|TW|TZ|UA|UG|UK|US|UY|UZ|VA|VC|VE|VG|VI|VN|VU|WF|WS|XN--0ZWM56D|XN--11B5BS3A9AJ6G|XN--80AKHBYKNJ4F|XN--9T4B11YI5A|XN--DEBA0AD|XN--FIQS8S|XN--FIQZ9S|XN--G6W251D|XN--HGBK6AJ7F53BBA|XN--HLCJ6AYA9ESC7A|XN--J6W193G|XN--JXALPDLP|XN--KGBECHTV|XN--KPRW13D|XN--KPRY57D|XN--MGBAAM7A8H|XN--MGBERP4A5D4AR|XN--P1AI|XN--WGBH1C|XN--ZCKZAH|YE|YT|ZA|ZM|ZW)(?!@(?:[a-z0-9](?:[-a-z0-9]{0,62}[a-z0-9])?\\.)+(?:AC|AD|AE|AERO|AF|AG|AI|AL|AM|AN|AO|AQ|AR|ARPA|AS|ASIA|AT|AU|AW|AX|AZ|BA|BB|BD|BE|BF|BG|BH|BI|BIZ|BJ|BM|BN|BO|BR|BS|BT|BV|BW|BY|BZ|CA|CAT|CC|CD|CF|CG|CH|CI|CK|CL|CM|CN|CO|COM|COOP|CR|CU|CV|CX|CY|CZ|DE|DJ|DK|DM|DO|DZ|EC|EDU|EE|EG|ER|ES|ET|EU|FI|FJ|FK|FM|FO|FR|GA|GB|GD|GE|GF|GG|GH|GI|GL|GM|GN|GOV|GP|GQ|GR|GS|GT|GU|GW|GY|HK|HM|HN|HR|HT|HU|ID|IE|IL|IM|IN|INFO|INT|IO|IQ|IR|IS|IT|JE|JM|JO|JOBS|JP|KE|KG|KH|KI|KM|KN|KP|KR|KW|KY|KZ|LA|LB|LC|LI|LK|LR|LS|LT|LU|LV|LY|MA|MC|MD|ME|MG|MH|MIL|MK|ML|MM|MN|MO|MOBI|MP|MQ|MR|MS|MT|MU|MUSEUM|MV|MW|MX|MY|MZ|NA|NAME|NC|NE|NET|NF|NG|NI|NL|NO|NP|NR|NU|NZ|OM|ORG|PA|PE|PF|PG|PH|PK|PL|PM|PN|PR|PRO|PS|PT|PW|PY|QA|RE|RO|RS|RU|RW|SA|SB|SC|SD|SE|SG|SH|SI|SJ|SK|SL|SM|SN|SO|SR|ST|SU|SV|SY|SZ|TC|TD|TEL|TF|TG|TH|TJ|TK|TL|TM|TN|TO|TP|TR|TRAVEL|TT|TV|TW|TZ|UA|UG|UK|US|UY|UZ|VA|VC|VE|VG|VI|VN|VU|WF|WS|XN--0ZWM56D|XN--11B5BS3A9AJ6G|XN--80AKHBYKNJ4F|XN--9T4B11YI5A|XN--DEBA0AD|XN--FIQS8S|XN--FIQZ9S|XN--G6W251D|XN--HGBK6AJ7F53BBA|XN--HLCJ6AYA9ESC7A|XN--J6W193G|XN--JXALPDLP|XN--KGBECHTV|XN--KPRW13D|XN--KPRY57D|XN--MGBAAM7A8H|XN--MGBERP4A5D4AR|XN--P1AI|XN--WGBH1C|XN--ZCKZAH|YE|YT|ZA|ZM|ZW))(?:/[\\w\\-=?/.&;:%~,+@#*]{0,2048}(?:[\\w=/+#-]|\\([^\\s()]*\\)))?(?:$|(?=\\.$)|(?=\\.\\s)|(?=[^\\w\\.]))))";
    const emailRegexString = '([\\w-\\.\\+_]{1,64}@(?:[\\w-]){1,255}(?:\\.[\\w-]{1,255}){1,10})';
    const tagRegexString = '(<a[\\s]+[^>]+[^/]>[\\s\\S]*?</a>|<a[\\s]+[^>]+/>|' + '<i?frame[\\s]+[^>]+[^/]>[\\s\\S]*?</i?frame>|<i?frame[\\s]+[^>]+/>|' + '<area[\\s]+[^>]+[^/]>[\\s\\S]*?</area>|<area[\\s]+[^>]+/>|' + '<link[\\s]+[^>]+[^/]>[\\s\\S]*?</link>|<link[\\s]+[^>]+/>|' + '<img[\\s]+[^>]+[^/]>[\\s\\S]*?</img>|<img[\\s]+[^>]+>|' + '<form[\\s]+[^>]+[^/]>[\\s\\S]*?</form>|<form[\\s]+[^>]+/>|' + '<body[\\s]+[^>]+[^/]>[\\s\\S]*?</body>|<body[\\s]+[^>]+/>|' + '<head[\\s]+[^>]+[^/]>[\\s\\S]*?</head>|<head[\\s]+[^>]+/>|' + '<input[\\s]+[^>]+[^/]>[\\s\\S]*?</input>|<input[\\s]+[^>]+/>|' + '<button[\\s]+[^>]+[^/]>[\\s\\S]*?</button>|<button[\\s]+[^>]+/>|' + '<blockquote[\\s]+[^>]+[^/]>[\\s\\S]*?</blockquote>|<blockquote[\\s]+[^>]+/>|' + '<q[\\s]+[^>]+[^/]>[\\s\\S]*?</q>|<q[\\s]+[^>]+/>|' + '<del[\\s]+[^>]+[^/]>[\\s\\S]*?</del>|<del[\\s]+[^>]+/>|' + '<ins[\\s]+[^>]+[^/]>[\\s\\S]*?</ins>|<ins[\\s]+[^>]+/>)';
    const createHttpHref = function (url) {
      let href = url;

      if (url.toLowerCase().lastIndexOf('http', 0) !== 0 && url.toLowerCase().lastIndexOf('ftp', 0) !== 0) {
        href = `http://${href}`;
      }

      return href;
    };
    const createEmailHref = function (email) {
      return `mailto:${email}`;
    };

    /**
     * Create a deep copy of an object or array
     * @param {object|array} obj - item to be copied
     * @returns {object|array} copy of the item
     */
    function deepCopy(obj) {
      if (Object(obj) !== obj) {
        // primitives
        return obj;
      }

      if (obj instanceof Set) {
        return new Set(obj);
      }

      if (obj instanceof Date) {
        return new Date(obj);
      }

      if (typeof obj === 'function') {
        return obj.bind({});
      }

      if (Array.isArray(obj)) {
        const obj2 = [];
        const len = obj.length;

        for (let i = 0; i < len; i++) {
          obj2.push(deepCopy(obj[i]));
        }

        return obj2;
      }

      const result = Object.create({});
      let keys = Object.keys(obj);

      if (obj instanceof Error) {
        // Error properties are non-enumerable
        keys = Object.getOwnPropertyNames(obj);
      }

      const len = keys.length;

      for (let i = 0; i < len; i++) {
        const key = keys[i];
        result[key] = deepCopy(obj[key]);
      }

      return result;
    }
    const ArraySlice = Array.prototype.slice;

    /**
     * Utility function to generate an unique guid.
     * used on state objects to provide a performance aid when iterating
     * through the items and marking them for render
     * @returns {String} an unique string ID
     */
    function guid() {
      function s4() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      }

      return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    }

    function classListMutation(classList, config) {
      Object.keys(config).forEach(key => {
        if (typeof key === 'string' && key.length) {
          if (config[key]) {
            classList.add(key);
          } else {
            classList.remove(key);
          }
        }
      });
    }

    /**
    A string normalization utility for attributes.
    @param {String} value - The value to normalize.
    @param {Object} config - The optional configuration object.
    @param {String} [config.fallbackValue] - The optional fallback value to use if the given value is not provided or invalid. Defaults to an empty string.
    @param {Array} [config.validValues] - An optional array of valid values. Assumes all input is valid if not provided.
    @return {String} - The normalized value.
    **/
    function normalizeString(value, config = {}) {
      const {
        fallbackValue = '',
        validValues,
        toLowerCase = true
      } = config;
      let normalized = typeof value === 'string' && value.trim() || '';
      normalized = toLowerCase ? normalized.toLowerCase() : normalized;

      if (validValues && validValues.indexOf(normalized) === -1) {
        normalized = fallbackValue;
      }

      return normalized;
    }
    /**
    A boolean normalization utility for attributes.
    @param {Any} value - The value to normalize.
    @return {Boolean} - The normalized value.
    **/

    function normalizeBoolean(value) {
      return typeof value === 'string' || !!value;
    }
    function normalizeArray(value) {
      if (Array.isArray(value)) {
        return value;
      }

      return [];
    }
    /**
    A aria attribute normalization utility.
    @param {Any} value - A single aria value or an array of aria values
    @return {String} - A space separated list of aria values
    **/

    function normalizeAriaAttribute(value) {
      let arias = Array.isArray(value) ? value : [value];
      arias = arias.map(ariaValue => {
        if (typeof ariaValue === 'string') {
          return ariaValue.replace(/\s+/g, ' ').trim();
        }

        return '';
      }).filter(ariaValue => !!ariaValue);
      return arias.length > 0 ? arias.join(' ') : null;
    }

    const keyCodes = {
      tab: 9,
      backspace: 8,
      enter: 13,
      escape: 27,
      space: 32,
      pageup: 33,
      pagedown: 34,
      end: 35,
      home: 36,
      left: 37,
      up: 38,
      right: 39,
      down: 40,
      delete: 46,
      shift: 16
    }; // Acceptable values are defined here: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values
    // remove this function when IE11 support is dropped

    function normalizeKeyValue(value) {
      switch (value) {
        case 'Spacebar':
          return ' ';

        case 'Esc':
          return 'Escape';

        case 'Del':
          return 'Delete';

        case 'Left':
          return 'ArrowLeft';

        case 'Right':
          return 'ArrowRight';

        case 'Down':
          return 'ArrowDown';

        case 'Up':
          return 'ArrowUp';

        default:
          return value;
      }
    }
    const buffer = {};
    /**
     * Runs an action and passes the string of buffered keys typed within a short time period.
     * Use for type-ahead like functionality in menus, lists, comboboxes, and similar components.
     *
     * @param {CustomEvent} event A keyboard event
     * @param {Function} action function to run, it's passed the buffered text
     */

    function runActionOnBufferedTypedCharacters(event, action) {
      const letter = event.key;

      if (letter.length > 1) {
        // Not an individual character/letter, but rather a special code (like Shift, Backspace, etc.)
        return;
      } // If we were going to clear what keys were typed, don't yet.


      if (buffer._clearBufferId) {
        clearTimeout(buffer._clearBufferId);
      }

      buffer._keyBuffer = buffer._keyBuffer || [];

      buffer._keyBuffer.push(letter);

      const matchText = buffer._keyBuffer.join('').toLowerCase();

      action(matchText); // eslint-disable-next-line @lwc/lwc/no-async-operation

      buffer._clearBufferId = setTimeout(() => {
        buffer._keyBuffer = [];
      }, 700);
    }

    const isIE11 = isIE11Test(navigator);
    const isChrome = isChromeTest(navigator);
    const isSafari = isSafariTest(navigator); // The following functions are for tests only

    function isIE11Test(navigator) {
      // https://stackoverflow.com/questions/17447373/how-can-i-target-only-internet-explorer-11-with-javascript
      return /Trident.*rv[ :]*11\./.test(navigator.userAgent);
    }
    function isChromeTest(navigator) {
      // https://stackoverflow.com/questions/4565112/javascript-how-to-find-out-if-the-user-browser-is-chrome
      return /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
    }
    function isSafariTest(navigator) {
      // via https://stackoverflow.com/questions/49872111/detect-safari-and-stop-script
      return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    }

    /**
     * Set an attribute on an element, if it's a normal element
     * it will use setAttribute, if it's an LWC component
     * it will use the public property
     *
     * @param {HTMLElement} element The element to act on
     * @param {String} attribute the attribute to set
     * @param {Any} value the value to set
     */
    function smartSetAttribute(element, attribute, value) {
      if (element.tagName.match(/^LIGHTNING/i)) {
        attribute = attribute.replace(/-\w/g, m => m[1].toUpperCase());
        element[attribute] = value ? value : null;
      } else if (value) {
        element.setAttribute(attribute, value);
      } else {
        element.removeAttribute(attribute);
      }
    }

    const CONTENT_SEPARATOR = '\n';
    /**
    <template>
        <span lwc:dom="manual" class="visually-hidden"></span>
        <input>
    </template>

    class Foo extends LightningElement {
        constructor() {
            super();
            this.ariaObserver = new ContentMutation(this);
        }

        @track ariaLabeledbyValue = '';

        @api
        get ariaLabeledby() {
            return this.ariaLabeledbyValue; // whatever they set, is what they get back.
        }
        set ariaLabeledby(refs) {
            this.ariaLabeledbyValue = refs;
            this.ariaObserver.link('input', 'aria-labeledby', refs, 'span.visually-hidden');
        }

        renderedCallback() {
            this.ariaObserver.sync();
        }
    }
    **/

    function getAttr(elm, attr) {
      if (elm.tagName.match(/lightning/i)) {
        return elm[attr];
      }

      return elm.getAttribute(attr);
    }

    function extractElements(root, selector) {
      if (typeof selector !== 'string' || selector === '') {
        return [];
      }

      return [].slice.call(root.querySelectorAll(selector));
    }

    function extractContent(elements) {
      return elements.map(element => element.textContent).filter(text => text.length).join(CONTENT_SEPARATOR);
    }

    function splitIds(ids) {
      return (ids + '').trim().split(/\s+/);
    }

    function hashIds(ids) {
      return (ids + '').trim().split(/\s+/).reduce((r, v) => {
        r[v] = 1;
        return r;
      }, {});
    } // this method should check each individual id from computedIds
    // against the existing value of the attrName on elm, and dupe
    // them, and add the new ones.


    function addAriaRefWhenNeeded(elm, attrName, computedIds) {
      const newIds = splitIds(computedIds);
      const oldIds = getAttr(elm, attrName) || '';
      const oldIdsHash = hashIds(oldIds);
      const suffix = [];

      for (let i = 0; i < newIds.length; i += 1) {
        if (!oldIdsHash[newIds[i]]) {
          suffix.push(newIds[i]);
        }
      }

      if (suffix.length !== 0) {
        smartSetAttribute(elm, attrName, oldIds + (oldIds.length === 0 ? '' : ' ') + suffix.join(' '));
      }
    } // this method should check each individual id from computedIds
    // against the existing value of the attrName on elm, and remove
    // them when possible in preparation for some new values.


    function removeAriaRefWhenPossible(elm, attrName, computedIds) {
      const newIds = splitIds(computedIds);
      const oldIds = getAttr(elm, attrName) || '';
      const oldIdsHash = hashIds(oldIds);
      const newValues = [];

      for (let i = 0; i < newIds.length; i += 1) {
        if (!oldIdsHash[newIds[i]]) {
          newValues.push(newIds[i]);
        }
      }

      smartSetAttribute(elm, attrName, newValues.join(' '));
    }

    class ContentMutation {
      constructor(component) {
        this.template = component.template;
        this.isNative = this.template.constructor.toString().match(/\[native code\]/);
        this.state = {};
        this.liveIds = {};
        this.guid = guid();
      }

      connectLiveIdRef(refs, callback) {
        const selector = (refs + '').trim().split(/\s+/).map(ref => `[id*="${ref}"]`).join(',');
        const liveId = {
          selector,
          callback
        };
        this.liveIds[refs] = liveId;
      }

      link(innerSelector, attrName, ids, placeholderContainerSelector) {
        let attrState = this.state[attrName];

        if (attrState) {
          // note: we don't support linking to a different innerSelector,
          // attrName, or placeholderContainerSelector
          if (!this.isNative) {
            const elm = this.template.querySelector(innerSelector);

            if (elm) {
              // removing the old ids if possible before setting the new ones
              removeAriaRefWhenPossible(elm, attrName, attrState.ids);
            }

            attrState.ids = ids;
          }
        } else {
          attrState = this.state[attrName] = {
            ids,
            innerSelector,
            placeholderContainerSelector
          };
        }

        if (this.isNative) {
          attrState.outerSelector = (ids + '').trim().split(/\s+/).map(ref => `#${ref}`).join(',');
          attrState.placeholder = document.createElement('span');
          attrState.placeholder.id = `auto-link-${attrName}-${this.guid}`;
        }

        if (this.template.host.parentNode) {
          this.privateUpdate(attrName);
        }
      }

      sync() {
        if (!this.template.host.parentNode) {
          throw new Error(`Invalid sync invocation. It can only be invoked during renderedCallback().`);
        }

        if (this.isNative && !this.mo) {
          this.privateConnect();
        }

        for (const attrName in this.state) {
          if (Object.prototype.hasOwnProperty.call(this.state, attrName)) {
            this.privateUpdate(attrName);
          }
        } // live idRef feature is a no-op in native


        if (!this.isNative) {
          this.privateUpdateLiveIds();
        }
      }

      privateExtractIds(elements) {
        return elements.map(el => {
          return el.getAttribute('id');
        }).join(' ');
      }

      privateUpdateLiveIds() {
        const root = this.template.host.getRootNode(); // if not connected do nothing

        if (!root) {
          return;
        }

        for (const liveId in this.liveIds) {
          if (Object.prototype.hasOwnProperty.call(this.liveIds, liveId)) {
            const thisId = this.liveIds[liveId];

            if (!thisId.elements) {
              // element refs are cached
              thisId.elements = Array.prototype.slice.call(root.querySelectorAll(thisId.selector));
            }

            const newIds = this.privateExtractIds(thisId.elements); // only fire calback if the value changed

            if (newIds !== thisId.ids) {
              thisId.callback(newIds);
              thisId.ids = newIds;
            }
          }
        }
      }

      privateUpdate(attrName) {
        const {
          innerSelector
        } = this.state[attrName];
        const elm = this.template.querySelector(innerSelector);

        if (!elm) {
          return; // nothing to update
        }

        let computedIds;

        if (this.isNative) {
          const {
            outerSelector,
            content,
            placeholder,
            placeholderContainerSelector
          } = this.state[attrName];
          const newContent = extractContent(extractElements(this.root, outerSelector));

          if (content !== newContent) {
            this.state[attrName].content = placeholder.textContent = newContent;
          }

          if (!placeholder.parentNode) {
            // inserting the placeholder once
            const container = this.template.querySelector(placeholderContainerSelector);

            if (container) {
              container.appendChild(placeholder);
            }
          }

          computedIds = placeholder.id;
        } else {
          computedIds = this.state[attrName].ids;
        }

        addAriaRefWhenNeeded(elm, attrName, computedIds);
      }

      privateConnect() {
        // caching root ref
        this.root = this.template.host.getRootNode(); // creating the observer once

        const mo = new MutationObserver(() => {
          if (!this.template.host.parentNode) {
            return; // do nothing when the template is not connected
          }

          this.sync();
        });
        mo.observe(this.root, {
          characterData: true,
          childList: true,
          subtree: true
        });
      }

    }

    const ALLOWED_DOMAINS = new Set(['www.youtube.com', 'player.vimeo.com', 'play.vidyard.com', 'players.brightcove.net', 'bcove.video', 'player.cloudinary.com', 'fast.wistia.net', 'i1.adis.ws', 's1.adis.ws']);
    function hasOnlyAllowedVideoIframes(htmlString) {
      if (htmlString && htmlString.indexOf('<iframe') > -1) {
        const parsedHtml = new DOMParser().parseFromString(htmlString, 'text/html');
        const iframesList = Array.prototype.slice.call(parsedHtml.querySelectorAll('iframe'));
        return iframesList.length > 0 && !iframesList.some(iframe => !isUrlAllowed(iframe.src));
      }

      return false;
    }

    function isUrlAllowed(url) {
      const anchor = document.createElement('a');
      anchor.href = url;
      return anchor.protocol === 'https:' && ALLOWED_DOMAINS.has(anchor.hostname);
    }

    /**
     * @param {HTMLElement} element Element to act on
     * @param {Object} values values and attributes to set, if the value is
     *                        falsy it the attribute will be removed
     */

    function synchronizeAttrs(element, values) {
      if (!element) {
        return;
      }

      const attributes = Object.keys(values);
      attributes.forEach(attribute => {
        smartSetAttribute(element, attribute, values[attribute]);
      });
    }
    /**
     * Get the actual DOM id for an element
     * @param {HTMLElement|String} el The element to get the id for (string will just be returned)
     *
     * @returns {String} The DOM id or null
     */

    function getRealDOMId(el) {
      if (el && typeof el === 'string') {
        return el;
      } else if (el) {
        return el.getAttribute('id');
      }

      return null;
    }
    function isRTL() {
      return document.dir === 'rtl';
    }
    function isUndefinedOrNull(value) {
      return value === null || value === undefined;
    }
    function isNotUndefinedOrNull(value) {
      return !isUndefinedOrNull(value);
    }
    const DEFAULT_ZINDEX_BASELINE = 9000;
    /**
     * Returns the zIndex baseline from slds zIndex variable --lwc-zIndexModal.
     * @returns {Number} zIndex baseline
     */

    function getZIndexBaseline() {
      const value = (window.getComputedStyle(document.documentElement) || document.documentElement.style).getPropertyValue('--lwc-zIndexModal');
      const base = parseInt(value, 10);
      return isNaN(base) ? DEFAULT_ZINDEX_BASELINE : base;
    }
    /**
     *
     * Decorates an input element to fire an "input"
     * event when the value is directly set.
     *
     * @param {HTMLElement} element The element to decorate.
     *
     */

    function decorateInputForDragon(element) {
      const valuePropertyDescriptor = getInputValuePropertyDescriptor(element);
      Object.defineProperty(element, 'value', {
        set(value) {
          valuePropertyDescriptor.set.call(this, value);
          this.dispatchEvent(new CustomEvent('input'));
        },

        get: valuePropertyDescriptor.get,
        enumerable: true,
        configurable: true
      });
    }

    function getInputValuePropertyDescriptor(element) {
      return Object.getOwnPropertyDescriptor(Object.getPrototypeOf(element), 'value');
    }

    function setDecoratedDragonInputValueWithoutEvent(element, value) {
      const valuePropertyDescriptor = getInputValuePropertyDescriptor(element);
      return valuePropertyDescriptor.set.call(element, value);
    }

    const linkRegex = new RegExp(`${tagRegexString}|${urlRegexString}|${emailRegexString}`, 'gi');

    const createHttpLink = function (match) {
      const href = createHttpHref(match);
      return `<a href="${href}" target="_blank" rel="noopener">${match}</a>`;
    };

    const createEmailLink = function (match) {
      const href = createEmailHref(match);
      return `<a href="${href}">${match}</a>`;
    };

    const linkify = function (text) {
      if (typeof text !== 'string') {
        return '';
      }

      return text.replace(linkRegex, (match, tagMatch, hrefMatch, emailMatch) => {
        if (tagMatch) {
          return tagMatch;
        } else if (hrefMatch) {
          const endsWithQuote = hrefMatch.endsWith('&quot');
          let href = hrefMatch;

          if (endsWithQuote) {
            href = hrefMatch.slice(0, hrefMatch.lastIndexOf('&quot'));
          }

          return createHttpLink(href) + (endsWithQuote ? '&quot' : '');
        } else if (emailMatch) {
          return createEmailLink(emailMatch);
        }

        return match;
      });
    };

    const tagsWhitelist = Object.freeze(['a', 'abbr', 'acronym', 'address', 'b', 'br', 'big', 'blockquote', 'caption', 'cite', 'code', 'col', 'colgroup', 'del', 'div', 'dl', 'dd', 'dt', 'em', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'i', 'img', 'ins', 'kbd', 'li', 'ol', 'mark', 'p', 'param', 'pre', 'q', 's', 'samp', 'small', 'span', 'strong', 'sub', 'sup', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'tt', 'u', 'ul', 'var', 'strike', 'font']);
    const attrWhitelist = Object.freeze(['accept', 'action', 'align', 'alt', 'autocomplete', 'background', 'bgcolor', 'border', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'coords', 'datetime', 'default', 'dir', 'disabled', 'download', 'enctype', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'ismap', 'label', 'lang', 'list', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'multiple', 'name', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'span', 'srclang', 'start', 'src', 'step', 'style', 'summary', 'tabindex', 'target', 'title', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns', 'data-fileid']);
    const richTextConfig = Object.freeze({
      ALLOWED_TAGS: tagsWhitelist,
      ALLOWED_ATTR: attrWhitelist,
      ALLOW_UNKNOWN_PROTOCOLS: false
    });

    const GET_LINK_INFO_EVENT = 'lightningroutingservicegetlinkinfo';
    const urlTypes = {
      standard: 'standard_webPage'
    };
    /*
     * Mock getLinkInfo
     *
     * @returns {Promise[LinkInfo]}
     */

    function getLinkInfo(element, stateRef) {
      return new Promise((resolve, reject) => {
        // eslint-disable-next-line lightning-global/no-custom-event-identifier-arguments
        const getLinkInfoEvent = new CustomEvent(GET_LINK_INFO_EVENT, {
          detail: {
            stateRef,
            callback: (err, linkInfo) => {
              if (err) {
                reject(err);
              } else {
                resolve(linkInfo);
              }
            }
          },
          bubbles: true,
          composed: true,
          cancelable: true
        });
        element.dispatchEvent(getLinkInfoEvent);
      });
    }
    /**
     * Determines the route for the given url and updates the element
     * state with the correct url and dispatcher.
     *
     * @param {HTMLElement} element Element from which to dispatch the routing event
     * @param {Object} url Link to route, target Target of the link
     * @param {function} callback on the returned LinkInfo
     *
     * @returns {Promise} Promise[LinkInfo]
     */

    function updateRawLinkInfo(element, {
      url,
      target
    }) {
      if (url === undefined || url === null) {
        // eslint-disable-next-line no-console
        console.error('url must be specified');
      }

      if (target === '_blank') {
        // Have a no-op dispatcher if target is blank
        return new Promise(resolve => {
          resolve({
            url,
            dispatcher: () => {}
          });
        });
      }

      return getLinkInfo(element, {
        stateType: urlTypes.standard,
        attributes: {
          url,
          target
        }
      });
    }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? Object(arguments[i]) : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
    /**
     * Displays rich text that's formatted with whitelisted tags and attributes.
     * Other tags and attributes are removed and only their text content is displayed.
     */

    class LightningFormattedRichText extends lwc.LightningElement {
      constructor(...args) {
        super(...args);
        this.initialRender = true;
        this._value = '';
        this._disableLinkify = false;
        this.connected = false;
        this.clean = false;
      }

      /**
       * If present, the component does not create links in the rich text.
       * @type {boolean}
       * @default false
       */
      get disableLinkify() {
        return this._disableLinkify;
      }

      set disableLinkify(val) {
        this._disableLinkify = normalizeBoolean(val);
        this.renderRichText();
      }
      /**
       * Sets the rich text to display.
       * @type {string}
       *
       */


      get value() {
        return this._value;
      }

      set value(val) {
        this._value = val === undefined || val === null ? '' : String(val);
        this.renderRichText();
      }

      renderedCallback() {
        if (this.initialRender) {
          this.renderRichText();
          this.initialRender = false;
        }
      }

      connectedCallback() {
        this.classList.add('slds-rich-text-editor__output');
        this.connected = true;
      }

      disconnectedCallback() {
        this.connected = false;
      }

      handleClick(event) {
        const anchor = this.findNearestAnchor(event.target);

        if (anchor == null) {
          return;
        }

        const target = anchor.target;
        const url = anchor.href; // Grab the link info onclick and dispatch

        updateRawLinkInfo(this, {
          url,
          target
        }).then(linkInfo => {
          anchor.href = linkInfo.url;
          linkInfo.dispatcher(event);
        });
      }

      sanitize(value) {
        this.clean = false;
        let displayValue;
        let computedRichTextConfig = richTextConfig;

        if (hasOnlyAllowedVideoIframes(value)) {
          // richTextConfig is shared across all formatted-rich-text components;
          // so create and modify copy of richTextConfig to whitelist iframes for each component
          computedRichTextConfig = _objectSpread({}, richTextConfig, {
            ALLOWED_TAGS: richTextConfig.ALLOWED_TAGS.concat(['iframe'])
          });
        }

        try {
          displayValue = sanitizeHTML(value, computedRichTextConfig);
          this.clean = true;
        } catch (e) {
          // eslint-disable-next-line no-console
          console.warn(`<lightning-formatted-rich-text> Exception caught when attempting to sanitize: `, e);
          displayValue = value;
          this.clean = false;
        }

        return displayValue;
      }

      renderRichText() {
        if (this.connected) {
          const richText = this.sanitize(this.disableLinkify ? this.value : linkify(this.value));
          const container = this.getContainer();

          if (this.clean) {
            // eslint-disable-next-line @lwc/lwc/no-inner-html
            container.innerHTML = richText;
          } else {
            const textNode = document.createTextNode(richText);

            while (container.hasChildNodes()) {
              container.removeChild(container.lastChild);
            }

            container.appendChild(textNode);
          }
        }
      }

      getContainer() {
        return this.template.querySelector('span');
      }

      findNearestAnchor(startingElement) {
        const container = this.getContainer();
        let element = startingElement;

        while (element !== null && element !== container) {
          if (element.tagName === 'A') {
            return element;
          }

          element = element.parentNode;
        }

        return null;
      }

    }

    lwc.registerDecorators(LightningFormattedRichText, {
      publicProps: {
        disableLinkify: {
          config: 3
        },
        value: {
          config: 3
        }
      },
      fields: ["initialRender", "_value", "_disableLinkify", "connected", "clean"]
    });

    var _lightningFormattedRichText = lwc.registerComponent(LightningFormattedRichText, {
      tmpl: _tmpl
    });

    function stylesheet$1(hostSelector, shadowSelector, nativeShadow) {
      return "\n" + (nativeShadow ? (":host {display: block;}") : (hostSelector + " {display: block;}")) + "\n";
    }
    var _implicitStylesheets$1 = [stylesheet$1];

    function stylesheet$2(hostSelector, shadowSelector, nativeShadow) {
      return "_:-ms-lang(x)" + shadowSelector + ", svg" + shadowSelector + " {pointer-events: none;}\n";
    }
    var _implicitStylesheets$2 = [stylesheet$2];

    function tmpl$1($api, $cmp, $slotset, $ctx) {
      const {
        fid: api_scoped_frag_id,
        h: api_element
      } = $api;
      return [api_element("svg", {
        className: $cmp.computedClass,
        attrs: {
          "focusable": "false",
          "data-key": $cmp.name,
          "aria-hidden": "true"
        },
        key: 1
      }, [api_element("use", {
        attrs: {
          "xlink:href": lwc.sanitizeAttribute("use", "http://www.w3.org/2000/svg", "xlink:href", api_scoped_frag_id($cmp.href))
        },
        key: 0
      }, [])])];
    }

    var _tmpl$2 = lwc.registerTemplate(tmpl$1);
    tmpl$1.stylesheets = [];

    if (_implicitStylesheets$2) {
      tmpl$1.stylesheets.push.apply(tmpl$1.stylesheets, _implicitStylesheets$2);
    }
    tmpl$1.stylesheetTokens = {
      hostAttribute: "lightning-primitiveIcon_primitiveIcon-host",
      shadowAttribute: "lightning-primitiveIcon_primitiveIcon"
    };

    var dir = 'ltr';

    const proto = {
      add(className) {
        if (typeof className === 'string') {
          this[className] = true;
        } else {
          Object.assign(this, className);
        }

        return this;
      },

      invert() {
        Object.keys(this).forEach(key => {
          this[key] = !this[key];
        });
        return this;
      },

      toString() {
        return Object.keys(this).filter(key => this[key]).join(' ');
      }

    };
    function classSet(config) {
      if (typeof config === 'string') {
        const key = config;
        config = {};
        config[key] = true;
      }

      return Object.assign(Object.create(proto), config);
    }

    /**
     * Takes label strings with placeholder params (`{0}`) and updates the label with given `args`
     * @param {string} str - any label string requiring injections of other strings/params (e.g., 'foo {0}')
     * @param  {string|array} arguments - string(s) to be injected into the `string` param
     * @returns {string} fully replaced string, e.g., '{0} is a {1}' -> 'Hal Jordan is a Green Lantern'
     */
    function formatLabel(str) {
      const args = Array.prototype.slice.call(arguments, 1);
      let replacements = args;

      if (Array.isArray(args[0])) {
        [replacements] = args;
      }

      return str.replace(/{(\d+)}/g, (match, i) => {
        return replacements[i];
      });
    }

    // Taken from https://github.com/jonathantneal/svg4everybody/pull/139
    // Remove this iframe-in-edge check once the following is resolved https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8323875/
    const isEdgeUA = /\bEdge\/.(\d+)\b/.test(navigator.userAgent);
    const inIframe = window.top !== window.self;
    const isIframeInEdge = isEdgeUA && inIframe;
    var isIframeInEdge$1 = lwc.registerComponent(isIframeInEdge, {
      tmpl: _tmpl$1
    });

    // Taken from https://git.soma.salesforce.com/aura/lightning-global/blob/999dc35f948246181510df6e56f45ad4955032c2/src/main/components/lightning/SVGLibrary/stamper.js#L38-L60
    function fetchSvg(url) {
      return new Promise((resolve, reject) => {
        const xhr = new XMLHttpRequest();
        xhr.open('GET', url);
        xhr.send();

        xhr.onreadystatechange = () => {
          if (xhr.readyState === 4) {
            if (xhr.status === 200) {
              resolve(xhr.responseText);
            } else {
              reject(xhr);
            }
          }
        };
      });
    }

    // Which looks like it was inspired by https://github.com/jonathantneal/svg4everybody/blob/377d27208fcad3671ed466e9511556cb9c8b5bd8/lib/svg4everybody.js#L92-L107
    // Modify at your own risk!

    const newerIEUA = /\bTrident\/[567]\b|\bMSIE (?:9|10)\.0\b/;
    const webkitUA = /\bAppleWebKit\/(\d+)\b/;
    const olderEdgeUA = /\bEdge\/12\.(\d+)\b/;
    const isIE = newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537;
    const supportsSvg = !isIE && !isIframeInEdge$1;
    var supportsSvg$1 = lwc.registerComponent(supportsSvg, {
      tmpl: _tmpl$1
    });

    /**
    This polyfill injects SVG sprites into the document for clients that don't
    fully support SVG. We do this globally at the document level for performance
    reasons. This causes us to lose namespacing of IDs across sprites. For example,
    if both #image from utility sprite and #image from doctype sprite need to be
    rendered on the page, both end up as #image from the doctype sprite (last one
    wins). SLDS cannot change their image IDs due to backwards-compatibility
    reasons so we take care of this issue at runtime by adding namespacing as we
    polyfill SVG elements.

    For example, given "/assets/icons/action-sprite/svg/symbols.svg#approval", we
    replace the "#approval" id with "#${namespace}-approval" and a similar
    operation is done on the corresponding symbol element.
    **/
    const svgTagName = /svg/i;

    const isSvgElement = el => el && svgTagName.test(el.nodeName);

    const requestCache = {};
    const symbolEls = {};
    const svgFragments = {};
    const spritesContainerId = 'slds-svg-sprites';
    let spritesEl;
    function polyfill(el) {
      if (!supportsSvg$1 && isSvgElement(el)) {
        if (!spritesEl) {
          spritesEl = document.createElement('svg');
          spritesEl.xmlns = 'http://www.w3.org/2000/svg';
          spritesEl['xmlns:xlink'] = 'http://www.w3.org/1999/xlink';
          spritesEl.style.display = 'none';
          spritesEl.id = spritesContainerId;
          document.body.insertBefore(spritesEl, document.body.childNodes[0]);
        }

        Array.from(el.getElementsByTagName('use')).forEach(use => {
          // We access the href differently in raptor and in aura, probably
          // due to difference in the way the svg is constructed.
          const src = use.getAttribute('xlink:href') || use.getAttribute('href');

          if (src) {
            // "/assets/icons/action-sprite/svg/symbols.svg#approval" =>
            // ["/assets/icons/action-sprite/svg/symbols.svg", "approval"]
            const parts = src.split('#');
            const url = parts[0];
            const id = parts[1];
            const namespace = url.replace(/[^\w]/g, '-');
            const href = `#${namespace}-${id}`;

            if (url.length) {
              // set the HREF value to no longer be an external reference
              if (use.getAttribute('xlink:href')) {
                use.setAttribute('xlink:href', href);
              } else {
                use.setAttribute('href', href);
              } // only insert SVG content if it hasn't already been retrieved


              if (!requestCache[url]) {
                requestCache[url] = fetchSvg(url);
              }

              requestCache[url].then(svgContent => {
                // create a document fragment from the svgContent returned (is parsed by HTML parser)
                if (!svgFragments[url]) {
                  const svgFragment = document.createRange().createContextualFragment(svgContent);
                  svgFragments[url] = svgFragment;
                }

                if (!symbolEls[href]) {
                  const svgFragment = svgFragments[url];
                  const symbolEl = svgFragment.querySelector(`#${id}`);
                  symbolEls[href] = true;
                  symbolEl.id = `${namespace}-${id}`;
                  spritesEl.appendChild(symbolEl);
                }
              });
            }
          }
        });
      }
    }

    const validNameRe = /^([a-zA-Z]+):([a-zA-Z]\w*)$/;
    const underscoreRe = /_/g;
    let pathPrefix;
    const tokenNameMap = Object.assign(Object.create(null), {
      action: 'lightning.actionSprite',
      custom: 'lightning.customSprite',
      doctype: 'lightning.doctypeSprite',
      standard: 'lightning.standardSprite',
      utility: 'lightning.utilitySprite'
    });
    const tokenNameMapRtl = Object.assign(Object.create(null), {
      action: 'lightning.actionSpriteRtl',
      custom: 'lightning.customSpriteRtl',
      doctype: 'lightning.doctypeSpriteRtl',
      standard: 'lightning.standardSpriteRtl',
      utility: 'lightning.utilitySpriteRtl'
    });
    const defaultTokenValueMap = Object.assign(Object.create(null), {
      'lightning.actionSprite': '/assets/icons/action-sprite/svg/symbols.svg',
      'lightning.actionSpriteRtl': '/assets/icons/action-sprite/svg/symbols.svg',
      'lightning.customSprite': '/assets/icons/custom-sprite/svg/symbols.svg',
      'lightning.customSpriteRtl': '/assets/icons/custom-sprite/svg/symbols.svg',
      'lightning.doctypeSprite': '/assets/icons/doctype-sprite/svg/symbols.svg',
      'lightning.doctypeSpriteRtl': '/assets/icons/doctype-sprite/svg/symbols.svg',
      'lightning.standardSprite': '/assets/icons/standard-sprite/svg/symbols.svg',
      'lightning.standardSpriteRtl': '/assets/icons/standard-sprite/svg/symbols.svg',
      'lightning.utilitySprite': '/assets/icons/utility-sprite/svg/symbols.svg',
      'lightning.utilitySpriteRtl': '/assets/icons/utility-sprite/svg/symbols.svg'
    });

    const getDefaultBaseIconPath = (category, nameMap) => defaultTokenValueMap[nameMap[category]];

    const getBaseIconPath = (category, direction) => {
      const nameMap = direction === 'rtl' ? tokenNameMapRtl : tokenNameMap;
      return configProvider.getToken(nameMap[category]) || getDefaultBaseIconPath(category, nameMap);
    };

    const getMatchAtIndex = index => iconName => {
      const result = validNameRe.exec(iconName);
      return result ? result[index] : '';
    };

    const getCategory = getMatchAtIndex(1);
    const getName = getMatchAtIndex(2);
    const isValidName = iconName => validNameRe.test(iconName);
    const getIconPath = (iconName, direction = 'ltr') => {
      pathPrefix = pathPrefix !== undefined ? pathPrefix : configProvider.getPathPrefix();

      if (isValidName(iconName)) {
        const baseIconPath = getBaseIconPath(getCategory(iconName), direction);

        if (baseIconPath) {
          // This check was introduced the following MS-Edge issue:
          // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/9655192/
          // If and when this get fixed, we can safely remove this block of code.
          if (isIframeInEdge$1) {
            // protocol => 'https:' or 'http:'
            // host => hostname + port
            const origin = `${window.location.protocol}//${window.location.host}`;
            return `${origin}${pathPrefix}${baseIconPath}#${getName(iconName)}`;
          }

          return `${pathPrefix}${baseIconPath}#${getName(iconName)}`;
        }
      }

      return '';
    };
    const computeSldsClass = iconName => {
      if (isValidName(iconName)) {
        const category = getCategory(iconName);
        const name = getName(iconName).replace(underscoreRe, '-');
        return `slds-icon-${category}-${name}`;
      }

      return '';
    };

    class LightningPrimitiveIcon extends lwc.LightningElement {
      constructor(...args) {
        super(...args);
        this.iconName = void 0;
        this.src = void 0;
        this.svgClass = void 0;
        this.size = 'medium';
        this.variant = void 0;
        this.privateIconSvgTemplates = configProvider.getIconSvgTemplates();
      }

      get inlineSvgProvided() {
        return !!this.privateIconSvgTemplates;
      }

      renderedCallback() {
        if (this.iconName !== this.prevIconName && !this.inlineSvgProvided) {
          this.prevIconName = this.iconName;
          const svgElement = this.template.querySelector('svg');
          polyfill(svgElement);
        }
      }

      get href() {
        return this.src || getIconPath(this.iconName, dir);
      }

      get name() {
        return getName(this.iconName);
      }

      get normalizedSize() {
        return normalizeString(this.size, {
          fallbackValue: 'medium',
          validValues: ['xx-small', 'x-small', 'small', 'medium', 'large']
        });
      }

      get normalizedVariant() {
        // NOTE: Leaving a note here because I just wasted a bunch of time
        // investigating why both 'bare' and 'inverse' are supported in
        // lightning-primitive-icon. lightning-icon also has a deprecated
        // 'bare', but that one is synonymous to 'inverse'. This 'bare' means
        // that no classes should be applied. So this component needs to
        // support both 'bare' and 'inverse' while lightning-icon only needs to
        // support 'inverse'.
        return normalizeString(this.variant, {
          fallbackValue: '',
          validValues: ['bare', 'error', 'inverse', 'warning', 'success']
        });
      }

      get computedClass() {
        const {
          normalizedSize,
          normalizedVariant
        } = this;
        const classes = classSet(this.svgClass);

        if (normalizedVariant !== 'bare') {
          classes.add('slds-icon');
        }

        switch (normalizedVariant) {
          case 'error':
            classes.add('slds-icon-text-error');
            break;

          case 'warning':
            classes.add('slds-icon-text-warning');
            break;

          case 'success':
            classes.add('slds-icon-text-success');
            break;

          case 'inverse':
          case 'bare':
            break;

          default:
            // if custom icon is set, we don't want to set
            // the text-default class
            if (!this.src) {
              classes.add('slds-icon-text-default');
            }

        }

        if (normalizedSize !== 'medium') {
          classes.add(`slds-icon_${normalizedSize}`);
        }

        return classes.toString();
      }

      resolveTemplate() {
        const name = this.iconName;

        if (isValidName(name)) {
          const [spriteName, iconName] = name.split(':');
          const template = this.privateIconSvgTemplates[`${spriteName}_${iconName}`];

          if (template) {
            return template;
          }
        }

        return _tmpl$2;
      }

      render() {
        if (this.inlineSvgProvided) {
          return this.resolveTemplate();
        }

        return _tmpl$2;
      }

    }

    lwc.registerDecorators(LightningPrimitiveIcon, {
      publicProps: {
        iconName: {
          config: 0
        },
        src: {
          config: 0
        },
        svgClass: {
          config: 0
        },
        size: {
          config: 0
        },
        variant: {
          config: 0
        }
      },
      fields: ["privateIconSvgTemplates"]
    });

    var _lightningPrimitiveIcon = lwc.registerComponent(LightningPrimitiveIcon, {
      tmpl: _tmpl$2
    });

    function tmpl$2($api, $cmp, $slotset, $ctx) {
      const {
        c: api_custom_element,
        d: api_dynamic,
        h: api_element
      } = $api;
      return [api_element("div", {
        classMap: {
          "slds-form-element__icon": true
        },
        key: 3
      }, [api_element("button", {
        classMap: {
          "slds-button": true,
          "slds-button_icon": true
        },
        attrs: {
          "type": "button"
        },
        key: 2
      }, [api_custom_element("lightning-primitive-icon", _lightningPrimitiveIcon, {
        props: {
          "svgClass": $cmp.computedSvgClass,
          "iconName": $cmp.iconName,
          "variant": "bare"
        },
        key: 0
      }, []), api_element("span", {
        classMap: {
          "slds-assistive-text": true
        },
        key: 1
      }, [api_dynamic($cmp.i18n.buttonAlternativeText)])])])];
    }

    var _tmpl$3 = lwc.registerTemplate(tmpl$2);
    tmpl$2.stylesheets = [];
    tmpl$2.stylesheetTokens = {
      hostAttribute: "lightning-helptext_helptext-host",
      shadowAttribute: "lightning-helptext_helptext"
    };

    var labelButtonAlternativeText = 'Help';

    const POSITION_ATTR_NAME = 'data-position-id';

    class BrowserWindow {
      get window() {
        if (!this._window) {
          this._window = window; // JTEST/Ingtegration: getComputedStyle may be null

          if (!this.window.getComputedStyle) {
            this.window.getComputedStyle = node => {
              return node.style;
            };
          }
        }

        return this._window;
      }

      mockWindow(value) {
        // For test, allow mock window.
        this._window = value;
      }

      get documentElement() {
        assert(this.window.document, 'Missing window.document');
        return this.window.document.documentElement;
      }

      get MutationObserver() {
        return this.window.MutationObserver;
      }

      isWindow(element) {
        return element && element.toString() === '[object Window]';
      }

    }

    const WindowManager = new BrowserWindow();

    function isShadowRoot(node) {
      return node && node.nodeType === 11;
    }

    function enumerateParent(elem, stopEl, checker) {
      // document.body is not necessarily a body tag, because of the (very rare)
      // case of a frameset.
      if (!elem || elem === stopEl || elem === document.body) {
        return null;
      } // if overflow is auto and overflow-y is also auto,
      // however in firefox the opposite is not true


      try {
        // getComputedStyle throws an exception
        // if elem is not an element
        // (can happen during unrender)
        const computedStyle = WindowManager.window.getComputedStyle(elem);

        if (!computedStyle) {
          return null;
        }

        if (checker(computedStyle)) {
          return elem;
        }

        return enumerateParent(isShadowRoot(elem.parentNode) ? elem.parentNode.host : elem.parentNode, stopEl, checker);
      } catch (e) {
        return null;
      }
    }

    function getScrollableParent(elem, stopEl) {
      return enumerateParent(elem, stopEl, computedStyle => {
        const overflow = computedStyle['overflow-y'];
        return overflow === 'auto' || overflow === 'scroll';
      });
    }

    function queryOverflowHiddenParent(elem, stopEl) {
      return enumerateParent(elem, stopEl, computedStyle => {
        return computedStyle['overflow-x'] === 'hidden' || computedStyle['overflow-y'] === 'hidden';
      });
    }

    function isInDom(el) {
      if (el === WindowManager.window) {
        return true;
      }

      if (!isShadowRoot(el.parentNode) && el.parentNode && el.parentNode.tagName && el.parentNode.tagName.toUpperCase() === 'BODY') {
        return true;
      }

      if (isShadowRoot(el.parentNode) && el.parentNode.host) {
        return isInDom(el.parentNode.host);
      }

      if (el.parentNode) {
        return isInDom(el.parentNode);
      }

      return false;
    }
    function isDomNode(obj) {
      return obj.nodeType && (obj.nodeType === 1 || obj.nodeType === 11);
    }
    function timeout(time) {
      return new Promise(resolve => {
        // eslint-disable-next-line @lwc/lwc/no-async-operation
        setTimeout(() => {
          resolve();
        }, time);
      });
    }
    function getPositionTarget(element) {
      return element.tagName === 'TEXTAREA' ? isShadowRoot(element.parentNode) ? element.parentNode.host : element.parentNode : element;
    }
    let lastId = 1000000;
    function generateUniqueSelector() {
      return `lgcp-${lastId++}`;
    }
    function normalizeElement(element) {
      const selector = generateUniqueSelector();
      element.setAttribute(POSITION_ATTR_NAME, selector);
      element = // eslint-disable-next-line @lwc/lwc/no-document-query
      document.querySelector(`[${POSITION_ATTR_NAME}="${selector}"]`) || element;
      return element;
    }

    function isInsideOverlay(element, modalOnly) {
      if (!element) {
        return {
          isInside: false,
          overlay: null
        };
      }

      if (element.classList && (element.classList.contains('uiModal') || element.localName === 'lightning-dialog' || !modalOnly && element.classList.contains('uiPanel'))) {
        return {
          isInside: true,
          overlay: element
        };
      }

      if (!element.parentNode) {
        return {
          isInside: false,
          overlay: null
        };
      }

      return isInsideOverlay(isShadowRoot(element.parentNode) ? element.parentNode.host : element.parentNode, modalOnly);
    }

    function isInsideModal(element) {
      return isInsideOverlay(element, true);
    }
    function normalizePosition(element, nextIndex, target, alignWidth) {
      // Set element position to fixed
      // 1. element is inside overlay
      // or 2. When element isn't align with target's width, and target's parent has overflow-x:hidden setting.
      const isFixed = isInsideOverlay(element).isInside || !alignWidth && queryOverflowHiddenParent(target, WindowManager.window);
      element.style.position = isFixed ? 'fixed' : 'absolute';
      element.style.zIndex = nextIndex || 0;
      element.style.left = '-9999px'; // Avoid flicker
      // we always position from the left, but in RTL mode Omakase swaps left and right properties.
      // To always allow positioning from the left we set right to auto so position library can do its work.

      element.style.right = 'auto';
      element.style.top = '0px'; // Avoid flicker

      return element;
    }
    function requestAnimationFrameAsPromise() {
      return new Promise(resolve => {
        // eslint-disable-next-line @lwc/lwc/no-async-operation
        requestAnimationFrame(() => resolve());
      });
    }

    const Direction = {
      Center: 'center',
      Middle: 'middle',
      Right: 'right',
      Left: 'left',
      Bottom: 'bottom',
      Top: 'top',
      Default: 'default'
    };
    const VerticalMap = {
      top: Direction.Top,
      bottom: Direction.Bottom,
      center: Direction.Middle
    };
    const HorizontalMap = {
      left: Direction.Left,
      right: Direction.Right,
      center: Direction.Center
    };
    const FlipMap = {
      left: Direction.Right,
      right: Direction.Left,
      top: Direction.Bottom,
      bottom: Direction.Top,
      center: Direction.Center,
      default: Direction.Right
    };

    function getWindowSize() {
      return {
        width: WindowManager.window.innerWidth || document.body.clientWidth || 0,
        height: WindowManager.window.innerHeight || document.body.clientHeight || 0
      };
    }

    function normalizeDirection(direction, defaultValue) {
      return normalizeString(direction, {
        fallbackValue: defaultValue || Direction.Default,
        validValues: [Direction.Center, Direction.Right, Direction.Left, Direction.Bottom, Direction.Top, Direction.Middle, Direction.Default]
      });
    }
    function mapToHorizontal(value) {
      value = normalizeDirection(value, Direction.Left);
      return HorizontalMap[value];
    }
    function mapToVertical(value) {
      value = normalizeDirection(value, Direction.Left);
      return VerticalMap[value];
    }
    function flipDirection(value) {
      value = normalizeDirection(value, Direction.Left);
      return FlipMap[value];
    } // TODO: Remove, not currently in use.
    function checkFlipPossibility(element, target, leftAsBoundary) {
      const viewPort = getWindowSize();
      const elemRect = element.getBoundingClientRect();
      const referenceElemRect = target.getBoundingClientRect();
      const height = typeof elemRect.height !== 'undefined' ? elemRect.height : elemRect.bottom - elemRect.top;
      const width = typeof elemRect.width !== 'undefined' ? elemRect.width : elemRect.right - elemRect.left; // TODO: We'll need to revisit the leftAsBoundary config property. Either we'll need a better
      // name to cover the RTL language cases and maybe open up the possibility of bounding the
      // element to the target in both the horizontal and vertical directions.
      // The boundary shrinks the available area to the edge of the target rather than the viewport.

      let rightAsBoundary = false;

      if (document.dir === 'rtl') {
        rightAsBoundary = leftAsBoundary;
        leftAsBoundary = false;
      }

      const hasSpaceAbove = referenceElemRect.top >= height;
      const hasSpaceBelow = viewPort.height - referenceElemRect.bottom >= height; // Assuming left alignment is specified this tests if:
      // - there's room to accommodate the element with right alignment
      // - there's not enough room to accommodate the element with left alignment

      const shouldAlignToRight = referenceElemRect.right >= width && referenceElemRect.left + width > (rightAsBoundary ? referenceElemRect.right : viewPort.width); // Assuming right alignment is specified this tests if:
      // - there's room to accommodate the element with left alignment
      // - there's not enough room to accommodate the element with right alignment

      const shouldAlignToLeft = referenceElemRect.left + width <= viewPort.width && referenceElemRect.right - width < (leftAsBoundary ? referenceElemRect.left : 0); // Assuming center alignment, does the viewport have space to fit half of the element around
      // the target?

      const centerOverflow = {
        left: referenceElemRect.left - width * 0.5 < 0,
        right: referenceElemRect.right + width * 0.5 > viewPort.width,
        top: referenceElemRect.top - height * 0.5 < 0,
        bottom: referenceElemRect.bottom + height * 0.5 > viewPort.height
      };
      return {
        shouldAlignToLeft,
        shouldAlignToRight,
        hasSpaceAbove,
        hasSpaceBelow,
        centerOverflow
      };
    }

    class Transformer {
      constructor(pad, boxDirections, transformX, transformY) {
        this.pad = pad || 0;
        this.boxDirections = boxDirections || {
          left: true,
          right: true
        };

        this.transformX = transformX || function () {};

        this.transformY = transformY || function () {};
      }

      transform() {// no-op
      }

    }

    class TopTransformer extends Transformer {
      transform(targetBox, elementBox) {
        return {
          top: this.transformY(targetBox.top, targetBox, elementBox) + this.pad
        };
      }

    }

    class BottomTransFormer extends Transformer {
      transform(targetBox, elementBox) {
        return {
          top: this.transformY(targetBox.top, targetBox, elementBox) - elementBox.height - this.pad
        };
      }

    }

    class CenterTransformer extends Transformer {
      transform(targetBox, elementBox) {
        return {
          left: Math.floor(this.transformX(targetBox.left, targetBox, elementBox) - 0.5 * elementBox.width)
        };
      }

    }

    class MiddleTransformer extends Transformer {
      transform(targetBox, elementBox) {
        return {
          top: Math.floor(0.5 * (2 * targetBox.top + targetBox.height - elementBox.height))
        };
      }

    }

    class LeftTransformer extends Transformer {
      transform(targetBox, elementBox) {
        return {
          left: this.transformX(targetBox.left, targetBox, elementBox) + this.pad
        };
      }

    }

    class RightTransformer extends Transformer {
      transform(targetBox, elementBox) {
        return {
          left: this.transformX(targetBox.left, targetBox, elementBox) - elementBox.width - this.pad
        };
      }

    }

    class BelowTransformer extends Transformer {
      transform(targetBox, elementBox) {
        const top = targetBox.top + targetBox.height + this.pad;
        return elementBox.top < top ? {
          top
        } : {};
      }

    }

    const MIN_HEIGHT = 36; // Minimum Line Height

    const MIN_WIDTH = 36;

    class ShrinkingBoxTransformer extends Transformer {
      transform(targetBox, elementBox) {
        const retBox = {};

        if (this.boxDirections.top && elementBox.top < targetBox.top + this.pad) {
          retBox.top = targetBox.top + this.pad;
          retBox.height = Math.max(elementBox.height - (retBox.top - elementBox.top), MIN_HEIGHT);
        }

        if (this.boxDirections.left && elementBox.left < targetBox.left + this.pad) {
          retBox.left = targetBox.left + this.pad;
          retBox.width = Math.max(elementBox.width - (retBox.left - elementBox.left), MIN_WIDTH);
        }

        if (this.boxDirections.right && elementBox.left + elementBox.width > targetBox.left + targetBox.width - this.pad) {
          retBox.right = targetBox.left + targetBox.width - this.pad;
          retBox.width = Math.max(retBox.right - (retBox.left || elementBox.left), MIN_WIDTH);
        }

        if (this.boxDirections.bottom && elementBox.top + elementBox.height > targetBox.top + targetBox.height - this.pad) {
          retBox.bottom = targetBox.top + targetBox.height - this.pad;
          retBox.height = Math.max(retBox.bottom - (retBox.top || elementBox.top), MIN_HEIGHT);
        }

        return retBox;
      }

    }

    class BoundingBoxTransformer extends Transformer {
      transform(targetBox, elementBox) {
        const retBox = {};

        if (this.boxDirections.top && elementBox.top < targetBox.top + this.pad) {
          retBox.top = targetBox.top + this.pad;
        }

        if (this.boxDirections.left && elementBox.left < targetBox.left + this.pad) {
          retBox.left = targetBox.left + this.pad;
        }

        if (this.boxDirections.right && elementBox.left + elementBox.width > targetBox.left + targetBox.width - this.pad) {
          retBox.left = targetBox.left + targetBox.width - elementBox.width - this.pad;
        }

        if (this.boxDirections.bottom && elementBox.top + elementBox.height > targetBox.top + targetBox.height - this.pad) {
          retBox.top = targetBox.top + targetBox.height - elementBox.height - this.pad;
        }

        return retBox;
      }

    }

    class InverseBoundingBoxTransformer extends Transformer {
      transform(targetBox, elementBox) {
        const retBox = {};

        if (this.boxDirections.left && targetBox.left - this.pad < elementBox.left) {
          retBox.left = targetBox.left - this.pad;
        }

        if (this.boxDirections.right && elementBox.left + elementBox.width < targetBox.left + targetBox.width + this.pad) {
          retBox.left = targetBox.width + this.pad - elementBox.width + targetBox.left;
        }

        if (this.boxDirections.top && targetBox.top < elementBox.top + this.pad) {
          retBox.top = targetBox.top - this.pad;
        }

        if (this.boxDirections.bottom && elementBox.top + elementBox.height < targetBox.top + targetBox.height + this.pad) {
          retBox.top = targetBox.height + this.pad - elementBox.height + targetBox.top;
        }

        return retBox;
      }

    }

    const TransformFunctions = {
      center(input, targetBox) {
        return Math.floor(input + 0.5 * targetBox.width);
      },

      right(input, targetBox) {
        return input + targetBox.width;
      },

      left(input) {
        return input;
      },

      bottom(input, targetBox) {
        return input + targetBox.height;
      }

    };
    const Transformers = {
      top: TopTransformer,
      bottom: BottomTransFormer,
      center: CenterTransformer,
      middle: MiddleTransformer,
      left: LeftTransformer,
      right: RightTransformer,
      below: BelowTransformer,
      'bounding box': BoundingBoxTransformer,
      'shrinking box': ShrinkingBoxTransformer,
      'inverse bounding box': InverseBoundingBoxTransformer,
      default: Transformer
    };
    function toTransformFunctions(value) {
      return TransformFunctions[value] || TransformFunctions.left;
    }

    class TransformBuilder {
      type(value) {
        this._type = value;
        return this;
      }

      align(horizontal, vertical) {
        this._transformX = toTransformFunctions(horizontal);
        this._transformY = toTransformFunctions(vertical);
        return this;
      }

      pad(value) {
        this._pad = parseInt(value, 10);
        return this;
      }

      boxDirections(value) {
        this._boxDirections = value;
        return this;
      }

      build() {
        const AConstructor = Transformers[this._type] ? Transformers[this._type] : Transformers[Direction.Default];
        return new AConstructor(this._pad || 0, this._boxDirections || {}, this._transformX || toTransformFunctions(Direction.left), this._transformY || toTransformFunctions(Direction.left));
      }

    }

    class Constraint {
      constructor(type, config) {
        const {
          target,
          element,
          pad,
          boxDirections
        } = config;
        const {
          horizontal,
          vertical
        } = config.targetAlign;
        this._element = element;
        this._targetElement = target;
        this.destroyed = false;
        this._transformer = new TransformBuilder().type(type).align(horizontal, vertical).pad(pad).boxDirections(boxDirections).build();
      }

      detach() {
        this._disabled = true;
      }

      attach() {
        this._disabled = false;
      }

      computeDisplacement() {
        if (!this._disabled) {
          this._targetElement.refresh();

          this._element.refresh();

          this._pendingBox = this._transformer.transform(this._targetElement, this._element);
        }

        return this;
      }

      computePosition() {
        const el = this._element;

        if (!this._disabled) {
          Object.keys(this._pendingBox).forEach(key => {
            el.setDirection(key, this._pendingBox[key]);
          });
        }

        return this;
      }

      destroy() {
        this._element.release();

        this._targetElement.release();

        this._disabled = true;
        this.destroyed = true;
      }

    }

    class ElementProxy {
      constructor(el, id) {
        this.id = id;
        this.width = 0;
        this.height = 0;
        this.left = 0;
        this.top = 0;
        this.right = 0;
        this.bottom = 0;
        this._dirty = false;
        this._node = null;
        this._releaseCb = null;

        if (!el) {
          throw new Error('Element missing');
        } // W-3262919
        // for some reason I cannot figure out sometimes the
        // window, which clearly a window object, is not the window object
        // this will correct that. It might be related to locker


        if (WindowManager.isWindow(el)) {
          el = WindowManager.window;
        }

        this._node = el;
        this.setupObserver();
        this.refresh();
      }

      setupObserver() {
        // this check is because phantomjs does not support
        // mutation observers. The consqeuence here
        // is that any browser without mutation observers will
        // fail to update dimensions if they changwe after the proxy
        // is created and the proxy is not not refreshed
        if (WindowManager.MutationObserver && !this._node.isObserved) {
          // Use mutation observers to invalidate cache. It's magic!
          this._observer = new WindowManager.MutationObserver(this.refresh.bind(this)); // do not observe the window

          if (!WindowManager.isWindow(this._node)) {
            this._observer.observe(this._node, {
              attributes: true,
              childList: true,
              characterData: true,
              subtree: true
            });

            this._node.isObserved = true;
          }
        }
      }

      setReleaseCallback(cb, scope) {
        const scopeObj = scope || this;
        this._releaseCb = cb.bind(scopeObj);
      }

      checkNodeIsInDom() {
        // if underlying DOM node is gone,
        // this proxy should be released
        if (!isInDom(this._node)) {
          return false;
        }

        return true;
      }

      refresh() {
        const w = WindowManager.window;

        if (!this.isDirty()) {
          if (!this.checkNodeIsInDom()) {
            return this.release();
          }

          let box, x, scrollTop, scrollLeft;

          if (typeof w.pageYOffset !== 'undefined') {
            scrollTop = w.pageYOffset;
            scrollLeft = w.pageXOffset;
          } else {
            scrollTop = w.scrollY;
            scrollLeft = w.scrollX;
          }

          if (!WindowManager.isWindow(this._node)) {
            // force paint
            // eslint-disable-next-line no-unused-vars
            const offsetHeight = this._node.offsetHeight;
            box = this._node.getBoundingClientRect(); // not using integers causes weird rounding errors
            // eslint-disable-next-line guard-for-in

            for (x in box) {
              this[x] = Math.floor(box[x]);
            }

            this.top = Math.floor(this.top + scrollTop);
            this.bottom = Math.floor(this.top + box.height);
            this.left = Math.floor(this.left + scrollLeft);
            this.right = Math.floor(this.left + box.width);
          } else {
            box = {};
            this.width = WindowManager.documentElement.clientWidth;
            this.height = WindowManager.documentElement.clientHeight;
            this.left = scrollLeft;
            this.top = scrollTop;
            this.right = WindowManager.documentElement.clientWidth + scrollLeft;
            this.bottom = WindowManager.documentElement.clientHeight;
          }

          this._dirty = false;
        }

        return this._dirty;
      }

      getNode() {
        return this._node;
      }

      isDirty() {
        return this._dirty;
      }

      bake() {
        const w = WindowManager.window;

        const absPos = this._node.getBoundingClientRect();

        const style = w.getComputedStyle(this._node) || this._node.style;

        const hasPageOffset = typeof w.pageYOffset !== 'undefined';
        const scrollTop = hasPageOffset ? w.pageYOffset : w.scrollY;
        const scrollLeft = hasPageOffset ? w.pageXOffset : w.scrollX;
        const originalLeft = style.left.match(/auto|fixed/) ? '0' : parseInt(style.left.replace('px', ''), 10);
        const originalTop = style.top.match(/auto|fixed/) ? '0' : parseInt(style.top.replace('px', ''), 10);
        const leftDif = Math.round(this.left - (absPos.left + scrollLeft));
        const topDif = this.top - (absPos.top + scrollTop);
        this._node.style.left = `${originalLeft + leftDif}px`;
        this._node.style.top = `${originalTop + topDif}px`;

        if (this._restoreSize) {
          // Only store the first height/width which is the original height/width.
          if (this.originalHeight === undefined) {
            this.originalHeight = this._node.style.height;
          }

          if (this.originalWidth === undefined) {
            this.originalWidth = this._node.style.width;
          }

          this._node.style.width = `${this.width}px`;
          this._node.style.height = `${this.height}px`;
        }

        this._dirty = false;
      }

      setDirection(direction, val) {
        this[direction] = val;
        this._dirty = true; // if size is changed, should restore the original size.

        if (direction === 'height' || direction === 'width') {
          this._restoreSize = true;
        }
      }

      release() {
        if (this._restoreSize) {
          this._node.style.width = this.originalWidth;
          this._node.style.height = this.originalHeight;

          if (this._removeMinHeight) {
            this._node.style.minHeight = '';
          }
        }

        if (this._releaseCb) {
          this._releaseCb(this);
        } // Due to https://github.com/salesforce/lwc/pull/1423
        // require to call disconnect explicitly.


        if (this._observer) {
          this._observer.disconnect();

          this._observer = null;
        }
      }

      querySelectorAll(selector) {
        return this._node.querySelectorAll(selector);
      }

    }

    class ProxyCache {
      constructor() {
        this.proxyCache = {};
      }

      get count() {
        return Object.keys(this.proxyCache).length;
      }

      releaseOrphanProxies() {
        for (const proxy in this.proxyCache) {
          if (!this.proxyCache[proxy].el.checkNodeIsInDom()) {
            this.proxyCache[proxy].el.release();
          }
        }
      }

      bakeOff() {
        for (const proxy in this.proxyCache) {
          if (this.proxyCache[proxy].el.isDirty()) {
            this.proxyCache[proxy].el.bake();
          }
        }
      }

      getReferenceCount(proxy) {
        const id = proxy.id;

        if (!id || !this.proxyCache[id]) {
          return 0;
        }

        return this.proxyCache[id].refCount;
      }

      release(proxy) {
        const proxyInstance = this.proxyCache[proxy.id];

        if (proxyInstance) {
          --proxyInstance.refCount;
        }

        if (proxyInstance && proxyInstance.refCount <= 0) {
          delete this.proxyCache[proxy.id];
        }
      }

      reset() {
        this.proxyCache = {};
      }

      create(element) {
        let key = 'window';

        if (!WindowManager.isWindow(element)) {
          key = element ? element.getAttribute(POSITION_ATTR_NAME) : null; // 1 - Node.ELEMENT_NODE, 11 - Node.DOCUMENT_FRAGMENT_NODE

          assert(key && element.nodeType && (element.nodeType !== 1 || element.nodeType !== 11), `Element Proxy requires an element and has property ${POSITION_ATTR_NAME}`);
        }

        if (this.proxyCache[key]) {
          this.proxyCache[key].refCount++;
          return this.proxyCache[key].el;
        }

        const newProxy = new ElementProxy(element, key);
        newProxy.setReleaseCallback(release, newProxy);
        this.proxyCache[key] = {
          el: newProxy,
          refCount: 1
        }; // run GC

        timeout(0).then(() => {
          this.releaseOrphanProxies();
        });
        return this.proxyCache[key].el;
      }

    }

    lwc.registerDecorators(ProxyCache, {
      fields: ["proxyCache"]
    });

    const elementProxyCache = new ProxyCache();
    function bakeOff() {
      elementProxyCache.bakeOff();
    }
    function release(proxy) {
      return elementProxyCache.release(proxy);
    }
    function createProxy(element) {
      return elementProxyCache.create(element);
    }

    class RepositionQueue {
      constructor() {
        this.callbacks = [];
        this.repositionScheduled = false;
        this._constraints = [];
        this.timeoutId = 0;
        this.lastIndex = getZIndexBaseline();
        this.eventsBound = false;
      }

      get nextIndex() {
        return this.lastIndex++;
      }

      get constraints() {
        return this._constraints;
      }

      set constraints(value) {
        this._constraints = this._constraints.concat(value);
      }

      dispatchRepositionCallbacks() {
        while (this.callbacks.length > 0) {
          this.callbacks.shift()();
        }
      }

      add(callback) {
        if (typeof callback === 'function') {
          this.callbacks.push(callback);
          return true;
        }

        return false;
      }

      scheduleReposition(callback) {
        if (this.timeoutId === 0) {
          // eslint-disable-next-line @lwc/lwc/no-async-operation
          this.timeoutId = setTimeout(() => {
            this.reposition(callback);
          }, 10);
        }
      }

      reposition(callback) {
        // all the callbacks will be called
        if (typeof callback === 'function') {
          this.callbacks.push(callback);
        } // this is for throttling


        clearTimeout(this.timeoutId);
        this.timeoutId = 0; // this semaphore is to make sure
        // if reposition is called twice within one frame
        // we only run this once

        if (!this.repositionScheduled) {
          // eslint-disable-next-line @lwc/lwc/no-async-operation
          requestAnimationFrame(() => {
            this.repositionScheduled = false; // this must be executed in order or constraints
            // will behave oddly

            this._constraints = this._constraints.filter(constraint => {
              if (!constraint.destroyed) {
                constraint.computeDisplacement().computePosition();
                return true;
              }

              return false;
            });
            bakeOff();
            this.dispatchRepositionCallbacks();
          });
          this.repositionScheduled = true;
        }
      }

      get repositioning() {
        if (!this._reposition) {
          this._reposition = this.scheduleReposition.bind(this);
        }

        return this._reposition;
      }

      bindEvents() {
        if (!this.eventsBound) {
          window.addEventListener('resize', this.repositioning);
          window.addEventListener('scroll', this.repositioning);
          this.eventsBound = true;
        }
      }

      detachEvents() {
        window.removeEventListener('resize', this.repositioning);
        window.removeEventListener('scroll', this.repositioning);
        this.eventsBound = false;
      }

      rebase(index) {
        if (this.lastIndex <= index) {
          this.lastIndex = index + 1;
        }
      }

    }

    lwc.registerDecorators(RepositionQueue, {
      fields: ["callbacks", "repositionScheduled", "_constraints", "timeoutId", "lastIndex", "eventsBound"]
    });

    const positionQueue = new RepositionQueue();
    function scheduleReposition(callback) {
      positionQueue.scheduleReposition(callback);
    }
    function bindEvents() {
      positionQueue.bindEvents();
    }
    function addConstraints(list) {
      positionQueue.constraints = list;
    }
    function reposition(callback) {
      positionQueue.reposition(callback);
    }
    function nextIndex() {
      return positionQueue.nextIndex;
    }
    function rebaseIndex(index) {
      return positionQueue.rebase(index);
    }

    class Relationship {
      constructor(config, constraintList, scrollableParent, observer) {
        this.config = config;
        this.constraintList = constraintList;
        this.scrollableParent = scrollableParent;
        this.observer = observer;
      }

      disable() {
        this.constraintList.forEach(constraintToDisable => {
          constraintToDisable.detach();
        });
      }

      enable() {
        this.constraintList.forEach(constraintToEnable => {
          constraintToEnable.attach();
        });
      }

      destroy() {
        if (this.config.removeListeners) {
          this.config.removeListeners();
          this.config.removeListeners = undefined;
        }

        while (this.constraintList.length > 0) {
          this.constraintList.pop().destroy();
        } // Clean up node appended to body of dom


        if (this.config.appendToBody && this.config.element) {
          // eslint-disable-next-line @lwc/lwc/no-document-query
          const nodeToRemove = document.querySelector(`[${POSITION_ATTR_NAME}="${this.config.element.getAttribute(POSITION_ATTR_NAME)}"]`);

          if (nodeToRemove) {
            nodeToRemove.parentNode.removeChild(nodeToRemove);
          }
        } // Due to https://github.com/salesforce/lwc/pull/1423
        // require to call disconnect explicitly.


        if (this.observer) {
          this.observer.disconnect();
          this.observer = null;
        }
      }

      reposition() {
        return new Promise(resolve => {
          reposition(() => {
            resolve();
          });
        });
      }

    }

    const DEFAULT_MIN_HEIGHT = '1.875rem';

    function setupObserver(config, scrollableParent) {
      const observedElement = config.element;
      let observer = null;

      if (WindowManager.MutationObserver && !observedElement.isObserved) {
        observer = new WindowManager.MutationObserver(() => {});
        observer.observe(observedElement, {
          attributes: true,
          subtree: true,
          childList: true
        });
        observedElement.isObserved = true;
      }

      if (scrollableParent) {
        scrollableParent.addEventListener('scroll', scheduleReposition);

        config.removeListeners = () => {
          scrollableParent.removeEventListener('scroll', scheduleReposition);
        };
      }

      return observer;
    }

    function validateConfig(config) {
      assert(config.element && isDomNode(config.element), 'Element is undefined or missing, or not a Dom Node');
      assert(config.target && (WindowManager.isWindow(config.target) || isDomNode(config.target)), 'Target is undefined or missing');
    }

    function createRelationship(config) {
      bindEvents();

      if (config.alignWidth && config.element.style.position === 'fixed') {
        config.element.style.width = config.target.getBoundingClientRect().width + 'px';
      }

      const constraintList = [];
      const scrollableParent = getScrollableParent(getPositionTarget(config.target), WindowManager.window); // This observer and the test for scrolling children
      // is so that if a panel contains a scroll we do not
      // proxy the events to the "parent"  (actually the target's parent)

      const observer = setupObserver(config, scrollableParent);

      if (config.appendToBody) {
        document.body.appendChild(config.element);
      }

      config.element = createProxy(config.element);
      config.target = createProxy(config.target); // Add horizontal constraint.

      const horizontalConfig = Object.assign({}, config);

      if (horizontalConfig.padLeft !== undefined) {
        horizontalConfig.pad = horizontalConfig.padLeft;
      } // Add vertical constraint.


      const verticalConfig = Object.assign({}, config);

      if (verticalConfig.padTop !== undefined) {
        verticalConfig.pad = verticalConfig.padTop;
      }

      constraintList.push(new Constraint(mapToHorizontal(config.align.horizontal), horizontalConfig));
      constraintList.push(new Constraint(mapToVertical(config.align.vertical), verticalConfig));
      const autoShrink = config.autoShrink.height || config.autoShrink.width;

      if (config.scrollableParentBound && scrollableParent) {
        const parent = normalizeElement(scrollableParent);
        const boxConfig = {
          element: config.element,
          enabled: config.enabled,
          target: createProxy(parent),
          align: {},
          targetAlign: {},
          pad: 3,
          boxDirections: {
            top: true,
            bottom: true,
            left: true,
            right: true
          }
        };

        if (autoShrink) {
          const style = boxConfig.element.getNode().style;

          if (!style.minHeight) {
            style.minHeight = config.minHeight;
            boxConfig.element._removeMinHeight = true;
          }

          boxConfig.boxDirections = {
            top: !!config.autoShrink.height,
            bottom: !!config.autoShrink.height,
            left: !!config.autoShrink.width,
            right: !!config.autoShrink.width
          };
          constraintList.push(new Constraint('shrinking box', boxConfig));
        } else {
          constraintList.push(new Constraint('bounding box', boxConfig));
        }
      }

      if (config.keepInViewport) {
        constraintList.push(new Constraint('bounding box', {
          element: config.element,
          enabled: config.enabled,
          target: createProxy(window),
          align: {},
          targetAlign: {},
          pad: 3,
          boxDirections: {
            top: true,
            bottom: true,
            left: true,
            right: true
          }
        }));
      }

      addConstraints(constraintList);
      reposition();
      return new Relationship(config, constraintList, scrollableParent, observer);
    }

    function isAutoFlipHorizontal(config) {
      return config.autoFlip || config.autoFlipHorizontal;
    }

    function isAutoFlipVertical(config) {
      return config.autoFlip || config.autoFlipVertical;
    }

    function normalizeAlignments(config, flipConfig) {
      const align = {
        horizontal: config.align.horizontal,
        vertical: config.align.vertical
      };
      const targetAlign = {
        horizontal: config.targetAlign.horizontal,
        vertical: config.targetAlign.vertical
      }; // Horizontal alignments flip for RTL languages.

      if (document.dir === 'rtl') {
        align.horizontal = flipDirection(align.horizontal);
        targetAlign.horizontal = flipDirection(targetAlign.horizontal);
      } // When using the autoFlip flags with center alignment, we change the element alignment to fit
      // within the viewport when it's detected that it overflows the edge of the viewport.


      let vFlip = false;

      if (isAutoFlipVertical(config)) {
        if (align.vertical === Direction.Bottom) {
          vFlip = !flipConfig.hasSpaceAbove && flipConfig.hasSpaceBelow;
        } else if (align.vertical === Direction.Top) {
          vFlip = flipConfig.hasSpaceAbove && !flipConfig.hasSpaceBelow;
        } else if (align.vertical === Direction.Center) {
          if (flipConfig.centerOverflow.top && !flipConfig.centerOverflow.bottom) {
            align.vertical = targetAlign.vertical = Direction.Top;
          } else if (flipConfig.centerOverflow.bottom && !flipConfig.centerOverflow.top) {
            align.vertical = targetAlign.vertical = Direction.Bottom;
          }
        }
      }

      let hFlip = false;

      if (isAutoFlipHorizontal(config)) {
        if (align.horizontal === Direction.Left) {
          hFlip = flipConfig.shouldAlignToRight;
        } else if (align.horizontal === Direction.Right) {
          hFlip = flipConfig.shouldAlignToLeft;
        } else if (align.horizontal === Direction.Center) {
          if (flipConfig.centerOverflow.left && !flipConfig.centerOverflow.right) {
            align.horizontal = targetAlign.horizontal = Direction.Left;
          } else if (flipConfig.centerOverflow.right && !flipConfig.centerOverflow.left) {
            align.horizontal = targetAlign.horizontal = Direction.Right;
          }
        }
      }

      return {
        align: {
          horizontal: hFlip ? flipDirection(align.horizontal) : normalizeDirection(align.horizontal, Direction.Left),
          vertical: vFlip ? flipDirection(align.vertical) : normalizeDirection(align.vertical, Direction.Top)
        },
        targetAlign: {
          horizontal: hFlip ? flipDirection(targetAlign.horizontal) : normalizeDirection(targetAlign.horizontal, Direction.Left),
          vertical: vFlip ? flipDirection(targetAlign.vertical) : normalizeDirection(targetAlign.vertical, Direction.Bottom)
        }
      };
    }

    function normalizeConfig(config) {
      config.align = config.align || {};
      config.targetAlign = config.targetAlign || {};
      const flipConfig = checkFlipPossibility(config.element, config.target, config.leftAsBoundary);
      const {
        align,
        targetAlign
      } = normalizeAlignments(config, flipConfig); // When inside modal, element may expand out of the viewport and be cut off.
      // So if inside modal, and don't have enough space above or below, will add bounding box rule.

      if (config.isInsideModal && !flipConfig.hasSpaceAbove && !flipConfig.hasSpaceBelow) {
        config.scrollableParentBound = true;
      }

      return {
        target: config.target,
        element: config.element,
        align,
        targetAlign,
        alignWidth: config.alignWidth,
        scrollableParentBound: config.scrollableParentBound,
        keepInViewport: config.keepInViewport,
        pad: config.pad,
        padTop: config.padTop,
        padLeft: config.padLeft,
        autoShrink: {
          height: config.autoShrink || config.autoShrinkHeight,
          width: config.autoShrink || config.autoShrinkWidth
        },
        minHeight: config.minHeight || DEFAULT_MIN_HEIGHT
      };
    }

    function toElement(root, target) {
      if (target && typeof target === 'string') {
        return root.querySelector(target);
      } else if (target && typeof target === 'function') {
        return target();
      }

      return target;
    }

    function startPositioning(root, config) {
      assert(root, 'Root is undefined or missing');
      assert(config, 'Config is undefined or missing');
      const node = normalizeElement(root);
      const target = toElement(node, config.target);
      const element = toElement(node, config.element); // when target/element is selector, there is chance, dom isn't present anymore.

      if (!target || !element) {
        return null;
      }

      config.target = normalizeElement(target);
      config.element = normalizeElement(element);
      const result = isInsideModal(config.element);
      config.isInsideModal = result.isInside; // stackManager will increase the zIndex too.
      // if detect inside modal, read modal zindex and rebase to it.

      if (config.isInsideModal && result.overlay) {
        const index = parseInt(result.overlay.style.zIndex, 10);
        rebaseIndex(index);
      } // Also should check if target inside modal too.


      const targetResult = isInsideModal(config.target);
      config.isInsideModal = targetResult.isInside; // if detect inside modal, read modal zindex and rebase to it.

      if (config.isInsideModal && targetResult.overlay) {
        const index = parseInt(targetResult.overlay.style.zIndex, 10);
        rebaseIndex(index);
      } // Element absolute / fixed must be set prior to getBoundingClientRect call or
      // the scrollable parent (usually due to uiModal/uiPanel) will push the page down.


      config.element = normalizePosition(config.element, nextIndex(), config.target, config.alignWidth);
      validateConfig(config);
      return createRelationship(normalizeConfig(config));
    }
    function stopPositioning(relationship) {
      if (relationship) {
        relationship.destroy();
      }
    }
    class AutoPosition {
      constructor(root) {
        this._autoPositionUpdater = null;
        this._root = root;
      }

      start(config) {
        return requestAnimationFrameAsPromise().then(() => {
          let promise = Promise.resolve();

          if (!this._autoPositionUpdater) {
            this._autoPositionUpdater = startPositioning(this._root, config);
          } else {
            promise = promise.then(() => {
              return this._autoPositionUpdater.reposition();
            });
          }

          return promise.then(() => {
            return this._autoPositionUpdater;
          });
        });
      }

      stop() {
        if (this._autoPositionUpdater) {
          stopPositioning(this._autoPositionUpdater);
          this._autoPositionUpdater = null;
        }

        return Promise.resolve();
      }

    }

    lwc.registerDecorators(AutoPosition, {
      fields: ["_autoPositionUpdater"]
    });

    function tmpl$3($api, $cmp, $slotset, $ctx) {
      const {
        b: api_bind,
        h: api_element
      } = $api;
      const {
        _m0
      } = $ctx;
      return [api_element("div", {
        classMap: {
          "slds-popover__body": true
        },
        context: {
          lwc: {
            dom: "manual"
          }
        },
        key: 0,
        on: {
          "mouseleave": _m0 || ($ctx._m0 = api_bind($cmp.handleMouseLeave))
        }
      }, [])];
    }

    var _tmpl$4 = lwc.registerTemplate(tmpl$3);
    tmpl$3.stylesheets = [];
    tmpl$3.stylesheetTokens = {
      hostAttribute: "lightning-primitiveBubble_primitiveBubble-host",
      shadowAttribute: "lightning-primitiveBubble_primitiveBubble"
    };

    const DEFAULT_ALIGN = {
      horizontal: 'left',
      vertical: 'bottom'
    };

    class LightningPrimitiveBubble extends lwc.LightningElement {
      constructor(...args) {
        super(...args);
        this.state = {
          visible: false,
          contentId: ''
        };
        this.divElement = void 0;
      }

      get contentId() {
        return this.state.contentId;
      }

      set contentId(value) {
        this.state.contentId = value;

        if (this.state.inDOM) {
          this.divEl.setAttribute('id', this.state.contentId);
        }
      }

      connectedCallback() {
        this.updateClassList();
        this.state.inDOM = true;
      }

      disconnectedCallback() {
        this.state.inDOM = false;
      }

      renderedCallback() {
        // set content manually once rendered
        // - this is required to avoid the content update being in the wrong 'tick'
        this.setContentManually();
        this.setIdManually();
      }

      set content(value) {
        this.state.content = value;

        if (this.state.inDOM) {
          this.setContentManually();
        }
      }

      get content() {
        return this.state.content || '';
      }

      get align() {
        return this.state.align || DEFAULT_ALIGN;
      }

      set align(value) {
        this.state.align = value;
        this.updateClassList();
      }

      get visible() {
        return this.state.visible;
      }

      set visible(value) {
        this.state.visible = value;
        this.updateClassList();
      }

      setIdManually() {
        this.divElement = this.divElement ? this.divElement : this.template.querySelector('div');
        this.divElement.setAttribute('id', this.state.contentId);
      } // manually set the content value


      setContentManually() {
        /* manipulate DOM directly */
        this.template.querySelector('.slds-popover__body').textContent = this.state.content;
      } // compute class value for this bubble


      updateClassList() {
        const classes = classSet('slds-popover').add('slds-popover_tooltip'); // show or hide bubble

        classes.add({
          'slds-rise-from-ground': this.visible,
          'slds-fall-into-ground': !this.visible
        }); // apply the proper nubbin CSS class

        const {
          horizontal,
          vertical
        } = this.align;
        classes.add({
          'slds-nubbin_top-left': horizontal === 'left' && vertical === 'top',
          'slds-nubbin_top-right': horizontal === 'right' && vertical === 'top',
          'slds-nubbin_bottom-left': horizontal === 'left' && vertical === 'bottom',
          'slds-nubbin_bottom-right': horizontal === 'right' && vertical === 'bottom',
          'slds-nubbin_bottom': horizontal === 'center' && vertical === 'bottom',
          'slds-nubbin_top': horizontal === 'center' && vertical === 'top',
          'slds-nubbin_left': horizontal === 'left' && vertical === 'center',
          'slds-nubbin_right': horizontal === 'right' && vertical === 'center'
        });
        classListMutation(this.classList, classes);
      }

      handleMouseLeave() {
        this.visible = false;
      }

    }

    lwc.registerDecorators(LightningPrimitiveBubble, {
      publicProps: {
        contentId: {
          config: 3
        },
        content: {
          config: 3
        },
        align: {
          config: 3
        },
        visible: {
          config: 3
        }
      },
      track: {
        state: 1
      },
      fields: ["divElement"]
    });

    var LightningPrimitiveBubble$1 = lwc.registerComponent(LightningPrimitiveBubble, {
      tmpl: _tmpl$4
    });

    function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? Object(arguments[i]) : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty$1(target, key, source[key]); }); } return target; }

    function _defineProperty$1(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
    const BUBBLE_ID = `salesforce-lightning-tooltip-bubble_${guid()}`;

    function isResizeObserverSupported() {
      return window.ResizeObserver != null;
    }

    function buildResizeObserver(callback) {
      if (isResizeObserverSupported()) {
        return new ResizeObserver(callback);
      }

      return {
        observe() {},

        unobserve() {}

      };
    }
    /**
     * Shared instance of a primitive bubble used as a tooltip by most components. This was originally
     * defined in the helptext component which is where the minWidth style came from.
     * TODO: We may want to revisit the minWidth style with the PO and/or UX.
     */


    let CACHED_BUBBLE_ELEMENT;

    function getCachedBubbleElement() {
      if (!CACHED_BUBBLE_ELEMENT) {
        CACHED_BUBBLE_ELEMENT = lwc.createElement('lightning-primitive-bubble', {
          is: LightningPrimitiveBubble$1
        });
        CACHED_BUBBLE_ELEMENT.contentId = BUBBLE_ID;
        CACHED_BUBBLE_ELEMENT.style.position = 'absolute';
        CACHED_BUBBLE_ELEMENT.style.minWidth = '75px'; // hide bubble element on create

        CACHED_BUBBLE_ELEMENT.classList.add('slds-hide');
        CACHED_BUBBLE_ELEMENT.addEventListener('transitionend', () => {
          // W-7201022 https://gus.lightning.force.com/lightning/r/ADM_Work__c/a07B00000079kNjIAI/view
          // The tooltip uses absolute positioning and visibility gets set to hidden to
          // hide it from view which means it's still part of the document layout.
          // If we don't hide the bubble it could stay on the page and accidentally scroll pages
          // in the console app after a tab switch, especially when the tab content lengths differ.
          if (!CACHED_BUBBLE_ELEMENT.visible) {
            CACHED_BUBBLE_ELEMENT.classList.add('slds-hide');
          }
        });
      }

      return CACHED_BUBBLE_ELEMENT;
    }

    const ARIA_DESCRIBEDBY = 'aria-describedby';
    /**
     * Used as a position offset to compensate for the nubbin. The dimensions of the nubbin are not
     * included in the position library bounding box calculations. This is the size in pixels of the
     * nubbin.
     * TODO: We may want to measure this instead in cases it changes.
     */

    const NUBBIN_SIZE = 16;
    /**
     * Used in the calculation that moves the tooltip to a location that places the nubbin at the
     * center of the target element. This is the nubbin offset from the edge of the bubble in pixels
     * when using slds-nubbin_bottom-left or slds-nubbin_bottom-right.
     * TODO: We may want to measure this instead in case it changes.
     */

    const NUBBIN_OFFSET = 24;
    /**
     * Known tooltip types:
     * - info: used in cases where target already has click handlers such as button-icon
     * - toggle: used in cases where target only shows a tooltip such as helptext
     */

    const TooltipType = {
      Info: 'info',
      Toggle: 'toggle'
    };
    /**
     * Allows us to attach a tooltip to components. Typical usage is as follows:
     * - Create an instance of Tooltip
     * - Call Tooltip.initialize() to add the appropriate listeners to the element that needs a tooltip
     * See buttonIcon and buttonMenu for example usage.
     */

    class Tooltip {
      /**
       * A shared instance of primitiveBubble is used when an element is not specified in the config
       * object.
       * @param {string} value the content of the tooltip
       * @param {object} config specifies the root component, target element of the tooltip
       */
      constructor(value, config) {
        this._autoPosition = null;
        this._disabled = true;
        this._initialized = false;
        this._visible = false;
        this._config = {};
        assert(config.target, 'target for tooltip is undefined or missing');
        this.value = value;
        this._root = config.root;
        this._target = config.target;
        this._config = _objectSpread$1({}, config);
        this._config.align = config.align || {};
        this._config.targetAlign = config.targetAlign || {};
        this._type = normalizeString(config.type, {
          fallbackValue: TooltipType.Info,
          validValues: Object.values(TooltipType)
        }); // If a tooltip element is not given, fall back on the globally shared instance.

        this._element = config.element;

        if (!this._element) {
          this._element = getCachedBubbleElement;
          const bubbleElement = getCachedBubbleElement();

          if (bubbleElement.parentNode === null) {
            document.body.appendChild(bubbleElement);
          }
        }

        this.handleDocumentTouch = this.handleDocumentTouch.bind(this);
      }
      /**
       * Disables the tooltip.
       */


      detach() {
        this._disabled = true;
      }
      /**
       * Enables the tooltip.
       */


      attach() {
        this._disabled = false;
      }
      /**
       * Adds the appropriate event listeners to the target element to make the tooltip appear. Also
       * links the tooltip and target element via the aria-describedby attribute for screen readers.
       */


      initialize() {
        const target = this._target();

        if (!this._initialized && target) {
          switch (this._type) {
            case TooltipType.Toggle:
              this.addToggleListeners();
              break;

            case TooltipType.Info:
            default:
              this.addInfoListeners();
              break;
          }

          const ariaDescribedBy = normalizeAriaAttribute([target.getAttribute(ARIA_DESCRIBEDBY), this._element().contentId]);
          target.setAttribute(ARIA_DESCRIBEDBY, ariaDescribedBy);
          this._initialized = true;
        }
      }

      addInfoListeners() {
        const target = this._target();

        if (!this._initialized && target) {
          ['mouseenter', 'focus'].forEach(name => target.addEventListener(name, () => this.show())); // Unlike the tooltip in Aura, we want clicks and keys to dismiss the tooltip.

          ['mouseleave', 'blur', 'click', 'keydown'].forEach(name => target.addEventListener(name, event => this.hideIfNotSelfCover(event)));
        }
      }

      hideIfNotSelfCover(event) {
        if (event.type === 'mouseleave' && event.clientX && event.clientY) {
          // In any chance, if mouseleave is caused by tooltip itself, it would means
          // tooltip cover the target which mostly caused by dynamic resize of tooltip by CSS or JS.
          try {
            const elementMouseIsOver = document.elementFromPoint ? document.elementFromPoint(event.clientX, event.clientY) : null;

            if (elementMouseIsOver === this._element()) {
              if (!isResizeObserverSupported()) {
                this.startPositioning();
              }

              return;
            }
          } catch (ex) {// Jest Throw Exception
          }
        }

        this.hide();
      }

      handleDocumentTouch() {
        if (this._visible) {
          this.hide();
        }
      }

      addToggleListeners() {
        const target = this._target();

        if (!this._initialized && target) {
          target.addEventListener('touchstart', e => {
            e.stopPropagation();
            this.toggle();
          });
          ['mouseenter', 'focus'].forEach(name => target.addEventListener(name, () => this.show()));
          ['mouseleave', 'blur'].forEach(name => target.addEventListener(name, event => this.hideIfNotSelfCover(event)));
        }
      }

      get resizeObserver() {
        if (!this._resizeObserver) {
          this._resizeObserver = buildResizeObserver(() => {
            if (this._visible && this._autoPosition) {
              this.startPositioning();
            }
          });
        }

        return this._resizeObserver;
      }

      show() {
        if (this._disabled) {
          return;
        }

        this._visible = true;

        const tooltip = this._element();
        /* We only change the visibility of the cached bubble element here,
           for custom bubble elements, we expect them to react to `visible`
           property change */


        if (CACHED_BUBBLE_ELEMENT) {
          // Show cached bubble element
          CACHED_BUBBLE_ELEMENT.classList.remove('slds-hide');
        }

        tooltip.content = this._value;
        this.startPositioning();
        document.addEventListener('touchstart', this.handleDocumentTouch);
        this.resizeObserver.observe(tooltip);
      }

      hide() {
        this._visible = false;

        const tooltip = this._element();

        tooltip.visible = this._visible;
        this.stopPositioning();
        document.removeEventListener('touchstart', this.handleDocumentTouch);
        this.resizeObserver.unobserve(tooltip);
      }

      toggle() {
        if (this._visible) {
          this.hide();
        } else {
          this.show();
        }
      }

      get value() {
        return this._value;
      }

      set value(value) {
        this._value = value;
        this._disabled = !value;
      }

      get initialized() {
        return this._initialized;
      }

      get visible() {
        return this._visible;
      }

      startPositioning() {
        if (!this._autoPosition) {
          this._autoPosition = new AutoPosition(this._root);
        } // The lightning-helptext component was originally left aligned.


        const align = {
          horizontal: this._config.align.horizontal || Direction.Left,
          vertical: this._config.align.vertical || Direction.Bottom
        };
        const targetAlign = {
          horizontal: this._config.targetAlign.horizontal || Direction.Left,
          vertical: this._config.targetAlign.vertical || Direction.Top
        }; // Pads the tooltip so its nubbin is at the center of the target element.

        const targetBox = this._target().getBoundingClientRect();

        const padLeft = targetBox.width * 0.5 - NUBBIN_OFFSET;

        this._autoPosition.start({
          target: this._target,
          element: this._element,
          align,
          targetAlign,
          autoFlip: true,
          padTop: NUBBIN_SIZE,
          padLeft
        }).then(autoPositionUpdater => {
          // The calculation above may have flipped the alignment of the tooltip. When the
          // tooltip changes alignment we need to update the nubbin class to have it draw in
          // the appropriate place.
          if (autoPositionUpdater) {
            const tooltip = this._element();

            tooltip.align = autoPositionUpdater.config.align;
            tooltip.visible = this._visible;
          }
        });
      }

      stopPositioning() {
        if (this._autoPosition) {
          this._autoPosition.stop();
        }
      }

    }

    lwc.registerDecorators(Tooltip, {
      fields: ["_autoPosition", "_disabled", "_initialized", "_visible", "_config"]
    });

    const i18n = {
      buttonAlternativeText: labelButtonAlternativeText
    };
    const DEFAULT_ICON_NAME = 'utility:info';
    const DEFAULT_ICON_VARIANT = 'bare';
    /**
     * An icon with a text popover used for tooltips.
     */

    class LightningHelptext extends lwc.LightningElement {
      constructor(...args) {
        super(...args);
        this.state = {
          iconName: DEFAULT_ICON_NAME,
          iconVariant: DEFAULT_ICON_VARIANT
        };
        this._tooltip = null;
      }

      /**
       * Text to be shown in the popover.
       * @type {string}
       * @param {string} value - The plain text string for the tooltip
       */
      set content(value) {
        if (this._tooltip) {
          this._tooltip.value = value;
        } else if (value) {
          // Note that because the tooltip target is a child element it may not be present in the
          // dom during initial rendering.
          this._tooltip = new Tooltip(value, {
            root: this,
            target: () => this.template.querySelector('button'),
            type: TooltipType.Toggle
          });

          this._tooltip.initialize();
        }
      }

      get content() {
        return this._tooltip ? this._tooltip.value : undefined;
      }
      /**
       * The Lightning Design System name of the icon used as the visible element.
       * Names are written in the format 'utility:info' where 'utility' is the category,
       * and 'info' is the specific icon to be displayed.
       * The default is 'utility:info'.
       * @type {string}
       * @param {string} value the icon name to use
       * @default utility:info
       */


      set iconName(value) {
        this.state.iconName = value;
      }

      get iconName() {
        if (isValidName(this.state.iconName)) {
          return this.state.iconName;
        }

        return DEFAULT_ICON_NAME;
      }
      /**
       * Changes the appearance of the icon.
       * Accepted variants include inverse, warning, error.
       * @type {string}
       * @param {string} value the icon variant to use
       * @default bare
       */


      set iconVariant(value) {
        this.state.iconVariant = value;
      }

      get iconVariant() {
        // NOTE: Leaving a note here because I just wasted a bunch of time
        // investigating why both 'bare' and 'inverse' are supported in
        // lightning-primitive-icon. lightning-icon also has a deprecated
        // 'bare', but that one is synonymous to 'inverse'. This 'bare' means
        // that no classes should be applied. So this component needs to
        // support both 'bare' and 'inverse' while lightning-icon only needs to
        // support 'inverse'.
        return normalizeString(this.state.iconVariant, {
          fallbackValue: DEFAULT_ICON_VARIANT,
          validValues: ['bare', 'error', 'inverse', 'warning']
        });
      }

      disconnectedCallback() {
        // W-6441609 helptext maybe destroyed first, and tooltip won't receive events to hide.
        if (this._tooltip && !this._tooltip.initialized) {
          this._tooltip.hide();
        }

        this._tooltip = null;
      }

      renderedCallback() {
        if (this._tooltip && !this._tooltip.initialized) {
          this._tooltip.initialize();
        }
      }

      get i18n() {
        return i18n;
      } // compute SVG CSS classes to apply to the icon


      get computedSvgClass() {
        const classes = classSet('slds-button__icon');

        switch (this.iconVariant) {
          case 'error':
            classes.add('slds-icon-text-error');
            break;

          case 'warning':
            classes.add('slds-icon-text-warning');
            break;

          case 'inverse':
          case 'bare':
            break;

          default:
            // if custom icon is set, we don't want to set
            // the text-default class
            classes.add('slds-icon-text-default');
        }

        return classes.toString();
      }

    }

    lwc.registerDecorators(LightningHelptext, {
      publicProps: {
        content: {
          config: 3
        },
        iconName: {
          config: 3
        },
        iconVariant: {
          config: 3
        }
      },
      track: {
        state: 1
      },
      fields: ["_tooltip"]
    });

    var _lightningHelptext = lwc.registerComponent(LightningHelptext, {
      tmpl: _tmpl$3
    });

    function stylesheet$3(hostSelector, shadowSelector, nativeShadow) {
      return ".slds-inline-logo" + shadowSelector + " {height: 1rem;margin-top: 1rem;margin-bottom: 1rem;}\n";
    }
    var _implicitStylesheets$3 = [stylesheet$3];

    function tmpl$4($api, $cmp, $slotset, $ctx) {
      const {
        c: api_custom_element,
        d: api_dynamic,
        h: api_element
      } = $api;
      return [api_custom_element("lightning-primitive-icon", _lightningPrimitiveIcon, {
        props: {
          "iconName": $cmp.state.iconName,
          "size": $cmp.size,
          "variant": $cmp.variant,
          "src": $cmp.state.src
        },
        key: 0
      }, []), $cmp.alternativeText ? api_element("span", {
        classMap: {
          "slds-assistive-text": true
        },
        key: 1
      }, [api_dynamic($cmp.alternativeText)]) : null];
    }

    var _tmpl$5 = lwc.registerTemplate(tmpl$4);
    tmpl$4.stylesheets = [];
    tmpl$4.stylesheetTokens = {
      hostAttribute: "lightning-icon_icon-host",
      shadowAttribute: "lightning-icon_icon"
    };

    /**
     * Represents a visual element that provides context and enhances usability.
     */

    class LightningIcon extends lwc.LightningElement {
      constructor(...args) {
        super(...args);
        this.state = {};
        this.alternativeText = void 0;
      }

      /**
       * A uri path to a custom svg sprite, including the name of the resouce,
       * for example: /assets/icons/standard-sprite/svg/test.svg#icon-heart
       * @type {string}
       */
      get src() {
        return this.privateSrc;
      }

      set src(value) {
        this.privateSrc = value; // if value is not present, then we set the state back
        // to the original iconName that was passed
        // this might happen if the user sets a custom icon, then
        // decides to revert back to SLDS by removing the src attribute

        if (!value) {
          this.state.iconName = this.iconName;
          this.classList.remove('slds-icon-standard-default');
        } // if isIE11 and the src is set
        // we'd like to show the 'standard:default' icon instead
        // for performance reasons.


        if (value && isIE11) {
          this.setDefault();
          return;
        }

        this.state.src = value;
      }
      /**
       * The Lightning Design System name of the icon.
       * Names are written in the format 'utility:down' where 'utility' is the category,
       * and 'down' is the specific icon to be displayed.
       * @type {string}
       * @required
       */


      get iconName() {
        return this.privateIconName;
      }

      set iconName(value) {
        this.privateIconName = value; // if src is set, we don't need to validate
        // iconName

        if (this.src) {
          return;
        }

        if (isValidName(value)) {
          const isAction = getCategory(value) === 'action'; // update classlist only if new iconName is different than state.iconName
          // otherwise classListMutation receives class:true and class: false and removes slds class

          if (value !== this.state.iconName) {
            classListMutation(this.classList, {
              'slds-icon_container_circle': isAction,
              [computeSldsClass(value)]: true,
              [computeSldsClass(this.state.iconName)]: false
            });
          }

          this.state.iconName = value;
        } else {
          console.warn(`<lightning-icon> Invalid icon name ${value}`); // eslint-disable-line no-console
          // Invalid icon names should render a blank icon. Remove any
          // classes that might have been previously added.

          classListMutation(this.classList, {
            'slds-icon_container_circle': false,
            [computeSldsClass(this.state.iconName)]: false
          });
          this.state.iconName = undefined;
        }
      }
      /**
       * The size of the icon. Options include xx-small, x-small, small, medium, or large.
       * The default is medium.
       * @type {string}
       * @default medium
       */


      get size() {
        return normalizeString(this.state.size, {
          fallbackValue: 'medium',
          validValues: ['xx-small', 'x-small', 'small', 'medium', 'large']
        });
      }

      set size(value) {
        this.state.size = value;
      }
      /**
       * The variant changes the appearance of a utility icon.
       * Accepted variants include inverse, success, warning, and error.
       * Use the inverse variant to implement a white fill in utility icons on dark backgrounds.
       * @type {string}
       */


      get variant() {
        return normalizeVariant(this.state.variant, this.state.iconName);
      }

      set variant(value) {
        this.state.variant = value;
      }

      connectedCallback() {
        this.classList.add('slds-icon_container');
      }

      setDefault() {
        this.state.src = undefined;
        this.state.iconName = 'standard:default';
        this.classList.add('slds-icon-standard-default');
      }

    }

    lwc.registerDecorators(LightningIcon, {
      publicProps: {
        alternativeText: {
          config: 0
        },
        src: {
          config: 3
        },
        iconName: {
          config: 3
        },
        size: {
          config: 3
        },
        variant: {
          config: 3
        }
      },
      track: {
        state: 1
      }
    });

    var _lightningIcon = lwc.registerComponent(LightningIcon, {
      tmpl: _tmpl$5
    });

    function normalizeVariant(variant, iconName) {
      // Unfortunately, the `bare` variant was implemented to do what the
      // `inverse` variant should have done. Keep this logic for as long as
      // we support the `bare` variant.
      if (variant === 'bare') {
        // TODO: Deprecation warning using strippable assertion
        variant = 'inverse';
      }

      if (getCategory(iconName) === 'utility') {
        return normalizeString(variant, {
          fallbackValue: '',
          validValues: ['error', 'inverse', 'warning', 'success']
        });
      }

      return 'inverse';
    }

    function tmpl$5($api, $cmp, $slotset, $ctx) {
      const {
        d: api_dynamic,
        k: api_key,
        h: api_element,
        i: api_iterator,
        f: api_flatten
      } = $api;
      return api_flatten([$cmp.hasParts ? api_iterator($cmp.text, function (item) {
        return [item.part.highlight ? api_element("strong", {
          key: api_key(0, item.key)
        }, [api_dynamic(item.part.text)]) : null, !item.part.highlight ? api_dynamic(item.part.text) : null];
      }) : [], !$cmp.hasParts ? api_dynamic($cmp.text) : null]);
    }

    var _tmpl$6 = lwc.registerTemplate(tmpl$5);
    tmpl$5.stylesheets = [];
    tmpl$5.stylesheetTokens = {
      hostAttribute: "lightning-baseComboboxFormattedText_baseComboboxFormattedText-host",
      shadowAttribute: "lightning-baseComboboxFormattedText_baseComboboxFormattedText"
    };

    class LightningBaseComboboxFormattedText extends lwc.LightningElement {
      constructor(...args) {
        super(...args);
        this._text = '';
        this.hasParts = void 0;
      }

      get text() {
        return this._text;
      }

      set text(value) {
        this.hasParts = Array.isArray(value) && value.length > 0;

        if (this.hasParts) {
          // Generate keys for LWC DOM
          this._text = value.map((part, i) => ({
            part,
            key: i
          }));
        } else {
          this._text = value;
        }
      }

    }

    lwc.registerDecorators(LightningBaseComboboxFormattedText, {
      publicProps: {
        text: {
          config: 3
        }
      },
      track: {
        _text: 1,
        hasParts: 1
      }
    });

    var _lightningBaseComboboxFormattedText = lwc.registerComponent(LightningBaseComboboxFormattedText, {
      tmpl: _tmpl$6
    });

    function tmpl$6($api, $cmp, $slotset, $ctx) {
      const {
        c: api_custom_element,
        h: api_element,
        d: api_dynamic
      } = $api;
      return [api_element("span", {
        classMap: {
          "slds-media__figure": true
        },
        key: 1
      }, [api_custom_element("lightning-icon", _lightningIcon, {
        props: {
          "size": $cmp.iconSize,
          "alternativeText": $cmp.item.iconAlternativeText,
          "iconName": $cmp.item.iconName
        },
        key: 0
      }, [])]), api_element("span", {
        classMap: {
          "slds-media__body": true
        },
        key: 8
      }, [api_element("span", {
        classMap: {
          "slds-listbox__option-text": true,
          "slds-listbox__option-text_entity": true
        },
        key: 4
      }, [!$cmp.textHasParts ? api_element("span", {
        classMap: {
          "slds-truncate": true
        },
        attrs: {
          "title": $cmp.item.text
        },
        key: 2
      }, [api_dynamic($cmp.item.text)]) : null, $cmp.textHasParts ? api_custom_element("lightning-base-combobox-formatted-text", _lightningBaseComboboxFormattedText, {
        classMap: {
          "slds-truncate": true
        },
        props: {
          "title": $cmp.text,
          "text": $cmp.item.text
        },
        key: 3
      }, []) : null]), $cmp.hasSubText ? api_element("span", {
        classMap: {
          "slds-listbox__option-meta": true,
          "slds-listbox__option-meta_entity": true
        },
        key: 7
      }, [!$cmp.subTextHasParts ? api_element("span", {
        classMap: {
          "slds-truncate": true
        },
        attrs: {
          "title": $cmp.item.subText
        },
        key: 5
      }, [api_dynamic($cmp.item.subText)]) : null, $cmp.subTextHasParts ? api_custom_element("lightning-base-combobox-formatted-text", _lightningBaseComboboxFormattedText, {
        classMap: {
          "slds-truncate": true
        },
        props: {
          "title": $cmp.subText,
          "text": $cmp.item.subText
        },
        key: 6
      }, []) : null]) : null]), $cmp.item.rightIconName ? api_element("span", {
        classMap: {
          "slds-media__figure": true,
          "slds-media__figure_reverse": true
        },
        key: 10
      }, [api_custom_element("lightning-icon", _lightningIcon, {
        props: {
          "size": $cmp.rightIconSize,
          "alternativeText": $cmp.item.rightIconAlternativeText,
          "iconName": $cmp.item.rightIconName
        },
        key: 9
      }, [])]) : null];
    }

    var card = lwc.registerTemplate(tmpl$6);
    tmpl$6.stylesheets = [];
    tmpl$6.stylesheetTokens = {
      hostAttribute: "lightning-baseComboboxItem_card-host",
      shadowAttribute: "lightning-baseComboboxItem_card"
    };

    function tmpl$7($api, $cmp, $slotset, $ctx) {
      const {
        c: api_custom_element,
        h: api_element,
        d: api_dynamic
      } = $api;
      return [api_element("span", {
        classMap: {
          "slds-media__figure": true,
          "slds-listbox__option-icon": true
        },
        key: 1
      }, [$cmp.item.iconName ? api_custom_element("lightning-icon", _lightningIcon, {
        props: {
          "alternativeText": $cmp.item.iconAlternativeText,
          "iconName": $cmp.item.iconName,
          "size": "x-small"
        },
        key: 0
      }, []) : null]), api_element("span", {
        classMap: {
          "slds-media__body": true
        },
        key: 4
      }, [!$cmp.textHasParts ? api_element("span", {
        classMap: {
          "slds-truncate": true
        },
        attrs: {
          "title": $cmp.item.text
        },
        key: 2
      }, [api_dynamic($cmp.item.text)]) : null, $cmp.textHasParts ? api_custom_element("lightning-base-combobox-formatted-text", _lightningBaseComboboxFormattedText, {
        classMap: {
          "slds-truncate": true
        },
        props: {
          "text": $cmp.item.text,
          "title": $cmp.text
        },
        key: 3
      }, []) : null])];
    }

    var inline = lwc.registerTemplate(tmpl$7);
    tmpl$7.stylesheets = [];
    tmpl$7.stylesheetTokens = {
      hostAttribute: "lightning-baseComboboxItem_inline-host",
      shadowAttribute: "lightning-baseComboboxItem_inline"
    };

    class LightningBaseComboboxItem extends lwc.LightningElement {
      constructor(...args) {
        super(...args);
        this.item = {};
      }

      connectedCallback() {
        // We want to make sure that the item has 'aria-selected' if it's selectable
        if (this.item.selectable) {
          this.setAttribute('aria-selected', 'false');
        }

        if (this.item.type === 'option-inline') {
          this.classList.add('slds-media_small', 'slds-listbox__option_plain');
        } else {
          this.classList.add('slds-listbox__option_entity');
        }
      }

      get textHasParts() {
        const text = this.item.text;
        return text && Array.isArray(text) && text.length > 0;
      }

      get subTextHasParts() {
        const subText = this.item.subText;
        return subText && Array.isArray(subText) && subText.length > 0;
      } // Return html based on the specified item type


      render() {
        if (this.item.type === 'option-card') {
          return card;
        }

        return inline;
      }

      highlight() {
        this.toggleHighlight(true);
      }

      removeHighlight() {
        this.toggleHighlight(false);
      }

      toggleHighlight(highlighted) {
        if (this.item.selectable) {
          this.setAttribute('aria-selected', highlighted ? 'true' : 'false');
          this.classList.toggle('slds-has-focus', highlighted);
        }
      } // Parts are needed for highlighting


      partsToText(parts) {
        if (parts && Array.isArray(parts) && parts.length > 0) {
          return parts.map(part => part.text).join('');
        }

        return parts;
      }

      get rightIconSize() {
        return this.item.rightIconSize || 'small';
      }

      get iconSize() {
        return this.item.iconSize || 'small';
      }

      get text() {
        return this.partsToText(this.item.text);
      }

      get subText() {
        return this.partsToText(this.item.subText);
      }

      get hasSubText() {
        const subText = this.item.subText;
        return subText && subText.length > 0;
      }

    }

    lwc.registerDecorators(LightningBaseComboboxItem, {
      publicProps: {
        item: {
          config: 0
        }
      },
      publicMethods: ["highlight", "removeHighlight"]
    });

    var _lightningBaseComboboxItem = lwc.registerComponent(LightningBaseComboboxItem, {
      tmpl: _tmpl$1
    });

    function tmpl$8($api, $cmp, $slotset, $ctx) {
      const {
        c: api_custom_element,
        gid: api_scoped_id,
        b: api_bind,
        h: api_element,
        d: api_dynamic,
        k: api_key,
        i: api_iterator,
        f: api_flatten
      } = $api;
      const {
        _m0,
        _m1,
        _m2,
        _m3,
        _m4,
        _m5,
        _m6,
        _m7,
        _m8,
        _m9,
        _m10,
        _m11,
        _m12,
        _m13,
        _m14
      } = $ctx;
      return [api_element("div", {
        className: $cmp.computedDropdownTriggerClass,
        attrs: {
          "role": "combobox",
          "aria-expanded": $cmp.computedAriaExpanded,
          "aria-haspopup": "listbox"
        },
        key: 29,
        on: {
          "click": _m14 || ($ctx._m14 = api_bind($cmp.handleTriggerClick))
        }
      }, [api_element("div", {
        className: $cmp.computedFormElementClass,
        attrs: {
          "role": "none"
        },
        key: 12
      }, [$cmp.hasInputPill ? api_custom_element("lightning-icon", _lightningIcon, {
        classMap: {
          "slds-icon_container": true,
          "slds-combobox__input-entity-icon": true
        },
        props: {
          "iconName": $cmp.inputPill.iconName,
          "alternativeText": $cmp.inputPill.iconAlternativeText,
          "size": "x-small"
        },
        key: 0
      }, []) : null, api_element("input", {
        className: $cmp.computedInputClass,
        attrs: {
          "id": api_scoped_id("input"),
          "type": "text",
          "role": "textbox",
          "autocomplete": "off",
          "name": $cmp.name,
          "placeholder": $cmp.computedPlaceholder,
          "maxlength": $cmp.inputMaxlength,
          "aria-autocomplete": $cmp.computedAriaAutocomplete,
          "aria-label": $cmp.inputLabel
        },
        props: {
          "required": $cmp.required,
          "value": $cmp.computedInputValue,
          "disabled": $cmp.disabled,
          "readOnly": $cmp._inputReadOnly
        },
        key: 1,
        on: {
          "focus": _m0 || ($ctx._m0 = api_bind($cmp.handleFocus)),
          "select": _m1 || ($ctx._m1 = api_bind($cmp.handleInputSelect)),
          "change": _m2 || ($ctx._m2 = api_bind($cmp.handleTextChange)),
          "input": _m3 || ($ctx._m3 = api_bind($cmp.handleInput)),
          "keydown": _m4 || ($ctx._m4 = api_bind($cmp.handleInputKeyDown)),
          "blur": _m5 || ($ctx._m5 = api_bind($cmp.handleBlur))
        }
      }, []), $cmp.hasInputPill ? api_element("div", {
        classMap: {
          "slds-input__icon-group": true,
          "slds-input__icon-group_right": true
        },
        key: 5
      }, [api_element("button", {
        classMap: {
          "slds-button": true,
          "slds-button_icon": true,
          "slds-input__icon": true,
          "slds-input__icon_right": true
        },
        attrs: {
          "type": "button",
          "title": $cmp.i18n.pillCloseButtonAlternativeText
        },
        key: 4,
        on: {
          "click": _m6 || ($ctx._m6 = api_bind($cmp.handlePillRemove))
        }
      }, [api_custom_element("lightning-primitive-icon", _lightningPrimitiveIcon, {
        props: {
          "iconName": "utility:close",
          "variant": "bare",
          "svgClass": "slds-button__icon"
        },
        key: 2
      }, []), api_element("span", {
        classMap: {
          "slds-assistive-text": true
        },
        key: 3
      }, [api_dynamic($cmp.i18n.pillCloseButtonAlternativeText)])])]) : null, !$cmp.hasInputPill ? api_element("div", {
        classMap: {
          "slds-input__icon-group": true,
          "slds-input__icon-group_right": true
        },
        key: 11
      }, [$cmp.showInputActivityIndicator ? api_element("div", {
        classMap: {
          "slds-spinner": true,
          "slds-spinner_brand": true,
          "slds-spinner_x-small": true,
          "slds-input__spinner": true
        },
        attrs: {
          "role": "status"
        },
        key: 9
      }, [api_element("span", {
        classMap: {
          "slds-assistive-text": true
        },
        key: 6
      }, [api_dynamic($cmp.i18n.loadingText)]), api_element("div", {
        classMap: {
          "slds-spinner__dot-a": true
        },
        key: 7
      }, []), api_element("div", {
        classMap: {
          "slds-spinner__dot-b": true
        },
        key: 8
      }, [])]) : null, $cmp.inputIconName ? api_custom_element("lightning-icon", _lightningIcon, {
        classMap: {
          "slds-input__icon": true,
          "slds-input__icon_right": true
        },
        props: {
          "alternativeText": $cmp.inputIconAlternativeText,
          "iconName": $cmp.inputIconName,
          "size": $cmp.inputIconSize
        },
        key: 10
      }, []) : null]) : null]), api_element("div", {
        className: $cmp.computedDropdownClass,
        attrs: {
          "id": api_scoped_id("dropdown-element"),
          "data-dropdown-element": true,
          "role": "listbox"
        },
        key: 28,
        on: {
          "scroll": _m9 || ($ctx._m9 = api_bind($cmp.handleListboxScroll)),
          "mousedown": _m10 || ($ctx._m10 = api_bind($cmp.handleDropdownMouseDown)),
          "mouseup": _m11 || ($ctx._m11 = api_bind($cmp.handleDropdownMouseUp)),
          "mouseleave": _m12 || ($ctx._m12 = api_bind($cmp.handleDropdownMouseLeave)),
          "click": _m13 || ($ctx._m13 = api_bind($cmp.handleOptionClick))
        }
      }, $cmp._hasDropdownOpened ? api_flatten([api_iterator($cmp._items, function (item) {
        return [!item.items ? api_custom_element("lightning-base-combobox-item", _lightningBaseComboboxItem, {
          classMap: {
            "slds-media": true,
            "slds-listbox__option": true,
            "slds-media_center": true
          },
          attrs: {
            "data-item-id": item.id,
            "data-value": item.value
          },
          props: {
            "role": "option",
            "item": item,
            "id": api_scoped_id(item.id)
          },
          key: api_key(13, item.value),
          on: {
            "mouseenter": _m7 || ($ctx._m7 = api_bind($cmp.handleOptionMouseEnter))
          }
        }, []) : null, item.items ? api_element("ul", {
          attrs: {
            "role": "group",
            "aria-label": item.label
          },
          key: api_key(19, item.label)
        }, api_flatten([item.label ? api_element("li", {
          classMap: {
            "slds-listbox__item": true
          },
          attrs: {
            "role": "presentation"
          },
          key: 16
        }, [api_element("div", {
          classMap: {
            "slds-media": true,
            "slds-listbox__option": true,
            "slds-listbox__option_plain": true,
            "slds-media_small": true
          },
          attrs: {
            "role": "presentation"
          },
          key: 15
        }, [api_element("h3", {
          attrs: {
            "role": "presentation",
            "title": item.label
          },
          key: 14
        }, [api_dynamic(item.label)])])]) : null, api_iterator(item.items, function (groupItem) {
          return api_element("li", {
            classMap: {
              "slds-listbox__item": true
            },
            attrs: {
              "role": "presentation"
            },
            key: api_key(18, groupItem.value)
          }, [api_custom_element("lightning-base-combobox-item", _lightningBaseComboboxItem, {
            classMap: {
              "slds-media": true,
              "slds-listbox__option": true,
              "slds-media_center": true
            },
            attrs: {
              "data-item-id": groupItem.id,
              "data-value": groupItem.value
            },
            props: {
              "role": "option",
              "item": groupItem,
              "id": api_scoped_id(groupItem.id)
            },
            key: 17,
            on: {
              "mouseenter": _m8 || ($ctx._m8 = api_bind($cmp.handleOptionMouseEnter))
            }
          }, [])]);
        })])) : null];
      }), $cmp.showDropdownActivityIndicator ? api_element("div", {
        classMap: {
          "slds-listbox__item": true
        },
        attrs: {
          "role": "presentation"
        },
        key: 25
      }, [api_element("div", {
        classMap: {
          "slds-align_absolute-center": true,
          "slds-p-top_medium": true
        },
        key: 24
      }, [api_element("div", {
        classMap: {
          "slds-spinner": true,
          "slds-spinner_x-small": true,
          "slds-spinner_inline": true
        },
        attrs: {
          "role": "status"
        },
        key: 23
      }, [api_element("span", {
        classMap: {
          "slds-assistive-text": true
        },
        key: 20
      }, [api_dynamic($cmp.i18n.loadingText)]), api_element("div", {
        classMap: {
          "slds-spinner__dot-a": true
        },
        key: 21
      }, []), api_element("div", {
        classMap: {
          "slds-spinner__dot-b": true
        },
        key: 22
      }, [])])])]) : null, $cmp.showAttribution ? api_element("div", {
        classMap: {
          "slds-align_absolute-center": true
        },
        key: 27
      }, [api_element("img", {
        classMap: {
          "slds-inline-logo": true
        },
        attrs: {
          "src": $cmp.attributionLogoUrl,
          "alt": $cmp.attributionLogoAssistiveText,
          "title": $cmp.attributionLogoAssistiveText
        },
        key: 26
      }, [])]) : null]) : [])])];
    }

    var _tmpl$7 = lwc.registerTemplate(tmpl$8);
    tmpl$8.stylesheets = [];

    if (_implicitStylesheets$3) {
      tmpl$8.stylesheets.push.apply(tmpl$8.stylesheets, _implicitStylesheets$3);
    }
    tmpl$8.stylesheetTokens = {
      hostAttribute: "lightning-baseCombobox_baseCombobox-host",
      shadowAttribute: "lightning-baseCombobox_baseCombobox"
    };

    var labelAriaSelectedOptions = 'Selected Options:';

    var labelDeselectOptionKeyboard = 'Press delete or backspace to remove';

    var labelLoadingText = 'Loading';

    var labelPillCloseButtonAlternativeText = 'Clear Selection';

    function preventDefaultAndStopPropagation(event) {
      event.preventDefault();
      event.stopPropagation();
    }

    function handleEnterKey({
      event,
      currentIndex,
      dropdownInterface
    }) {
      preventDefaultAndStopPropagation(event);

      if (dropdownInterface.isDropdownVisible() && currentIndex >= 0) {
        dropdownInterface.selectByIndex(currentIndex);
      } else {
        dropdownInterface.openDropdownIfNotEmpty();
      }
    }

    function handlePageUpOrDownKey({
      event,
      currentIndex,
      dropdownInterface
    }) {
      preventDefaultAndStopPropagation(event);

      if (!dropdownInterface.isDropdownVisible()) {
        dropdownInterface.openDropdownIfNotEmpty();
      }

      const pageUpDownOptionSkipCount = 10;

      if (dropdownInterface.getTotalOptions() > 0) {
        // eslint-disable-next-line @lwc/lwc/no-async-operation
        requestAnimationFrame(() => {
          let highlightIndex = 0;

          if (event.key === 'PageUp') {
            highlightIndex = Math.max(currentIndex - pageUpDownOptionSkipCount, 0);
          } else {
            // Jump 10 options down
            highlightIndex = Math.min(currentIndex + pageUpDownOptionSkipCount, dropdownInterface.getTotalOptions() - 1);
          }

          dropdownInterface.highlightOptionWithIndex(highlightIndex);
        });
      }
    }

    function handleHomeOrEndKey({
      event,
      dropdownInterface
    }) {
      // If not a read-only input we want the default browser behaviour
      if (!dropdownInterface.isInputReadOnly()) {
        return;
      }

      preventDefaultAndStopPropagation(event);

      if (!dropdownInterface.isDropdownVisible()) {
        dropdownInterface.openDropdownIfNotEmpty();
      }

      if (dropdownInterface.getTotalOptions() > 0) {
        // eslint-disable-next-line @lwc/lwc/no-async-operation
        requestAnimationFrame(() => {
          const highlightIndex = event.key === 'Home' ? 0 : dropdownInterface.getTotalOptions() - 1;
          dropdownInterface.highlightOptionWithIndex(highlightIndex);
        });
      }
    }

    function handleUpOrDownKey({
      event,
      currentIndex,
      dropdownInterface
    }) {
      preventDefaultAndStopPropagation(event);

      if (!dropdownInterface.isDropdownVisible()) {
        dropdownInterface.openDropdownIfNotEmpty();
      }

      const isUpKey = event.key === 'Up' || event.key === 'ArrowUp';
      let nextIndex;

      if (currentIndex >= 0) {
        nextIndex = isUpKey ? currentIndex - 1 : currentIndex + 1;

        if (nextIndex >= dropdownInterface.getTotalOptions()) {
          nextIndex = 0;
        } else if (nextIndex < 0) {
          nextIndex = dropdownInterface.getTotalOptions() - 1;
        }
      } else {
        nextIndex = isUpKey ? dropdownInterface.getTotalOptions() - 1 : 0;
      }

      if (dropdownInterface.getTotalOptions() > 0) {
        // eslint-disable-next-line @lwc/lwc/no-async-operation
        requestAnimationFrame(() => {
          dropdownInterface.highlightOptionWithIndex(nextIndex);
        });
      }
    }

    function handleEscapeOrTabKey({
      event,
      dropdownInterface
    }) {
      if (dropdownInterface.isDropdownVisible()) {
        event.stopPropagation();
        dropdownInterface.closeDropdown();
      }
    }

    function handleTypedCharacters({
      event,
      currentIndex,
      dropdownInterface
    }) {
      if (event.key && event.key.length > 1) {
        // not a printable character
        return;
      }

      if (!dropdownInterface.isDropdownVisible()) {
        dropdownInterface.openDropdownIfNotEmpty();
      }

      if (dropdownInterface.isInputReadOnly()) {
        // The element should be read only, it's a work-around for IE11 as it will still make editable an input
        // that has focus and was dynamically changed to be readonly on focus change. Remove once we no longer
        // support IE11
        event.preventDefault(); // eslint-disable-next-line @lwc/lwc/no-async-operation

        requestAnimationFrame(() => runActionOnBufferedTypedCharacters(event, dropdownInterface.highlightOptionWithText.bind(this, currentIndex || 0)));
      }
    }

    const eventKeyToHandlerMap = {
      Enter: handleEnterKey,
      PageUp: handlePageUpOrDownKey,
      PageDown: handlePageUpOrDownKey,
      Home: handleHomeOrEndKey,
      End: handleHomeOrEndKey,
      Down: handleUpOrDownKey,
      // IE11/Edge specific
      Up: handleUpOrDownKey,
      // IE11/Edge specific
      ArrowUp: handleUpOrDownKey,
      ArrowDown: handleUpOrDownKey,
      Esc: handleEscapeOrTabKey,
      // IE11/Edge specific
      Escape: handleEscapeOrTabKey,
      Tab: handleEscapeOrTabKey
    };
    function handleKeyDownOnInput({
      event,
      currentIndex,
      dropdownInterface
    }) {
      const parameters = {
        event,
        currentIndex,
        dropdownInterface
      };

      if (eventKeyToHandlerMap[event.key]) {
        eventKeyToHandlerMap[event.key](parameters);
      } else {
        handleTypedCharacters(parameters);
      }
    }

    class BaseComboboxEvents {
      constructor(baseCombobox) {
        this.dispatchEvent = baseCombobox.dispatchEvent.bind(baseCombobox);
      }

      dispatchPillRemove(pill) {
        this.dispatchEvent(new CustomEvent('pillremove', {
          detail: {
            item: pill
          }
        }));
      }

      dispatchEndReached() {
        this.dispatchEvent(new CustomEvent('endreached'));
      }

      dispatchFocus() {
        this.dispatchEvent(new CustomEvent('focus'));
      }

      dispatchBlur() {
        this.dispatchEvent(new CustomEvent('blur'));
      }

      dispatchTextInput(text) {
        this.dispatchEvent(new CustomEvent('textinput', {
          detail: {
            text
          }
        }));
      }

      dispatchTextChange(text) {
        this.dispatchEvent(new CustomEvent('textchange', {
          detail: {
            text
          }
        }));
      }

      dispatchSelect(value) {
        this.dispatchEvent(new CustomEvent('select', {
          detail: {
            value
          }
        }));
      }

      dispatchDropdownOpen() {
        this.dispatchEvent(new CustomEvent('dropdownopen'));
      }

      dispatchDropdownOpenRequest() {
        this.dispatchEvent(new CustomEvent('dropdownopenrequest'));
      }

    }

    let idCounter = 0;
    function generateUniqueId(prefix = 'input') {
      idCounter++;
      return `${prefix}-${idCounter}`;
    }

    /**
     Represents an object which keeps track of a user's interacting state.
     @constructor InteractingState
     @param {Object} options - The options object.
     @param {Object} [options.duration=2000] - The number of milliseconds of idle time to wait before exiting the interacting state.
     @param {Object} [options.debounceInteraction=false] - Whether to debounce interaction to ignore consecutive leave-enter interactions.
     **/

    class InteractingState {
      constructor(options) {
        const duration = options && options.duration >= 0 ? options.duration : 2000;
        this.eventemitter = new EventEmitter();
        this._interacting = false;
        this._debouncedLeave = debounce(this.leave.bind(this), duration);
        this._debounceInteraction = options && options.debounceInteraction;
        this._interactedRecently = false;

        if (this._debounceInteraction) {
          // debounce leave until a short time later
          this._debouncedEmitLeave = debounce(() => {
            if (!this._interacting) {
              this._interactedRecently = false;
              this.eventemitter.emit('leave');
            }
          }, 200); // debounce enter until left

          this._debouncedEmitEnter = () => {
            if (!this._interactedRecently) {
              this._interactedRecently = true;
              this.eventemitter.emit('enter');
            }
          };
        }
      }
      /**
       Checks whether or not we are in the interacting state.
       @method InteractingState#isInteracting
       @return {Boolean} - Whether or not we are interacting.
       **/


      isInteracting() {
        return this._interacting;
      }
      /**
       Enters the interacting state.
       @method InteractingState#enter
       @returns {void}
       **/


      enter() {
        if (!this._interacting) {
          this._interacting = true;

          if (this._debounceInteraction) {
            this._debouncedEmitEnter();
          } else {
            this.eventemitter.emit('enter');
          }
        }
      }
      /**
       Registers a handler to execute when we enter the interacting state.
       @method InteractingState#onenter
       @param {Function} handler - The callback function.
       **/


      onenter(handler) {
        this.eventemitter.on('enter', handler);
      }
      /**
       Leaves the interacting state.
       @method InteractingState#leave
       @returns {void}
       **/


      leave() {
        if (this._interacting) {
          this._interacting = false;

          if (this._debounceInteraction) {
            this._debouncedEmitLeave();
          } else {
            this.eventemitter.emit('leave');
          }
        }
      }
      /**
       Registers a handler to execute when we leave the interacting state.
       @method InteractingState#onleave
       @param {Function} handler - The callback function.
       **/


      onleave(handler) {
        this.eventemitter.on('leave', handler);
      }
      /**
       Signals the start of the transition into the interacting state and
       schedules a transition out of the interacting state after an idle
       duration. Calling this method multiple times will reset the timer.
       @method InteractingState#interacting
       @returns {void}
       **/


      interacting() {
        this.enter();

        this._debouncedLeave();
      }

    }
    /**
     Creates a debounced function that delays invoking `func` until after
     `delay` milliseconds have elapsed since the last time the debounced
     function was invoked.
     @function debounce
     @param {Function} func - The function to debounce
     @param {Number} delay - The number of milliseconds to delay
     @param {Object} options - The options object
     @param {Boolean} options.leading - Specify invoking on the leading edge of the timeout
     @return {Function} - debounced function
     **/

    function debounce(func, delay, options) {
      const _options = options || {};

      let invokeLeading = _options.leading;
      let timer;
      return function debounced() {
        const args = Array.prototype.slice.apply(arguments);

        if (invokeLeading) {
          func.apply(this, args);
          invokeLeading = false;
        }

        clearTimeout(timer); // eslint-disable-next-line @lwc/lwc/no-async-operation

        timer = setTimeout(function () {
          func.apply(this, args);
          invokeLeading = _options.leading; // reset for next debounce sequence
        }, delay);
      };
    }

    var labelBadInput = 'Enter a valid value.';

    var labelPatternMismatch = 'Your entry does not match the allowed pattern.';

    var labelRangeOverflow = 'The number is too high.';

    var labelRangeUnderflow = 'The number is too low.';

    var labelStepMismatch = 'Your entry isn\'t a valid increment.';

    var labelTooLong = 'Your entry is too long.';

    var labelTooShort = 'Your entry is too short.';

    var labelTypeMismatch = 'You have entered an invalid format.';

    var labelValueMissing = 'Complete this field.';

    const constraintsSortedByPriority = ['customError', 'badInput', 'patternMismatch', 'rangeOverflow', 'rangeUnderflow', 'stepMismatch', 'tooLong', 'tooShort', 'typeMismatch', 'valueMissing'];
    const defaultLabels = {
      badInput: labelBadInput,
      customError: labelBadInput,
      patternMismatch: labelPatternMismatch,
      rangeOverflow: labelRangeOverflow,
      rangeUnderflow: labelRangeUnderflow,
      stepMismatch: labelStepMismatch,
      tooLong: labelTooLong,
      tooShort: labelTooShort,
      typeMismatch: labelTypeMismatch,
      valueMissing: labelValueMissing
    };

    function resolveBestMatch(validity) {
      let validityState;

      if (validity && validity.valid === false) {
        validityState = 'badInput';
        constraintsSortedByPriority.some(stateName => {
          if (validity[stateName] === true) {
            validityState = stateName;
            return true;
          }

          return false;
        });
      }

      return validityState;
    }

    function computeConstraint(valueProvider, constraint) {
      const provider = valueProvider[constraint];

      if (typeof provider === 'function') {
        return provider();
      }

      if (typeof provider === 'boolean') {
        return provider;
      }

      return false;
    } // We're doing the below to avoid exposing the constraintsProvider in the ValidityState


    function newValidityState(constraintsProvider) {
      class ValidityState {
        get valueMissing() {
          return computeConstraint(constraintsProvider, 'valueMissing');
        }

        get typeMismatch() {
          return computeConstraint(constraintsProvider, 'typeMismatch');
        }

        get patternMismatch() {
          return computeConstraint(constraintsProvider, 'patternMismatch');
        }

        get tooLong() {
          return computeConstraint(constraintsProvider, 'tooLong');
        }

        get tooShort() {
          return computeConstraint(constraintsProvider, 'tooShort');
        }

        get rangeUnderflow() {
          return computeConstraint(constraintsProvider, 'rangeUnderflow');
        }

        get rangeOverflow() {
          return computeConstraint(constraintsProvider, 'rangeOverflow');
        }

        get stepMismatch() {
          return computeConstraint(constraintsProvider, 'stepMismatch');
        }

        get customError() {
          return computeConstraint(constraintsProvider, 'customError');
        }

        get badInput() {
          return computeConstraint(constraintsProvider, 'badInput');
        }

        get valid() {
          return !(this.valueMissing || this.typeMismatch || this.patternMismatch || this.tooLong || this.tooShort || this.rangeUnderflow || this.rangeOverflow || this.stepMismatch || this.customError || this.badInput);
        }

      }

      return new ValidityState();
    }

    function buildSyntheticValidity(constraintProvider) {
      return Object.freeze(newValidityState(constraintProvider));
    }
    function getErrorMessage(validity, labelMap) {
      const key = resolveBestMatch(validity);

      if (key) {
        return labelMap[key] ? labelMap[key] : defaultLabels[key];
      }

      return '';
    }
    class FieldConstraintApi {
      constructor(inputComponentProvider, constraintProviders) {
        assert(typeof inputComponentProvider === 'function');
        this._inputComponentProvider = inputComponentProvider;
        this._constraintsProvider = Object.assign({}, constraintProviders);

        if (!this._constraintsProvider.customError) {
          this._constraintsProvider.customError = () => typeof this._customValidityMessage === 'string' && this._customValidityMessage !== '';
        }
      }

      get validity() {
        if (!this._constraint) {
          this._constraint = buildSyntheticValidity(this._constraintsProvider);
        }

        return this._constraint;
      }

      checkValidity() {
        const isValid = this.validity.valid;

        if (!isValid) {
          if (this.inputComponent) {
            this.inputComponent.dispatchEvent(new CustomEvent('invalid', {
              cancellable: true
            }));
          }
        }

        return isValid;
      }

      reportValidity(callback) {
        const valid = this.checkValidity(); // the input might have been removed from the DOM by the time we query it

        if (this.inputComponent) {
          this.inputComponent.classList.toggle('slds-has-error', !valid);

          if (callback) {
            callback(this.validationMessage);
          }
        }

        return valid;
      }

      setCustomValidity(message) {
        this._customValidityMessage = message;
      }

      get validationMessage() {
        return getErrorMessage(this.validity, {
          customError: this._customValidityMessage,
          badInput: this.inputComponent.messageWhenBadInput,
          patternMismatch: this.inputComponent.messageWhenPatternMismatch,
          rangeOverflow: this.inputComponent.messageWhenRangeOverflow,
          rangeUnderflow: this.inputComponent.messageWhenRangeUnderflow,
          stepMismatch: this.inputComponent.messageWhenStepMismatch,
          tooShort: this.inputComponent.messageWhenTooShort,
          tooLong: this.inputComponent.messageWhenTooLong,
          typeMismatch: this.inputComponent.messageWhenTypeMismatch,
          valueMissing: this.inputComponent.messageWhenValueMissing
        });
      }

      get inputComponent() {
        if (!this._inputComponentElement) {
          this._inputComponentElement = this._inputComponentProvider();
        }

        return this._inputComponentElement;
      }

    }
    class FieldConstraintApiWithProxyInput {
      constructor(inputComponent, overrides = {}, inputElementName = 'input') {
        this._inputComponent = inputComponent;
        this._overrides = overrides;
        this._proxyInput = document.createElement(inputElementName);
      }

      setInputAttributes(attributes) {
        this._attributes = attributes;

        this._attributeUpdater = attributeNames => {
          if (!attributes) {
            return;
          }

          if (typeof attributeNames === 'string') {
            this._setAttribute(attributeNames, attributes[attributeNames]());
          } else {
            attributeNames.forEach(attributeName => {
              this._setAttribute(attributeName, attributes[attributeName]());
            });
          }
        };

        return this._attributeUpdater;
      }

      get validity() {
        return this._constraintApi.validity;
      }

      checkValidity() {
        return this._constraintApi.checkValidity();
      }

      reportValidity(callback) {
        return this._constraintApi.reportValidity(callback);
      }

      setCustomValidity(message) {
        this._constraintApi.setCustomValidity(message);

        this._proxyInput.setCustomValidity(message);
      }

      get validationMessage() {
        return this._constraintApi.validationMessage;
      }

      _setAttribute(attributeName, value) {
        if (value !== null && value !== undefined && value !== false) {
          if (attributeName === 'value') {
            if (this._proxyInput.type === 'file') {
              // Can't set value on file
              return;
            }

            this._proxyInput.value = value;
          } else {
            this._proxyInput.setAttribute(attributeName, value);
          }
        } else {
          this._removeAttribute(attributeName);
        }
      }

      _removeAttribute(attributeName) {
        this._proxyInput.removeAttribute(attributeName);
      }

      get _constraintApi() {
        if (!this._privateConstraintApi) {
          this._updateAllAttributes();

          const computeConstraintWithProxyInput = constraintName => {
            const constraintOverride = this._overrides[constraintName];

            const isDisabledOrReadOnly = this._proxyInput.hasAttribute('disabled') || this._proxyInput.hasAttribute('readonly');

            if (typeof constraintOverride === 'function') {
              return !isDisabledOrReadOnly && constraintOverride();
            } // Firefox incorrectly computes rangeUnderflow for disabled and readonly inputs, so we're adding
            // a check here instead to always return false when the input has readonly or disabled attributes set


            return !isDisabledOrReadOnly && this._proxyInput.validity[constraintName];
          };

          const constraintsProvider = constraintsSortedByPriority.reduce((provider, constraint) => {
            provider[constraint] = computeConstraintWithProxyInput.bind(this, constraint);
            return provider;
          }, {});
          this._privateConstraintApi = new FieldConstraintApi(this._inputComponent, constraintsProvider);
        }

        return this._privateConstraintApi;
      }

      _updateAllAttributes() {
        if (this._attributes) {
          Object.entries(this._attributes).forEach(([key, valueFunction]) => {
            this._setAttribute(key, valueFunction());
          });
        }
      }

    }

    const VARIANT = {
      STANDARD: 'standard',
      LABEL_HIDDEN: 'label-hidden',
      LABEL_STACKED: 'label-stacked',
      LABEL_INLINE: 'label-inline'
    };
    /**
    A variant normalization utility for attributes.
    @param {Any} value - The value to normalize.
    @return {Boolean} - The normalized value.
    **/

    function normalizeVariant$1(value) {
      return normalizeString(value, {
        fallbackValue: VARIANT.STANDARD,
        validValues: [VARIANT.STANDARD, VARIANT.LABEL_HIDDEN, VARIANT.LABEL_STACKED, VARIANT.LABEL_INLINE]
      });
    }

    function isEmptyString(s) {
      return s === undefined || s === null || typeof s === 'string' && s.trim() === '';
    }

    const i18n$1 = {
      ariaSelectedOptions: labelAriaSelectedOptions,
      deselectOptionKeyboard: labelDeselectOptionKeyboard,
      pillCloseButtonAlternativeText: labelPillCloseButtonAlternativeText,
      loadingText: labelLoadingText
    };
    const SMALL_MIN_HEIGHT = '2.25rem';
    const MEDIUM_MIN_HEIGHT = '6.75rem';
    const ARIA_CONTROLS = 'aria-controls';
    const ARIA_LABELLEDBY = 'aria-labelledby';
    const ARIA_DESCRIBEDBY$1 = 'aria-describedby';
    const ARIA_LABEL = 'aria-label';
    const ARIA_ACTIVEDESCENDANT = 'aria-activedescendant';

    class LightningBaseCombobox extends lwc.LightningElement {
      constructor() {
        super();
        this.inputText = '';
        this.inputIconName = 'utility:down';
        this.inputIconSize = 'x-small';
        this.inputIconAlternativeText = void 0;
        this.inputMaxlength = void 0;
        this.showInputActivityIndicator = false;
        this.required = false;
        this.dropdownAlignment = 'left';
        this.placeholder = 'Select an Item';
        this.inputLabel = void 0;
        this.name = void 0;
        this.inputPill = void 0;
        this.attributionLogoUrl = void 0;
        this.attributionLogoAssistiveText = void 0;
        this._showDropdownActivityIndicator = false;
        this._items = [];
        this._disabled = false;
        this._dropdownVisible = false;
        this._hasDropdownOpened = false;
        this._highlightedOptionElementId = null;
        this._variant = void 0;
        this._dropdownHeight = 'standard';
        this._readonly = false;
        this._logoLoaded = false;
        this._inputDescribedBy = [];
        this._inputAriaControls = void 0;
        this._activeElementDomId = void 0;
        this._events = new BaseComboboxEvents(this);
      }

      renderedCallback() {
        this.dispatchEvent(new CustomEvent('ready', {
          detail: {
            id: this.inputId,
            name: this.name
          }
        }));
        this.synchronizeA11y();
      }

      connectedCallback() {
        this.classList.add('slds-combobox_container');
        this._connected = true;
        this._keyboardInterface = this.dropdownKeyboardInterface();
      }

      disconnectedCallback() {
        this._connected = false;
        this._listBoxElementCache = undefined;
      }

      get inputControlsElement() {
        return this._inputAriaControls;
      }

      set inputControlsElement(el) {
        this._inputAriaControls = el;
        this.synchronizeA11y();
      }

      get inputDescribedByElements() {
        return this._inputDescribedBy;
      }

      set inputDescribedByElements(elements) {
        if (Array.isArray(elements)) {
          this._inputDescribedBy = elements;
        } else {
          this._inputDescribedBy = [elements];
        }

        this.synchronizeA11y();
      }

      get inputLabelledByElement() {
        return this._inputLabelledBy;
      }

      set inputLabelledByElement(el) {
        this._inputLabelledBy = el;
        this.synchronizeA11y();
      }

      get inputLabelledById() {
        return getRealDOMId(this._inputLabelledBy);
      }

      get inputAriaControlsId() {
        return getRealDOMId(this._inputAriaControls);
      }

      get inputId() {
        return getRealDOMId(this.template.querySelector('input'));
      }

      get computedAriaDescribedBy() {
        const ariaValues = [];

        this._inputDescribedBy.forEach(el => {
          ariaValues.push(getRealDOMId(el));
        });

        return normalizeAriaAttribute(ariaValues);
      }

      get dropdownHeight() {
        return this._dropdownHeight;
      }

      set dropdownHeight(height) {
        this._dropdownHeight = normalizeString(height, {
          fallbackValue: 'standard',
          validValues: ['standard', 'small']
        });
      }

      get showDropdownActivityIndicator() {
        return this._showDropdownActivityIndicator;
      }

      set showDropdownActivityIndicator(value) {
        this._showDropdownActivityIndicator = normalizeBoolean(value);

        if (this._connected) {
          if (this._showDropdownActivityIndicator) {
            if (this._shouldOpenDropDown) {
              this.openDropdownIfNotEmpty();
            }
          } else if (this._dropdownVisible && this.isDropdownEmpty) {
            this.closeDropdown();
          }
        }
      }

      get disabled() {
        return this._disabled;
      }

      set disabled(value) {
        this._disabled = normalizeBoolean(value);

        if (this._disabled && this._dropdownVisible) {
          this.closeDropdown();
        }
      }

      get readOnly() {
        return this._readonly;
      }

      set readOnly(value) {
        this._readonly = normalizeBoolean(value);

        if (this._readonly && this._dropdownVisible) {
          this.closeDropdown();
        }
      }

      get variant() {
        return this._variant || VARIANT.STANDARD;
      }

      set variant(value) {
        this._variant = normalizeString(value, {
          fallbackValue: VARIANT.STANDARD,
          validValues: [VARIANT.STANDARD, 'lookup']
        });
      }

      get items() {
        return this._unprocessedItems;
      }

      set items(items = []) {
        this._unprocessedItems = items;

        if (this._connected) {
          if (this._hasDropdownOpened) {
            // The dropdown has already been opened at least once, so process the items immediately
            this.updateItems(items);

            if (this._dropdownVisible) {
              // The dropdown is visible but there are no items to show, close it
              if (this.isDropdownEmpty) {
                this.closeDropdown();
              } else {
                // We have new items, update highlight
                this.highlightDefaultItem(); // Since the items have changed, the positioning should be recomputed
                // remove-next-line-for-c-namespace

                this.startDropdownAutoPositioning();
              }
            }
          }

          if (this._shouldOpenDropDown) {
            this.openDropdownIfNotEmpty();
          }
        }
      }

      highlightInputText() {
        if (this._connected) {
          // Safari has issues with invoking set selection range immediately in the 'focus' handler, instead
          // we'd be doing it in an animation frame. Remove the requestAnimationFrame once/if this is fixed
          // in Safari
          // eslint-disable-next-line @lwc/lwc/no-async-operation
          requestAnimationFrame(() => {
            const {
              inputElement
            } = this;
            inputElement.setSelectionRange(0, inputElement.value.length);
          });
        }
      }

      get showAttribution() {
        return this.attributionLogoUrl;
      }

      focus() {
        if (this._connected) {
          this.inputElement.focus();
        }
      }

      focusAndOpenDropdownIfNotEmpty() {
        if (this._connected) {
          if (!this._inputHasFocus) {
            this.focus();
          }

          this.openDropdownIfNotEmpty();
        }
      }

      blur() {
        if (this._connected) {
          this.inputElement.blur();
        }
      }

      synchronizeA11y() {
        const input = this.template.querySelector('input');

        if (!input) {
          return;
        }

        synchronizeAttrs(input, {
          [ARIA_LABELLEDBY]: this.inputLabelledById,
          [ARIA_DESCRIBEDBY$1]: this.computedAriaDescribedBy,
          [ARIA_ACTIVEDESCENDANT]: this._activeElementDomId,
          [ARIA_CONTROLS]: this.computedInputControls,
          [ARIA_LABEL]: this.inputLabel
        });
      }

      itemId(index) {
        return this.inputId + '-' + index;
      }

      itemIndexFromId(id) {
        // Extracts the index from an item id.
        return parseInt(id.substring(id.lastIndexOf('-') + 1), 10);
      }

      processItem(item) {
        const itemCopy = {}; // Supported item properties:
        // 'type' (string): option-inline, option-card
        // 'highlight' (boolean): Whether to highlight the item when dropdown opens
        // 'iconName': left icon name
        // 'iconSize': left icon size
        // 'iconAlternativeText': assistive text for the left icon
        // 'rightIconName': right icon name
        // 'rightIconSize': right icon size
        // 'rightIconAlternativeText': assistive text for the right icon
        // 'text': text to display
        // 'subText': sub-text to display (only option-card supports it)
        // 'value': value associated with the option

        itemCopy.type = item.type;
        itemCopy.iconName = item.iconName;
        itemCopy.iconSize = item.iconSize;
        itemCopy.iconAlternativeText = item.iconAlternativeText;
        itemCopy.rightIconName = item.rightIconName;
        itemCopy.rightIconSize = item.rightIconSize;
        itemCopy.rightIconAlternativeText = item.rightIconAlternativeText;
        itemCopy.text = item.text;
        itemCopy.subText = item.subText;
        itemCopy.value = item.value; // extra metadata needed

        itemCopy.selectable = ['option-card', 'option-inline'].indexOf(item.type) >= 0;

        if (itemCopy.selectable) {
          itemCopy.index = this._selectableItems;
          itemCopy.id = this.itemId(itemCopy.index);
          this._selectableItems += 1;

          if (item.highlight) {
            this._highlightedItemIndex = itemCopy.index;
          }
        }

        return itemCopy;
      }

      get _inputReadOnly() {
        return this._readonly || this.variant === VARIANT.STANDARD || this.hasInputPill;
      }

      get computedAriaAutocomplete() {
        if (this.hasInputPill) {
          // no aria-autocomplete when pill is showing
          return null;
        }

        return this._inputReadOnly ? 'none' : 'list';
      }

      get computedPlaceholder() {
        return this.hasInputPill ? this.inputPill.label : this.placeholder;
      }

      get computedInputValue() {
        return this.hasInputPill ? this.inputPill.label : this.inputText;
      }

      handleListboxScroll(event) {
        // We don't want this to bubble up to the modal which due to event retargeting wouldn't be able
        // to know what is actually being scrolled and thus may lead to the scrolling of the modal
        event.stopPropagation();
        const listbox = event.target;
        const height = listbox.getBoundingClientRect().height;
        const maxScroll = listbox.scrollHeight - height; // Account for variation between browsers when it comes to calculation of margins/padding

        const buffer = 20;
        const bottomReached = listbox.scrollTop + buffer >= maxScroll;

        if (bottomReached) {
          this._events.dispatchEndReached();
        }
      }

      get listboxElement() {
        if (!this._listBoxElementCache) {
          this._listBoxElementCache = this.template.querySelector('[role="listbox"]');
        }

        return this._listBoxElementCache;
      }

      get computedUniqueElementId() {
        return this.inputId;
      }

      get computedUniqueDropdownElementId() {
        return getRealDOMId(this.template.querySelector('[data-dropdown-element]'));
      }

      get computedInputControls() {
        const ariaValues = [this.computedUniqueDropdownElementId];

        if (this.inputControlsElement) {
          ariaValues.push(this.inputAriaControlsId);
        }

        return normalizeAriaAttribute(ariaValues);
      }

      get i18n() {
        return i18n$1;
      }

      get computedDropdownTriggerClass() {
        return classSet('slds-combobox slds-dropdown-trigger slds-dropdown-trigger_click').add({
          'slds-is-open': this._dropdownVisible
        }).toString();
      }

      get computedDropdownClass() {
        const alignment = this.dropdownAlignment;
        return classSet('slds-listbox slds-listbox_vertical slds-dropdown slds-dropdown_fluid').add({
          'slds-dropdown_length-with-icon-10': this._dropdownHeight === 'standard',
          'slds-dropdown_length-with-icon-5': this._dropdownHeight === 'small',
          'slds-dropdown_left': alignment === 'left' || alignment === 'auto',
          'slds-dropdown_center': alignment === 'center',
          'slds-dropdown_right': alignment === 'right',
          'slds-dropdown_bottom': alignment === 'bottom-center',
          'slds-dropdown_bottom slds-dropdown_right slds-dropdown_bottom-right': alignment === 'bottom-right',
          'slds-dropdown_bottom slds-dropdown_left slds-dropdown_bottom-left': alignment === 'bottom-left'
        }).toString();
      }

      get computedInputClass() {
        const classes = classSet('slds-input slds-combobox__input');

        if (this.hasInputPill) {
          classes.add('slds-combobox__input-value');
        } else {
          classes.add({
            'slds-input-has-icon_group-right': this.showInputActivityIndicator
          });
        }

        return classes.toString();
      }

      get _shouldOpenDropDown() {
        // If items were empty and through a user interaction the dropdown should have opened, and if the
        // component still has the focus we'll open it on items update instead.
        return !this.dropdownDisabled && this._inputHasFocus && this._requestedDropdownOpen;
      }

      get dropdownDisabled() {
        return this.readOnly || this.disabled;
      }

      handleOptionClick(event) {
        if (event.target.hasAttribute('aria-selected')) {
          event.stopPropagation();
          event.preventDefault();
          this.selectOptionAndCloseDropdown(event.target);
        }
      }

      handleOptionMouseEnter(event) {
        if (event.target.hasAttribute('aria-selected')) {
          this.highlightOption(event.target);
        }
      }

      handleDropdownMouseLeave() {
        this.removeHighlight(); // This is to account for when a user makes a mousedown press on the dropdown and then leaves the dropdown
        // area, it would leave the dropdown open even though the focus would no longer be on the input

        if (!this._inputHasFocus) {
          this.closeDropdown();
        }
      }

      handleTriggerClick(event) {
        event.stopPropagation();
        this.allowBlur();

        if (this.dropdownDisabled) {
          return;
        }

        if (!this.hasInputPill) {
          // toggle dropdown only for readonly combobox, only open the dropdown otherwise
          // if it's not already opened.
          if (this._inputReadOnly) {
            if (this._dropdownVisible) {
              this.closeDropdown();
            } else {
              this.openDropdownIfNotEmpty();
            }
          } else {
            this.openDropdownIfNotEmpty();
          }

          this.inputElement.focus();
        }
      }

      handlePillKeyDown(event) {
        if (this.dropdownDisabled) {
          return;
        } // 'Del' is IE11 specific, remove once IE11 is no longer supported


        if (event.key === 'Delete' || event.key === 'Del') {
          this.handlePillRemove();
        }
      }

      handleInputKeyDown(event) {
        if (this.dropdownDisabled) {
          return;
        }

        if (this.hasInputPill) {
          this.handlePillKeyDown(event);
        } else {
          handleKeyDownOnInput({
            event,
            currentIndex: this.getCurrentHighlightedOptionIndex(),
            dropdownInterface: this._keyboardInterface
          });
        }
      }

      handleTextChange() {
        this._events.dispatchTextChange(this.inputElement.value);
      }

      handleFocus() {
        this._inputHasFocus = true;

        this._events.dispatchFocus();
      }

      handleInput() {
        // Do not dispatch any events if the pill is showing, this is specifically an IE11 problem,
        // which fires an 'input' event when the placeholder on an input is changed (which is what happens when
        // the pill is shown). The check can be removed when IE11 is no longer supported.
        if (!this.hasInputPill) {
          this._events.dispatchTextInput(this.inputElement.value);
        }
      }

      handleBlur() {
        this._inputHasFocus = false;

        if (this._cancelBlur) {
          return;
        }

        this.closeDropdown();

        this._events.dispatchBlur();
      }

      handleDropdownMouseDown(event) {
        const mainButton = 0;

        if (event.button === mainButton) {
          this.cancelBlur();
        }
      }

      handleDropdownMouseUp() {
        // We need this to make sure that if a scrollbar is being dragged with the mouse, upon release
        // of the drag we allow blur, otherwise the dropdown would not close on blur since we'd have cancel blur
        // set
        this.allowBlur();
      }

      highlightOption(option) {
        this.removeHighlight();

        if (option) {
          option.highlight();
          this._highlightedOptionElement = option;
          this._highlightedOptionElementId = option.getAttribute('data-item-id'); // active element is a component id getter works properly

          this._activeElementDomId = option.id;
        }

        this.synchronizeA11y();
      }

      highlightOptionAndScrollIntoView(optionElement) {
        if (this._selectableItems.length === 0 || !optionElement) {
          return;
        }

        this.highlightOption(optionElement);
        scrollIntoViewIfNeeded(optionElement, this.listboxElement);
      }

      removeHighlight() {
        const option = this._highlightedOptionElement;

        if (option) {
          option.removeHighlight();
          this._highlightedOptionElement = null;
          this._highlightedOptionElementId = null;
          this._activeElementDomId = null;
        }
      }

      selectOptionAndCloseDropdown(optionElement) {
        this.closeDropdown();
        this.inputElement.focus();
        const value = optionElement.getAttribute('data-value');

        this._events.dispatchSelect(value);
      }

      handleInputSelect(event) {
        event.stopPropagation();
      }

      openDropdownIfNotEmpty() {
        if (this._dropdownVisible) {
          // Already visible
          return;
        }

        const noOptions = !Array.isArray(this.items) || this.items.length === 0; // Do not dispatch the open request event if there already was a request to open

        if (noOptions && !this._requestedDropdownOpen) {
          // Dispatch dropdown open request
          this._events.dispatchDropdownOpenRequest();
        } // Do not open if there's nothing to show in the dropdown (eg. no options and no dropdown activity indicator)


        if (this.isDropdownEmpty) {
          // We use this attribute to flag whether an attempt has been made via user-interaction
          // to open the dropdown
          this._requestedDropdownOpen = true;
          return;
        }

        if (!this._hasDropdownOpened) {
          if (this._unprocessedItems) {
            this.updateItems(this._unprocessedItems);
          }

          this._hasDropdownOpened = true;
        }

        this._requestedDropdownOpen = false;
        this._dropdownVisible = true; // remove-next-line-for-c-namespace

        this.startDropdownAutoPositioning();
        this.highlightDefaultItem();

        this._events.dispatchDropdownOpen();
      }

      closeDropdown() {
        if (!this._dropdownVisible) {
          // Already closed
          return;
        } // remove-next-line-for-c-namespace


        this.stopDropdownPositioning();
        this.removeHighlight();
        this._dropdownVisible = false;
      }

      findOptionElementByIndex(index) {
        return this.template.querySelector(`[data-item-id="${this.itemId(index)}"]`);
      }

      allowBlur() {
        this._cancelBlur = false;
      }

      cancelBlur() {
        this._cancelBlur = true;
      }

      getCurrentHighlightedOptionIndex() {
        if (this._highlightedOptionElementId && this._highlightedOptionElementId.length > 0) {
          return this.itemIndexFromId(this._highlightedOptionElementId);
        }

        return -1;
      }

      get inputElement() {
        return this.template.querySelector('input');
      } // remove-next-line-for-c-namespace


      startDropdownAutoPositioning() {
        if (this.dropdownAlignment !== 'auto') {
          return;
        }

        if (!this._autoPosition) {
          this._autoPosition = new AutoPosition(this);
        }

        this._autoPosition.start({
          target: () => this.template.querySelector('input'),
          element: () => this.template.querySelector('div.slds-dropdown'),
          align: {
            horizontal: Direction.Left,
            vertical: Direction.Top
          },
          targetAlign: {
            horizontal: Direction.Left,
            vertical: Direction.Bottom
          },
          autoFlip: true,
          alignWidth: true,
          autoShrinkHeight: true,
          minHeight: this._selectableItems < 3 ? SMALL_MIN_HEIGHT : MEDIUM_MIN_HEIGHT
        });
      } // remove-next-line-for-c-namespace


      stopDropdownPositioning() {
        if (this._autoPosition) {
          this._autoPosition.stop();
        }
      }

      get hasInputPill() {
        return this.inputPill && Object.keys(this.inputPill).length > 0;
      }

      handlePillRemove() {
        this.inputElement.focus();

        this._events.dispatchPillRemove(this.inputPill);
      }

      get computedFormElementClass() {
        const hasIcon = this.hasInputPill && this.inputPill.iconName;
        return classSet('slds-combobox__form-element slds-input-has-icon').add({
          'slds-input-has-icon_right': !hasIcon,
          'slds-input-has-icon_left-right': hasIcon
        }).toString();
      }

      get computedAriaExpanded() {
        return this._dropdownVisible ? 'true' : 'false';
      }

      updateItems(items) {
        if (!items) {
          return;
        }

        assert(Array.isArray(items), '"items" must be an array');
        this._selectableItems = 0;
        this._highlightedItemIndex = 0;
        this._items = items.map(item => {
          if (item.items) {
            // This is a group
            const groupCopy = {
              label: item.label
            };
            groupCopy.items = item.items.map(groupItem => {
              return this.processItem(groupItem);
            });
            return groupCopy;
          }

          return this.processItem(item);
        });
      }

      highlightDefaultItem() {
        this.removeHighlight(); // eslint-disable-next-line @lwc/lwc/no-async-operation

        requestAnimationFrame(() => {
          this.highlightOptionAndScrollIntoView(this.findOptionElementByIndex(this._highlightedItemIndex));
        });
      }

      get isDropdownEmpty() {
        // If the activity indicator is showing then it's not empty
        return !this.showDropdownActivityIndicator && (!Array.isArray(this.items) || this.items.length === 0);
      }

      dropdownKeyboardInterface() {
        const that = this;
        return {
          getTotalOptions() {
            return that._selectableItems;
          },

          selectByIndex(index) {
            that.selectOptionAndCloseDropdown(that.findOptionElementByIndex(index));
          },

          highlightOptionWithIndex(index) {
            that.highlightOptionAndScrollIntoView(that.findOptionElementByIndex(index));
          },

          isInputReadOnly() {
            return that._inputReadOnly;
          },

          highlightOptionWithText(currentIndex, text) {
            // This only supports a flat structure, groups are not supported
            for (let index = currentIndex + 1; index < that._items.length; index++) {
              const option = that._items[index];

              if (option.selectable && option.text && option.text.toLowerCase().indexOf(text.toLowerCase()) === 0) {
                that.highlightOptionAndScrollIntoView(that.findOptionElementByIndex(index));
                return;
              }
            }

            for (let index = 0; index < currentIndex; index++) {
              const option = that._items[index];

              if (option.selectable && option.text && option.text.toLowerCase().indexOf(text.toLowerCase()) === 0) {
                that.highlightOptionAndScrollIntoView(that.findOptionElementByIndex(index));
                return;
              }
            }
          },

          isDropdownVisible() {
            return that._dropdownVisible;
          },

          openDropdownIfNotEmpty() {
            that.openDropdownIfNotEmpty();
          },

          closeDropdown() {
            that.closeDropdown();
          }

        };
      }

    }

    LightningBaseCombobox.delegatesFocus = true;

    lwc.registerDecorators(LightningBaseCombobox, {
      publicProps: {
        inputText: {
          config: 0
        },
        inputIconName: {
          config: 0
        },
        inputIconSize: {
          config: 0
        },
        inputIconAlternativeText: {
          config: 0
        },
        inputMaxlength: {
          config: 0
        },
        showInputActivityIndicator: {
          config: 0
        },
        required: {
          config: 0
        },
        dropdownAlignment: {
          config: 0
        },
        placeholder: {
          config: 0
        },
        inputLabel: {
          config: 0
        },
        name: {
          config: 0
        },
        inputPill: {
          config: 0
        },
        attributionLogoUrl: {
          config: 0
        },
        attributionLogoAssistiveText: {
          config: 0
        },
        inputControlsElement: {
          config: 3
        },
        inputDescribedByElements: {
          config: 3
        },
        inputLabelledByElement: {
          config: 3
        },
        dropdownHeight: {
          config: 3
        },
        showDropdownActivityIndicator: {
          config: 3
        },
        disabled: {
          config: 3
        },
        readOnly: {
          config: 3
        },
        variant: {
          config: 3
        },
        items: {
          config: 3
        }
      },
      publicMethods: ["highlightInputText", "focus", "focusAndOpenDropdownIfNotEmpty", "blur"],
      track: {
        _showDropdownActivityIndicator: 1,
        _items: 1,
        _disabled: 1,
        _dropdownVisible: 1,
        _hasDropdownOpened: 1,
        _highlightedOptionElementId: 1,
        _variant: 1,
        _dropdownHeight: 1,
        _readonly: 1,
        _logoLoaded: 1
      },
      fields: ["_inputDescribedBy", "_inputAriaControls", "_activeElementDomId"]
    });

    var _lightningBaseCombobox = lwc.registerComponent(LightningBaseCombobox, {
      tmpl: _tmpl$7
    });

    function scrollIntoViewIfNeeded(element, scrollingParent) {
      const parentRect = scrollingParent.getBoundingClientRect();
      const findMeRect = element.getBoundingClientRect();

      if (findMeRect.top < parentRect.top) {
        if (element.offsetTop + findMeRect.height < parentRect.height) {
          // If element fits by scrolling to the top, then do that
          scrollingParent.scrollTop = 0;
        } else {
          // Otherwise, top align the element
          scrollingParent.scrollTop = element.offsetTop;
        }
      } else if (findMeRect.bottom > parentRect.bottom) {
        // bottom align the element
        scrollingParent.scrollTop += findMeRect.bottom - parentRect.bottom;
      }
    }

    function tmpl$9($api, $cmp, $slotset, $ctx) {
      const {
        t: api_text,
        h: api_element,
        d: api_dynamic,
        c: api_custom_element,
        b: api_bind,
        gid: api_scoped_id
      } = $api;
      const {
        _m0,
        _m1,
        _m2,
        _m3,
        _m4
      } = $ctx;
      return [api_element("label", {
        className: $cmp.computedLabelClass,
        key: 1
      }, [$cmp.required ? api_element("abbr", {
        classMap: {
          "slds-required": true
        },
        attrs: {
          "title": $cmp.i18n.required
        },
        key: 0
      }, [api_text("*")]) : null, api_dynamic($cmp.label)]), $cmp._fieldLevelHelp ? api_custom_element("lightning-helptext", _lightningHelptext, {
        props: {
          "content": $cmp._fieldLevelHelp
        },
        key: 2
      }, []) : null, api_element("div", {
        classMap: {
          "slds-form-element__control": true
        },
        key: 4
      }, [api_custom_element("lightning-base-combobox", _lightningBaseCombobox, {
        props: {
          "name": $cmp.name,
          "required": $cmp.required,
          "disabled": $cmp.disabled,
          "placeholder": $cmp.placeholder,
          "items": $cmp._items,
          "inputText": $cmp._selectedLabel,
          "inputIconSize": "xx-small",
          "inputIconName": "utility:down",
          "showDropdownActivityIndicator": $cmp.spinnerActive,
          "dropdownAlignment": $cmp.dropdownAlignment
        },
        key: 3,
        on: {
          "dropdownopen": _m0 || ($ctx._m0 = api_bind($cmp.handleDropdownOpen)),
          "focus": _m1 || ($ctx._m1 = api_bind($cmp.handleFocus)),
          "blur": _m2 || ($ctx._m2 = api_bind($cmp.handleBlur)),
          "ready": _m3 || ($ctx._m3 = api_bind($cmp.handleComboboxReady)),
          "select": _m4 || ($ctx._m4 = api_bind($cmp.handleSelect))
        }
      }, [])]), $cmp._helpMessage ? api_element("div", {
        classMap: {
          "slds-form-element__help": true
        },
        attrs: {
          "id": api_scoped_id("help-text"),
          "data-help-text": true,
          "aria-live": "assertive"
        },
        key: 5
      }, [api_dynamic($cmp._helpMessage)]) : null];
    }

    var _tmpl$8 = lwc.registerTemplate(tmpl$9);
    tmpl$9.stylesheets = [];

    if (_implicitStylesheets$1) {
      tmpl$9.stylesheets.push.apply(tmpl$9.stylesheets, _implicitStylesheets$1);
    }
    tmpl$9.stylesheetTokens = {
      hostAttribute: "lightning-combobox_combobox-host",
      shadowAttribute: "lightning-combobox_combobox"
    };

    var labelRequired = 'required';

    var labelPlaceholder = 'Select an Option';

    const i18n$2 = {
      required: labelRequired,
      placeholder: labelPlaceholder
    };
    /**
     * A widget that provides an input field that is readonly,
     * accompanied by a dropdown list of selectable options.
     */

    class LightningCombobox extends lwc.LightningElement {
      constructor(...args) {
        super(...args);
        this._ariaLabelledBy = '';
        this._ariaDescribedBy = '';
        this._fieldLevelHelp = '';
        this._selectedLabel = '';
        this._disabled = false;
        this._readOnly = false;
        this._spinnerActive = false;
        this._required = false;
        this.label = void 0;
        this.dropdownAlignment = 'left';
        this.placeholder = i18n$2.placeholder;
        this.messageWhenValueMissing = void 0;
        this.name = void 0;
        this._items = [];
        this._variant = void 0;
        this._helpMessage = void 0;
        this._labelForId = void 0;
      }

      renderedCallback() {
        this.synchronizeA11y();
      }

      connectedCallback() {
        this.classList.add('slds-form-element');
        this.updateClassList();
        this.interactingState = new InteractingState();
        this.interactingState.onleave(() => this.showHelpMessageIfInvalid()); // The connected logic here is needed because at the point when @api setters
        // are called other values may not have been set yet, so it could happen that the 'value' was set, but 'options'
        // are not available, or that the 'options' and 'value' have been set but 'multiple' hasn't been set yet.
        // So here we make sure that we start processing the data only once the element is actually in DOM, which
        // should be beneficial for performance as well

        this.connected = true;
        this._items = this.generateItems(this.options);

        if (this.options && this.selectedValue !== undefined) {
          this.updateSelectedOptions();
        }
      }

      updateClassList() {
        classListMutation(this.classList, {
          'slds-form-element_stacked': this.variant === VARIANT.LABEL_STACKED,
          'slds-form-element_horizontal': this.variant === VARIANT.LABEL_INLINE
        });
      }

      disconnectedCallback() {
        this.connected = false;
      }
      /**
       * Reserved for internal use. Use the standard aria-labelledby instead. A space-separated list of element IDs that provide labels for the combobox.
       * @type {string}
       */


      get ariaLabelledBy() {
        return this._ariaLabelledBy;
      }

      set ariaLabelledBy(labelledBy) {
        this._ariaLabelledBy = labelledBy;
      }
      /**
       * Reserved for internal use. Use the standard aria-describedby instead. A space-separated list of element IDs that provide descriptive labels for the combobox.
       * @type {string}
       */


      get ariaDescribedBy() {
        return this._ariaDescribedBy;
      }

      set ariaDescribedBy(describedBy) {
        this._ariaDescribedBy = describedBy;
      }
      /**
       * Help text detailing the purpose and function of the combobox.
       * @type {string}
       */


      get fieldLevelHelp() {
        return this._fieldLevelHelp;
      }

      set fieldLevelHelp(value) {
        this._fieldLevelHelp = value;
      }
      /**
       * The variant changes the appearance of the combobox.
       * Accepted variants include standard, label-hidden, label-inline, and label-stacked.
       * This value defaults to standard.
       * Use label-hidden to hide the label but make it available to assistive technology.
       * Use label-inline to horizontally align the label and combobox.
       * Use label-stacked to place the label above the combobox.
       * @type {string}
       * @default standard
       */


      get variant() {
        return this._variant || VARIANT.STANDARD;
      }

      set variant(value) {
        this._variant = normalizeVariant$1(value);
        this.updateClassList();
      }
      /**
       * Specifies the value of an input element.
       * @type {object}
       */


      get value() {
        return this.selectedValue;
      }

      set value(newValue) {
        // There are some cases where this won't work correctly
        // See https://git.soma.salesforce.com/raptor/raptor/issues/457
        if (newValue !== this.selectedValue) {
          this.selectedValue = newValue;

          if (this.connected && this.options) {
            this.updateSelectedOptions();
          }
        }
      }
      /**
       * A list of options that are available for selection. Each option has the following attributes: label and value.
       * @type {object[]}
       * @required
       */


      get options() {
        return this._options || [];
      }

      set options(newValue) {
        this._options = normalizeArray(newValue);

        if (this.connected) {
          this._items = this.generateItems(this._options);
          this.updateSelectedOptions();
        }
      }
      /**
       * If present, the combobox is disabled and users cannot interact with it.
       * @type {boolean}
       * @default false
       */


      get disabled() {
        return this._disabled || this._readOnly || false;
      }

      set disabled(value) {
        this._disabled = normalizeBoolean(value);
      }
      /**
       * If present, the combobox is read-only.
       * A read-only combobox is also disabled.
       * @type {boolean}
       * @default false
       */


      get readOnly() {
        return this.disabled;
      }

      set readOnly(value) {
        this._readOnly = normalizeBoolean(value);
      }
      /**
       * If present, a value must be selected before the form can be submitted.
       * @type {boolean}
       * @default false
       */


      get required() {
        return this._required;
      }

      set required(value) {
        this._required = normalizeBoolean(value);
      }
      /**
       * If present, a spinner is displayed below the menu items to indicate loading activity.
       * @type {boolean}
       * @default false
       */


      get spinnerActive() {
        return this._spinnerActive;
      }

      set spinnerActive(value) {
        this._spinnerActive = normalizeBoolean(value);
      }
      /**
       * Sets focus on the combobox.
       */


      focus() {
        if (this.connected) {
          this.getBaseComboboxElement().focus();
        }
      }
      /**
       * Removes focus from the combobox.
       */


      blur() {
        if (this.connected) {
          this.getBaseComboboxElement().blur();
        }
      }
      /**
       * Represents the validity states that an element can be in, with respect to constraint validation.
       * @type {object}
       * @required
       */


      get validity() {
        return this._constraint.validity;
      }
      /**
       * Returns the valid attribute value (Boolean) on the ValidityState object.
       * @returns {boolean} Indicates whether the combobox has any validity errors.
       */


      checkValidity() {
        return this._constraint.checkValidity();
      }
      /**
       * Displays the error messages and returns false if the input is invalid.
       * If the input is valid, reportValidity() clears displayed error messages and returns true.
       * @returns {boolean} - The validity status of the combobox.
       */


      reportValidity() {
        return this._constraint.reportValidity(message => {
          this._helpMessage = message;
        });
      }
      /**
       * Sets a custom error message to be displayed when the combobox value is submitted.
       * @param {string} message - The string that describes the error. If message is an empty string, the error message
       * is reset.
       */


      setCustomValidity(message) {
        this._constraint.setCustomValidity(message);
      }
      /**
       * Shows the help message if the combobox is in an invalid state.
       */


      showHelpMessageIfInvalid() {
        this.reportValidity();
      }

      handleComboboxReady(e) {
        this._labelForId = e.detail.id;
      }

      synchronizeA11y() {
        synchronizeAttrs(this.template.querySelector('label'), {
          for: this._labelForId
        });
        const baseCombobox = this.template.querySelector('lightning-base-combobox');
        baseCombobox.inputLabelledByElement = this.ariaLabelledBy;
        baseCombobox.inputDescribedByElements = this.computedAriaDescribedBy;
      }

      get i18n() {
        return i18n$2;
      }

      get isLabelHidden() {
        return this.variant === VARIANT.LABEL_HIDDEN;
      }

      get computedLabelClass() {
        return classSet('slds-form-element__label').add({
          'slds-assistive-text': this.isLabelHidden
        }).toString();
      }

      get computedAriaDescribedBy() {
        const describedByElements = [];

        if (this._helpMessage) {
          const helpText = this.template.querySelector('[data-help-text]');
          describedByElements.push(helpText);
        }

        if (typeof this.ariaDescribedBy === 'string') {
          describedByElements.push(this.ariaDescribedBy);
        }

        return describedByElements;
      }

      handleSelect(event) {
        if (event.detail.value === this.selectedValue) {
          return;
        }

        this.selectedValue = event.detail.value;
        this.updateSelectedOptions(); // the change event needs to propagate to elements outside of the light-DOM, hence making it composed.

        this.dispatchEvent(new CustomEvent('change', {
          composed: true,
          bubbles: true,
          detail: {
            value: this.selectedValue
          }
        }));
      }

      handleFocus() {
        this.interactingState.enter();
        this.dispatchEvent(new CustomEvent('focus'));
      }

      handleBlur() {
        this.interactingState.leave();
        this.dispatchEvent(new CustomEvent('blur'));
      }

      handleDropdownOpen() {
        this.dispatchEvent(new CustomEvent('open'));
      }

      updateSelectedOptions() {
        this.updateSelectedLabelFromValue(this.selectedValue);
        this.markOptionSelectedFromValue(this.selectedValue);
      }

      markOptionSelectedFromValue(value) {
        if (this._items) {
          const selectedItem = this._items.find(item => item.value === value); // de-select previously selected item


          if (this._selectedItem) {
            this._selectedItem.iconName = undefined;
            this._selectedItem.highlight = false;
          }

          this._selectedItem = selectedItem;

          if (selectedItem) {
            selectedItem.iconName = 'utility:check';
            this._selectedItem.highlight = true;
          } // Make a shallow copy to trigger an update on the combobox


          this._items = this._items.slice();
        }
      }

      updateSelectedLabelFromValue(newValue) {
        this._selectedLabel = this.getOptionLabelByValue(newValue);
      }

      getOptionLabelByValue(value) {
        const foundOption = this.options.find(option => option.value === value);

        if (foundOption) {
          return foundOption.label;
        }

        return '';
      }

      generateItems(options) {
        return options.map(option => {
          return {
            type: 'option-inline',
            text: option.label,
            highlight: this.value === option.value,
            value: option.value
          };
        });
      }

      getBaseComboboxElement() {
        return this.template.querySelector('lightning-base-combobox');
      }

      get _constraint() {
        if (!this._constraintApi) {
          this._constraintApi = new FieldConstraintApi(() => this, {
            valueMissing: () => !this.disabled && this.required && isEmptyString(this.selectedValue)
          });
        }

        return this._constraintApi;
      }

    }

    LightningCombobox.delegatesFocus = true;

    lwc.registerDecorators(LightningCombobox, {
      publicProps: {
        label: {
          config: 0
        },
        dropdownAlignment: {
          config: 0
        },
        placeholder: {
          config: 0
        },
        messageWhenValueMissing: {
          config: 0
        },
        name: {
          config: 0
        },
        ariaLabelledBy: {
          config: 3
        },
        ariaDescribedBy: {
          config: 3
        },
        fieldLevelHelp: {
          config: 3
        },
        variant: {
          config: 3
        },
        value: {
          config: 3
        },
        options: {
          config: 3
        },
        disabled: {
          config: 3
        },
        readOnly: {
          config: 3
        },
        required: {
          config: 3
        },
        spinnerActive: {
          config: 3
        },
        validity: {
          config: 1
        }
      },
      publicMethods: ["focus", "blur", "checkValidity", "reportValidity", "setCustomValidity", "showHelpMessageIfInvalid"],
      track: {
        _ariaLabelledBy: 1,
        _ariaDescribedBy: 1,
        _fieldLevelHelp: 1,
        _selectedLabel: 1,
        _disabled: 1,
        _readOnly: 1,
        _spinnerActive: 1,
        _required: 1,
        _items: 1,
        _variant: 1,
        _helpMessage: 1
      },
      fields: ["_labelForId"]
    });

    var _lightningCombobox = lwc.registerComponent(LightningCombobox, {
      tmpl: _tmpl$8
    });

    function tmpl$a($api, $cmp, $slotset, $ctx) {
      const {
        t: api_text,
        h: api_element,
        d: api_dynamic,
        gid: api_scoped_id,
        c: api_custom_element,
        k: api_key,
        i: api_iterator,
        ti: api_tab_index,
        b: api_bind
      } = $api;
      const {
        _m0,
        _m1,
        _m2
      } = $ctx;
      return [api_element("label", {
        className: $cmp.computedLabelClass,
        attrs: {
          "for": `${api_scoped_id("select")}`
        },
        key: 1
      }, [$cmp.required ? api_element("abbr", {
        classMap: {
          "slds-required": true
        },
        attrs: {
          "title": $cmp.i18n.required
        },
        key: 0
      }, [api_text("*")]) : null, api_dynamic($cmp.label)]), $cmp.fieldLevelHelp ? api_custom_element("lightning-helptext", _lightningHelptext, {
        props: {
          "content": $cmp.fieldLevelHelp
        },
        key: 2
      }, []) : null, api_element("div", {
        classMap: {
          "slds-form-element__control": true
        },
        key: 6
      }, [api_element("div", {
        classMap: {
          "slds-select_container": true
        },
        key: 5
      }, [api_element("select", {
        classMap: {
          "slds-select": true
        },
        attrs: {
          "id": api_scoped_id("select"),
          "name": $cmp.name,
          "size": $cmp.size,
          "accesskey": $cmp.accessKey,
          "tabindex": api_tab_index($cmp.tabIndex)
        },
        props: {
          "disabled": $cmp.disabled,
          "multiple": $cmp.multiple
        },
        key: 4,
        on: {
          "focus": _m0 || ($ctx._m0 = api_bind($cmp.handleFocus)),
          "blur": _m1 || ($ctx._m1 = api_bind($cmp.handleBlur)),
          "change": _m2 || ($ctx._m2 = api_bind($cmp.handleChange))
        }
      }, api_iterator($cmp.options, function (option) {
        return api_element("option", {
          attrs: {
            "value": option.value
          },
          key: api_key(3, option.value)
        }, [api_dynamic(option.label)]);
      }))])]), $cmp.errorMessage ? api_element("div", {
        classMap: {
          "slds-form-element__help": true
        },
        attrs: {
          "id": api_scoped_id("help-message"),
          "data-help-message": true,
          "aria-live": "assertive"
        },
        key: 7
      }, [api_dynamic($cmp.errorMessage)]) : null];
    }

    var _tmpl$9 = lwc.registerTemplate(tmpl$a);
    tmpl$a.stylesheets = [];
    tmpl$a.stylesheetTokens = {
      hostAttribute: "lightning-primitiveSelect_primitiveSelect-host",
      shadowAttribute: "lightning-primitiveSelect_primitiveSelect"
    };

    const i18n$3 = {
      required: labelRequired
    };
    const {
      reduce: ArrayReduce
    } = Array.prototype;

    class LightningPrimitiveSelect extends lwc.LightningElement {
      constructor(...args) {
        super(...args);
        this._errorMessage = '';
        this._options = [];
        this._selectedValue = void 0;
        this._variant = void 0;
        this._required = false;
        this._disabled = false;
        this._multiple = false;
        this._fieldLevelHelp = void 0;
        this._size = void 0;
        this._ariaDescribedBy = void 0;
        this._tabIndex = void 0;
        this.label = void 0;
        this.name = void 0;
        this.messageWhenValueMissing = void 0;
        this.accessKey = void 0;
      }

      set fieldLevelHelp(value) {
        this._fieldLevelHelp = value;
      }

      get fieldLevelHelp() {
        return this._fieldLevelHelp;
      }

      set variant(value) {
        this._variant = normalizeVariant$1(value);
        this.updateClassList();
      }

      get variant() {
        return this._variant || VARIANT.STANDARD;
      }

      set multiple(value) {
        this._multiple = normalizeBoolean(value);
      }

      get multiple() {
        return this._multiple;
      }

      set size(newValue) {
        this._size = newValue;
      }

      get size() {
        if (!this.multiple) {
          return null;
        }

        if (this._size === undefined) {
          return '4';
        }

        return this._size;
      }

      set required(value) {
        this._required = normalizeBoolean(value);
      }

      get required() {
        return this._required;
      }

      set disabled(value) {
        this._disabled = normalizeBoolean(value);
      }

      get disabled() {
        return this._disabled;
      }

      set value(newValue) {
        this._selectedValue = newValue;

        if (this.connected && newValue) {
          this.selectOptionsByValue(newValue);
        }
      }

      get value() {
        return this._selectedValue;
      }

      set options(newValue) {
        this._options = newValue;

        if (this.connected && newValue) {
          this.selectOptionsByValue(this._selectedValue);
        }
      }

      get options() {
        return this._options;
      }

      get tabIndex() {
        return this._tabIndex;
      }

      set tabIndex(newValue) {
        this._tabIndex = newValue;
      }

      connectedCallback() {
        this.classList.add('slds-form-element');
        this.updateClassList();
        this.interactingState = new InteractingState();
        this.interactingState.onleave(() => this.showHelpMessageIfInvalid());
        this.connected = true;
      }

      updateClassList() {
        classListMutation(this.classList, {
          'slds-form-element_stacked': this.variant === VARIANT.LABEL_STACKED,
          'slds-form-element_horizontal': this.variant === VARIANT.LABEL_INLINE
        });
      }

      renderedCallback() {
        if (this.options && this._selectedValue !== undefined) {
          this.selectOptionsByValue(this._selectedValue);
        }
      }

      disconnectedCallback() {
        this.connected = false;
      }

      focus() {
        if (this.connected) {
          this.getElement.focus();
        }
      }

      blur() {
        if (this.connected) {
          this.getElement.blur();
        }
      }

      get validity() {
        const missing = !this.disabled && this.required && (this._selectedValue == null || this._selectedValue === '' || this._selectedValue.length === 0);
        return buildSyntheticValidity({
          valueMissing: missing,
          customError: this.customErrorMessage != null && this.customErrorMessage !== ''
        });
      }

      checkValidity() {
        const isValid = this.validity.valid;

        if (!isValid) {
          this.dispatchEvent(new CustomEvent('invalid', {
            cancellable: true
          }));
        }

        return isValid;
      }

      reportValidity() {
        this.showHelpMessageIfInvalid();
        return this.checkValidity();
      }

      setCustomValidity(message) {
        this.customErrorMessage = message;
      }

      showHelpMessageIfInvalid() {
        const validity = this.validity;

        if (validity.valid) {
          this._errorMessage = '';
          this.classList.remove('slds-has-error');
          this.removeAriaDescribedBy();
        } else {
          this.classList.add('slds-has-error');
          this._errorMessage = getErrorMessage(validity, {
            valueMissing: this.messageWhenValueMissing,
            customError: this.customErrorMessage
          });
          this.setAriaDescribedBy(this.computedUniqueErrorMessageElementId);
        }
      }

      get i18n() {
        return i18n$3;
      }

      get errorMessage() {
        return this._errorMessage;
      }

      get getElement() {
        return this.template.querySelector('select');
      }

      get computedUniqueErrorMessageElementId() {
        return getRealDOMId(this.template.querySelector('[data-help-message]'));
      }

      get isLabelHidden() {
        return this.variant === VARIANT.LABEL_HIDDEN;
      }

      get computedLabelClass() {
        return classSet('slds-form-element__label').add({
          'slds-assistive-text': this.isLabelHidden
        }).toString();
      }

      get computedAriaDescribedBy() {
        return this._ariaDescribedBy;
      }

      handleChange(event) {
        event.preventDefault();
        event.stopPropagation();
        this._selectedValue = this.getSelectedOptionValues();
        this.dispatchChangeEvent();
      }

      handleFocus() {
        this.interactingState.enter();
        this.dispatchEvent(new CustomEvent('focus'));
      }

      handleBlur() {
        this.interactingState.leave();
        this.dispatchEvent(new CustomEvent('blur'));
      }

      dispatchChangeEvent() {
        this.dispatchEvent(new CustomEvent('change', {
          composed: true,
          bubbles: true,
          detail: {
            value: this._selectedValue
          }
        }));
      }

      selectOptionsByValue(optionValue) {
        if (this.multiple) {
          if (Array.isArray(optionValue)) {
            const options = this.template.querySelectorAll('option');
            options.forEach(option => {
              option.selected = optionValue.includes(option.value);
            });
          }
        } else {
          this.getElement.value = optionValue;
        }
      }

      getSelectedOptionValues() {
        if (this.multiple) {
          const options = this.template.querySelectorAll('option');
          return ArrayReduce.call(options, (selectedValues, option) => {
            if (option.selected) {
              selectedValues.push(option.value);
            }

            return selectedValues;
          }, []);
        }

        return this.getElement.value;
      }

      setAriaDescribedBy(val) {
        this.getElement.setAttribute('aria-describedby', val);
      }

      removeAriaDescribedBy() {
        this.getElement.removeAttribute('aria-describedby');
      }

    }

    lwc.registerDecorators(LightningPrimitiveSelect, {
      publicProps: {
        label: {
          config: 0
        },
        name: {
          config: 0
        },
        messageWhenValueMissing: {
          config: 0
        },
        accessKey: {
          config: 0
        },
        fieldLevelHelp: {
          config: 3
        },
        variant: {
          config: 3
        },
        multiple: {
          config: 3
        },
        size: {
          config: 3
        },
        required: {
          config: 3
        },
        disabled: {
          config: 3
        },
        value: {
          config: 3
        },
        options: {
          config: 3
        },
        tabIndex: {
          config: 3
        },
        validity: {
          config: 1
        }
      },
      publicMethods: ["focus", "blur", "checkValidity", "reportValidity", "setCustomValidity", "showHelpMessageIfInvalid"],
      track: {
        _errorMessage: 1,
        _options: 1,
        _selectedValue: 1,
        _variant: 1,
        _required: 1,
        _disabled: 1,
        _multiple: 1,
        _fieldLevelHelp: 1,
        _size: 1,
        _ariaDescribedBy: 1,
        _tabIndex: 1
      }
    });

    var _lightningPrimitiveSelect = lwc.registerComponent(LightningPrimitiveSelect, {
      tmpl: _tmpl$9
    });

    function tmpl$b($api, $cmp, $slotset, $ctx) {
      const {
        d: api_dynamic,
        gid: api_scoped_id,
        h: api_element,
        b: api_bind
      } = $api;
      const {
        _m0,
        _m1,
        _m2,
        _m3,
        _m4,
        _m5,
        _m6,
        _m7,
        _m8,
        _m9
      } = $ctx;
      return [api_element("div", {
        classMap: {
          "slds-color-picker__custom": true
        },
        key: 31
      }, [api_element("p", {
        classMap: {
          "slds-assistive-text": true
        },
        attrs: {
          "id": api_scoped_id("color-picker-instructions")
        },
        key: 0
      }, [api_dynamic($cmp.i18n.colorPickerInstructions)]), api_element("div", {
        classMap: {
          "slds-m-bottom_small": true
        },
        style: $cmp.gradientStyle,
        attrs: {
          "data-id": "color-gradient"
        },
        key: 4,
        on: {
          "mousedown": _m3 || ($ctx._m3 = api_bind($cmp.handleMouseDown))
        }
      }, [api_element("canvas", {
        attrs: {
          "width": $cmp.canvasRect.x,
          "height": $cmp.canvasRect.y
        },
        key: 1
      }, []), api_element("a", {
        classMap: {
          "slds-color-picker__range-indicator": true
        },
        styleMap: {
          "position": "absolute",
          "display": "inline"
        },
        attrs: {
          "data-id": "color-anchor",
          "href": "javascript:void(0)",
          "aria-live": "assertive",
          "aria-atomic": "true",
          "aria-describedby": `${api_scoped_id("color-picker-instructions")}`
        },
        key: 3,
        on: {
          "mousedrag": _m0 || ($ctx._m0 = api_bind($cmp.handlePreventDefault)),
          "mousedown": _m1 || ($ctx._m1 = api_bind($cmp.handlePreventDefault)),
          "keydown": _m2 || ($ctx._m2 = api_bind($cmp.handleKeydown))
        }
      }, [api_element("span", {
        classMap: {
          "slds-assistive-text": true
        },
        key: 2
      }, [api_dynamic($cmp.computedSaturationAndBrightness)])])]), api_element("div", {
        classMap: {
          "slds-color-picker__hue-and-preview": true
        },
        key: 9
      }, [api_element("label", {
        classMap: {
          "slds-assistive-text": true
        },
        attrs: {
          "for": `${api_scoped_id("rainbow")}`
        },
        key: 5
      }, [api_dynamic($cmp.i18n.hueInput)]), api_element("input", {
        classMap: {
          "slds-color-picker__hue-slider": true
        },
        attrs: {
          "data-id": "hue-slider",
          "type": "range",
          "min": "0",
          "max": "360",
          "id": api_scoped_id("rainbow")
        },
        props: {
          "value": $cmp._hueValue
        },
        key: 6,
        on: {
          "mousedown": _m4 || ($ctx._m4 = api_bind($cmp.handleDrag)),
          "change": _m5 || ($ctx._m5 = api_bind($cmp.onChange))
        }
      }, []), api_element("span", {
        classMap: {
          "slds-swatch": true
        },
        style: $cmp.thumbnailStyle,
        attrs: {
          "data-id": "color-preview"
        },
        key: 8
      }, [api_element("span", {
        classMap: {
          "slds-assistive-text": true
        },
        attrs: {
          "aria-hidden": "true"
        },
        key: 7
      }, [api_dynamic($cmp._hex)])])]), api_element("div", {
        classMap: {
          "slds-color-picker__custom-inputs": true
        },
        key: 29
      }, [api_element("div", {
        classMap: {
          "slds-form-element": true,
          "slds-color-picker__input-custom-hex": true
        },
        key: 13
      }, [api_element("label", {
        classMap: {
          "slds-form-element__label": true
        },
        attrs: {
          "for": `${api_scoped_id("input")}`
        },
        key: 10
      }, [api_dynamic($cmp.i18n.hexLabel)]), api_element("div", {
        classMap: {
          "slds-form-element__control": true
        },
        key: 12
      }, [api_element("input", {
        classMap: {
          "slds-input": true
        },
        attrs: {
          "data-primary-input": true,
          "type": "text",
          "id": api_scoped_id("input"),
          "minlength": "4",
          "maxlength": "7",
          "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
          "placeholder": "#FFFFFF"
        },
        props: {
          "value": $cmp._hex
        },
        key: 11,
        on: {
          "change": _m6 || ($ctx._m6 = api_bind($cmp.handleHexChange))
        }
      }, [])])]), api_element("div", {
        classMap: {
          "slds-form-element": true
        },
        key: 18
      }, [api_element("label", {
        classMap: {
          "slds-form-element__label": true
        },
        attrs: {
          "for": `${api_scoped_id("red")}`
        },
        key: 15
      }, [api_element("abbr", {
        attrs: {
          "title": $cmp.i18n.redAbbr
        },
        key: 14
      }, [api_dynamic($cmp.i18n.rInput)])]), api_element("div", {
        classMap: {
          "slds-form-element__control": true
        },
        key: 17
      }, [api_element("input", {
        classMap: {
          "slds-input": true
        },
        attrs: {
          "type": "text",
          "id": api_scoped_id("red"),
          "data-color-name": "red",
          "placeholder": "255"
        },
        props: {
          "value": $cmp._rgb.red
        },
        key: 16,
        on: {
          "change": _m7 || ($ctx._m7 = api_bind($cmp.handleRgbChange))
        }
      }, [])])]), api_element("div", {
        classMap: {
          "slds-form-element": true
        },
        key: 23
      }, [api_element("label", {
        classMap: {
          "slds-form-element__label": true
        },
        attrs: {
          "for": `${api_scoped_id("green")}`
        },
        key: 20
      }, [api_element("abbr", {
        attrs: {
          "title": $cmp.i18n.greenAbbr
        },
        key: 19
      }, [api_dynamic($cmp.i18n.gInput)])]), api_element("div", {
        classMap: {
          "slds-form-element__control": true
        },
        key: 22
      }, [api_element("input", {
        classMap: {
          "slds-input": true
        },
        attrs: {
          "type": "text",
          "id": api_scoped_id("green"),
          "data-color-name": "green",
          "placeholder": "255"
        },
        props: {
          "value": $cmp._rgb.green
        },
        key: 21,
        on: {
          "change": _m8 || ($ctx._m8 = api_bind($cmp.handleRgbChange))
        }
      }, [])])]), api_element("div", {
        classMap: {
          "slds-form-element": true
        },
        key: 28
      }, [api_element("label", {
        classMap: {
          "slds-form-element__label": true
        },
        attrs: {
          "for": `${api_scoped_id("blue")}`
        },
        key: 25
      }, [api_element("abbr", {
        attrs: {
          "title": $cmp.i18n.blueAbbr
        },
        key: 24
      }, [api_dynamic($cmp.i18n.bInput)])]), api_element("div", {
        classMap: {
          "slds-form-element__control": true
        },
        key: 27
      }, [api_element("input", {
        classMap: {
          "slds-input": true
        },
        attrs: {
          "type": "text",
          "id": api_scoped_id("blue"),
          "data-color-name": "blue",
          "placeholder": "255"
        },
        props: {
          "value": $cmp._rgb.blue
        },
        key: 26,
        on: {
          "change": _m9 || ($ctx._m9 = api_bind($cmp.handleRgbChange))
        }
      }, [])])])]), $cmp._errorMessage ? api_element("div", {
        classMap: {
          "slds-form-element__help": true
        },
        attrs: {
          "aria-live": "assertive"
        },
        key: 30
      }, [api_dynamic($cmp._errorMessage)]) : null])];
    }

    var _tmpl$a = lwc.registerTemplate(tmpl$b);
    tmpl$b.stylesheets = [];
    tmpl$b.stylesheetTokens = {
      hostAttribute: "lightning-colorPickerCustom_colorPickerCustom-host",
      shadowAttribute: "lightning-colorPickerCustom_colorPickerCustom"
    };

    var labelBInput = 'B';

    var labelBlueAbbr = 'Blue';

    var labelColorPickerInstructions = 'Use arrow keys to select a saturation and brightness, on an x and y axis.';

    var labelErrorMessage = 'Enter a valid hexadecimal value.';

    var labelGInput = 'G';

    var labelGreenAbbr = 'Green';

    var labelHexLabel = 'Hex';

    var labelHueInput = 'Select Hue';

    var labelRInput = 'R';

    var labelRedAbbr = 'Red';

    function fullHexValue(hex) {
      if (Array.isArray(hex) && hex.length > 0) {
        hex = hex[0];
      }

      if (hex && hex.length <= 6 && hex.charAt(0) !== '#') {
        hex = '#' + hex;
      }

      const isInputValid = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(hex);

      if (!isInputValid) {
        hex = '#000000';
      } // Converting 3 digit hex color to 6 digit hex color


      if (hex.length === 4) {
        hex = '#' + hex.charAt(1) + hex.charAt(1) + hex.charAt(2) + hex.charAt(2) + hex.charAt(3) + hex.charAt(3);
      }

      return hex;
    }
    function hexToRgb(hex) {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(fullHexValue(hex));

      if (!result) {
        return null;
      }

      return {
        red: parseInt(result[1], 16),
        green: parseInt(result[2], 16),
        blue: parseInt(result[3], 16)
      };
    }
    function rgbToHex(rgb) {
      const r = rgb.red;
      const g = rgb.green;
      const b = rgb.blue;
      const bin = r << 16 | g << 8 | b;
      return function (hex) {
        return new Array(7 - hex.length).join('0') + hex;
      }(bin.toString(16).toUpperCase());
    }
    function rgbToHsl(rgb) {
      const r1 = rgb.red / 255;
      const g1 = rgb.green / 255;
      const b1 = rgb.blue / 255;
      const maxColor = Math.max(r1, g1, b1);
      const minColor = Math.min(r1, g1, b1); // Calculate L:

      let L = (maxColor + minColor) / 2;
      let S = 0;
      let H = 0;

      if (maxColor !== minColor) {
        // Calculate S:
        if (L < 0.5) {
          S = (maxColor - minColor) / (maxColor + minColor);
        } else {
          S = (maxColor - minColor) / (2.0 - maxColor - minColor);
        } // Calculate H:


        if (r1 === maxColor) {
          const x = g1 - b1,
                y = maxColor - minColor;
          H = x / y;
        } else if (g1 === maxColor) {
          const x = b1 - r1,
                y = maxColor - minColor,
                z = x / y;
          H = 2.0 + z;
        } else {
          const x = r1 - g1,
                y = maxColor - minColor,
                z = x / y;
          H = 4.0 + z;
        }
      }

      L *= 100;
      S *= 100;
      H *= 60;

      if (H < 0) {
        H += 360;
      }

      const result = {
        hue: H,
        saturation: S,
        lightness: L
      };
      return result;
    }
    function rgbToPosition(rgb, canvas) {
      const hsv = rgbToHsv(rgb);
      const saturation = hsv.saturation / 100,
            brightness = hsv.brightness / 100;
      const x = canvas.x * saturation;
      const y = canvas.y * (1 - brightness);
      return {
        x,
        y
      };
    }
    function rgbToHsv(rgb) {
      const r = rgb.red / 255;
      const g = rgb.green / 255;
      const b = rgb.blue / 255;
      const max = Math.max(r, g, b),
            min = Math.min(r, g, b);
      const d = max - min,
            s = max === 0 ? 0 : d / max,
            v = max;
      let h, x, y;

      if (max === min) {
        h = 0;
      } else {
        switch (max) {
          case r:
            x = g - b;
            y = x / d;
            h = y + (g < b ? 6 : 0);
            break;

          case g:
            x = b - r;
            y = x / d;
            h = y + 2;
            break;

          case b:
            x = r - g;
            y = x / d;
            h = y + 4;
            break;
        }

        h /= 6;
      }

      const result = {
        hue: h * 360,
        saturation: s * 100,
        brightness: v * 100
      };
      return result;
    }

    const i18n$4 = {
      bInput: labelBInput,
      blueAbbr: labelBlueAbbr,
      colorPickerInstructions: labelColorPickerInstructions,
      errorMessage: labelErrorMessage,
      gInput: labelGInput,
      greenAbbr: labelGreenAbbr,
      hexLabel: labelHexLabel,
      hueInput: labelHueInput,
      rInput: labelRInput,
      redAbbr: labelRedAbbr
    };
    const CANVAS = {
      x: 198,
      y: 80
    };

    class LightningColorPickerCustom extends lwc.LightningElement {
      constructor() {
        super();
        this._hueValue = null;
        this._rgb = {
          red: '86',
          green: '121',
          blue: '192'
        };
        this._hex = '#5679C0';
        this._errorMessage = null;
        this._currentColor = null;
        this._initialized = false;
        this.uniqueId = generateUniqueId();
      }

      renderedCallback() {
        if (!this._initialized) {
          // eslint-disable-next-line @lwc/lwc/no-async-operation
          requestAnimationFrame(() => {
            this.focus();
          });
          this.gradient();
          this.handleUpdateAnchor();
          this._initialized = true;
        }
      }

      get currentColor() {
        return this._currentColor;
      }

      set currentColor(value) {
        const fullHex = fullHexValue(value);
        this._currentColor = value;
        this._hex = fullHex;
        this._rgb = hexToRgb(fullHex);
      }

      focus() {
        this.anchorElement.focus();
      }

      get i18n() {
        return i18n$4;
      }

      get thumbnailStyle() {
        return `background: ${this._hex || 'hsl(220, 46%, 55%)'};`;
      }

      get gradientStyle() {
        return `background: ${this._hex || 'rgb(0, 85, 255)'}; position: relative;`;
      }

      get canvasRect() {
        return CANVAS;
      }

      get anchorElement() {
        return this.template.querySelector('*[data-id="color-anchor"]');
      }

      get thumbnailElement() {
        return this.template.querySelector('*[data-id="color-preview"]');
      }

      get gradientElement() {
        return this.template.querySelector('*[data-id="color-gradient"]');
      }

      get computedSaturationAndBrightness() {
        const rgb = this._rgb;
        const saturation = rgbToHsv(rgb).saturation || 0;
        const brightness = rgbToHsv(rgb).brightness || 0;
        return `Saturation: ${saturation.toFixed()}%. Brightness: ${brightness.toFixed()}%.`;
      }

      handlePreventDefault(event) {
        event.preventDefault();
      }

      selectColor(event) {
        this.dispatchEvent( // eslint-disable-next-line lightning-global/no-custom-event-bubbling
        new CustomEvent('updatecolor', {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {
            color: event.target.innerText
          }
        }));
      }

      handleMouseDown(event) {
        event.preventDefault();
        this.onMouseDrag(event, true);
      }

      handleDrag(event) {
        this.onMouseDrag(event, false);
      }

      onChange() {
        this.rainbowCursor();
      }

      parseAndLimit(value) {
        let out = value;

        if (!value || parseInt(value, 10) < 0 || isNaN(value)) {
          out = 0;
        } else if (parseInt(value, 10) > 255) {
          out = 255;
        }

        return out;
      }

      handleRgbChange(event) {
        const target = event.currentTarget;
        const value = this.parseAndLimit(target.value); // Fix for no rerender on second bad value attempt

        target.value = value;
        const color = target.getAttribute('data-color-name');

        if (color === 'red') {
          this._rgb.red = value;
        } else if (color === 'green') {
          this._rgb.green = value;
        } else if (color === 'blue') {
          this._rgb.blue = value;
        }

        const rgb = this._rgb;
        const hue = rgbToHsl(rgb).hue;
        const position = this.rgbToPosition(rgb);
        const selectedColor = `#${rgbToHex(rgb)}`;
        this.updateRainbow(hue);
        this.setCanvasColor(hue);
        this.setCanvasCursor(position.x, position.y);
        this.updateSelectedColor(selectedColor);
      }

      handleHexChange(event) {
        const isInputValid = event.srcElement.validity.valid;

        if (isInputValid) {
          const selectedColor = fullHexValue(event.target.value);
          this.classList.remove('slds-has-error');
          this._errorMessage = null;
          const rgb = hexToRgb(selectedColor);
          this._rgb = rgb;
          const hue = rgbToHsl(rgb).hue;
          const position = this.rgbToPosition(rgb);
          this.updateRainbow(hue);
          this.setCanvasColor(hue);
          this.setCanvasCursor(position.x, position.y);
          this.updateSelectedColor(selectedColor);
        } else {
          event.srcElement.classList.add('slds-has-error');
          this._errorMessage = getErrorMessage(event.srcElement.validity, {
            patternMismatch: this.i18n.errorMessage
          });
        }
      }

      updateSelectedColor(selectedColor) {
        this.template.querySelector(`[data-primary-input]`).classList.remove('slds-has-error');
        this._errorMessage = null;
        this._hex = selectedColor;
        this.dispatchEvent( // eslint-disable-next-line lightning-global/no-custom-event-bubbling
        new CustomEvent('updateselectedcolor', {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {
            color: selectedColor
          }
        }));
      }

      onMouseDrag(event, isGradientCursor) {
        const that = this;
        let drag = false;

        if (isGradientCursor) {
          this.getColorFromGradient(event);
        } else {
          this.rainbowCursor();
        }

        if (this._mousedown && this._mousemove && this._mouseup) {
          return;
        }

        that._mousedown = function () {
          drag = true;
          this._cursorActive = true;
        };

        that._mouseup = function () {
          drag = false;
          this._cursorActive = false;
          window.removeEventListener('mousedown', that._mousedown);
          window.removeEventListener('mouseup', that._mouseup);
          window.removeEventListener('mousemove', that._mousemove);
          that._mousedown = null;
          that._mouseup = null;
          that._mousemove = null;
        };

        that._mousemove = function (evt) {
          if (drag && isGradientCursor) {
            that.getColorFromGradient(evt);
          } else if (drag) {
            that.rainbowCursor();
          }
        };

        window.addEventListener('mousedown', that._mousedown);
        window.addEventListener('mouseup', that._mouseup);
        window.addEventListener('mousemove', that._mousemove);
      }

      gradient() {
        const hue = rgbToHsl(this._rgb).hue;
        this.canvasContext();
        this.setCanvasColor(hue);
        this.updateRainbow(hue);
      }

      getColorFromGradient(event) {
        let cursorPosition;

        if (event.type === 'keydown' && event.key !== 'Tab') {
          cursorPosition = this.gradientCursorPositionFromKeydown(event);
        } else if (event.type === 'mousedown' || event.type === 'mousemove') {
          cursorPosition = this.gradientCursorPosition(event);
        } else {
          return;
        }

        const x = cursorPosition.x;
        const y = cursorPosition.y; // Get the current HUE value and update the canvas & cursor

        this.setCanvasColor(this._hueValue); // set color from gradient

        this.setRGBValues(x, y);
      }

      rainbowCursor() {
        const rainbow = this.template.querySelector('*[data-id="hue-slider"]');
        const position = this._cachePosition || this.rgbToPosition(this._rgb);
        this.setCanvasColor(rainbow.value);
        this.setRGBValues(position.x, position.y);
        this.updateRainbow(rainbow.value);
      }

      updateRainbow(hue) {
        this._hueValue = hue;
      }

      handleUpdateAnchor() {
        const position = this._cachePosition || this.rgbToPosition(this._rgb);
        const anchor = this.anchorElement;
        const offset = anchor.offsetWidth / 2;
        const x = position.x - offset + 5;
        const y = position.y - offset - 5;
        const xPercent = x / this._canvas.width * 100;
        const yPercent = y / this._canvas.height * 100;
        anchor.style.left = `${xPercent}%`;
        anchor.style.top = `${yPercent}%`;
      }

      gradientCursorPosition(event) {
        const canvas = this._canvas;
        const gradientCanvas = canvas.getBoundingClientRect();
        let x = event.clientX - gradientCanvas.left;
        let y = event.clientY - gradientCanvas.top;

        if (x > gradientCanvas.width) {
          x = gradientCanvas.width - 1;
        }

        if (x < 0) {
          x = 0;
        }

        if (y > gradientCanvas.height) {
          y = gradientCanvas.height;
        }

        if (y < 0) {
          y = 0;
        }
        /*
         * Caching the position x & y in the component so that we can use it when moving the rainbow slider
         * instead of calculating the position of x & y each time.
         */


        this._cachePosition = {
          x,
          y
        };
        return {
          x,
          y
        };
      }

      gradientCursorPositionFromKeydown(event) {
        event.preventDefault();
        const canvas = this._canvas;
        const gradientCanvas = canvas.getBoundingClientRect();
        const keyCode = event.keyCode;
        let x, y;

        if (!this._cachePosition) {
          this._cachePosition = this.rgbToPosition(this._rgb);
        }

        const positionMap = {};
        positionMap[keyCodes.left] = {
          x: -1,
          y: 0
        };
        positionMap[keyCodes.up] = {
          x: 0,
          y: -1
        };
        positionMap[keyCodes.right] = {
          x: +1,
          y: 0
        };
        positionMap[keyCodes.down] = {
          x: 0,
          y: +1
        };
        const transform = positionMap[keyCode] ? positionMap[keyCode] : {
          x: 0,
          y: 0
        };
        x = this._cachePosition.x + transform.x;
        y = this._cachePosition.y + transform.y;

        if (x > gradientCanvas.width) {
          x = gradientCanvas.width - 1;
        }

        if (x < 0) {
          x = 0;
        }

        if (y > gradientCanvas.height) {
          y = gradientCanvas.height;
        }

        if (y < 0) {
          y = 0;
        }
        /*
         * Caching the position x & y in the component so that we can use it when moving the rainbow slider
         * instead of calculating the position of x & y each time.
         */


        this._cachePosition = {
          x,
          y
        };
        return {
          x,
          y
        };
      }

      setRGBValues(x, y) {
        const ctx = this._canvasCtx;
        const imageData = ctx.getImageData(x, y, 1, 1).data;
        const rgb = {
          red: imageData[0],
          green: imageData[1],
          blue: imageData[2]
        };
        const color = `#${rgbToHex(rgb)}`;
        this._rgb = rgb;
        this.updateSelectedColor(color);
        this.handleUpdateAnchor();
      }

      setCanvasColor(hue) {
        const ctx = this._canvasCtx; // don't map the gradient onto extreme left and right to make extremes have their max values

        const white = ctx.createLinearGradient(1, 0, this.canvasRect.x - 1, 0);
        white.addColorStop(0, 'rgb(255,255,255)');
        white.addColorStop(1, 'hsl(' + hue + ', 100%, 50%)');
        ctx.fillStyle = white;
        ctx.fillRect(0, 0, this.canvasRect.x, this.canvasRect.y); // starting y is the first line to avoid blending the black into the hue, thus
        // making extreme values unselectable

        const black = ctx.createLinearGradient(0, 1, 0, this.canvasRect.y);
        black.addColorStop(0, 'rgba(0,0,0,0)');
        black.addColorStop(1, 'rgb(0,0,0)');
        ctx.fillStyle = black;
        ctx.fillRect(0, 0, this.canvasRect.x, this.canvasRect.y);
      }

      setCanvasCursor(x, y) {
        const position = {
          x,
          y
        };
        const anchor = this.anchorElement;
        const offset = anchor.offsetWidth / 2;
        x = position.x - offset + 5;
        y = position.y - offset - 5;
        const xPercent = x / this._canvas.width * 100;
        const yPercent = y / this._canvas.height * 100;
        anchor.style.left = `${xPercent}%`;
        anchor.style.top = `${yPercent}%`;
      }

      canvasContext() {
        this._canvas = this.template.querySelector('canvas');
        this._canvasCtx = this._canvas.getContext('2d');
        this._cursorActive = false;
      }

      handleKeydown(event) {
        this.getColorFromGradient(event);
      }

      rgbToPosition(rgb) {
        return rgbToPosition(rgb, this.canvasRect);
      }

    }

    lwc.registerDecorators(LightningColorPickerCustom, {
      publicProps: {
        currentColor: {
          config: 3
        }
      },
      publicMethods: ["focus"],
      track: {
        _hueValue: 1,
        _rgb: 1,
        _hex: 1,
        _errorMessage: 1,
        _currentColor: 1
      },
      fields: ["_initialized"]
    });

    var _lightningColorPickerCustom = lwc.registerComponent(LightningColorPickerCustom, {
      tmpl: _tmpl$a
    });

    function tmpl$c($api, $cmp, $slotset, $ctx) {
      const {
        c: api_custom_element,
        gid: api_scoped_id,
        h: api_element,
        d: api_dynamic,
        b: api_bind
      } = $api;
      const {
        _m0,
        _m1,
        _m2,
        _m3
      } = $ctx;
      return [api_element("section", {
        classMap: {
          "slds-popover": true,
          "slds-color-picker__selector": true,
          "slds-show": true,
          "slds-is-absolute": true
        },
        attrs: {
          "role": "dialog",
          "aria-label": "Choose a color",
          "aria-describedby": `${api_scoped_id("dialog-body-id")}`
        },
        key: 6,
        on: {
          "updateselectedcolor": _m2 || ($ctx._m2 = api_bind($cmp.handleUpdateSelectedColor)),
          "keydown": _m3 || ($ctx._m3 = api_bind($cmp.handleKeydown))
        }
      }, [api_element("div", {
        classMap: {
          "slds-popover__body": true
        },
        attrs: {
          "id": api_scoped_id("dialog-body-id")
        },
        key: 1
      }, [api_custom_element("lightning-color-picker-custom", _lightningColorPickerCustom, {
        props: {
          "currentColor": $cmp.currentColor
        },
        key: 0
      }, [])]), api_element("footer", {
        classMap: {
          "slds-popover__footer": true
        },
        key: 5
      }, [api_element("div", {
        classMap: {
          "slds-color-picker__selector-footer": true
        },
        key: 4
      }, [api_element("button", {
        classMap: {
          "slds-button": true,
          "slds-button_neutral": true
        },
        attrs: {
          "name": "cancel"
        },
        key: 2,
        on: {
          "click": _m0 || ($ctx._m0 = api_bind($cmp.handleCancelClick))
        }
      }, [api_dynamic($cmp.i18n.cancelButton)]), api_element("button", {
        classMap: {
          "slds-button": true,
          "slds-button_brand": true
        },
        attrs: {
          "name": "done"
        },
        key: 3,
        on: {
          "click": _m1 || ($ctx._m1 = api_bind($cmp.handleDoneClick))
        }
      }, [api_dynamic($cmp.i18n.doneButton)])])])])];
    }

    var _tmpl$b = lwc.registerTemplate(tmpl$c);
    tmpl$c.stylesheets = [];
    tmpl$c.stylesheetTokens = {
      hostAttribute: "lightning-colorPickerPanel_colorPickerPanel-host",
      shadowAttribute: "lightning-colorPickerPanel_colorPickerPanel"
    };

    var labelCancelButton = 'Cancel';

    var labelCustomTab = 'Custom';

    var labelDefaultTab = 'Default';

    var labelDoneButton = 'Done';

    const i18n$5 = {
      cancelButton: labelCancelButton,
      customTab: labelCustomTab,
      defaultTab: labelDefaultTab,
      doneButton: labelDoneButton
    };
    const DEFAULT_COLOR = '#000000';

    class LightningColorPickerPanel extends lwc.LightningElement {
      constructor(...args) {
        super(...args);
        this.currentColor = void 0;
        this._isCustomTabActive = false;
        this._selectedColor = null;
      }

      connectedCallback() {
        this._selectedColor = this.currentColor || DEFAULT_COLOR;
      }

      get i18n() {
        return i18n$5;
      }

      get computedClassDefault() {
        return classSet({
          'slds-tabs_default__item': true,
          'slds-is-active': !this._isCustomTabActive
        }).toString();
      }

      get computedClassCustom() {
        return classSet({
          'slds-tabs_default__item': true,
          'slds-is-active': this._isCustomTabActive
        }).toString();
      }

      get ariaSelectedDefault() {
        return !this._isCustomTabActive.toString();
      }

      get ariaSelectedCustom() {
        return this._isCustomTabActive.toString();
      }

      handleTabChange(event) {
        event.preventDefault();
        const tabElement = event.currentTarget;

        if (tabElement.classList.contains('slds-is-active')) {
          return;
        }

        this._isCustomTabActive = tabElement.title !== i18n$5.defaultTab;
      }

      handleUpdateSelectedColor(event) {
        this._selectedColor = event.detail.color;
      }

      dispatchUpdateColorEventWithColor(color) {
        this.dispatchEvent( // eslint-disable-next-line lightning-global/no-custom-event-bubbling
        new CustomEvent('updatecolor', {
          composed: true,
          bubbles: true,
          detail: {
            color
          }
        }));
      }

      handleDoneClick() {
        this.dispatchUpdateColorEventWithColor(this._selectedColor);
      }

      handleCancelClick() {
        this.dispatchUpdateColorEventWithColor(this.currentColor);
      }

      handleKeydown(event) {
        if (event.keyCode === keyCodes.escape) {
          event.preventDefault();
          this.dispatchUpdateColorEventWithColor(this.currentColor);
        } else if (event.shiftKey && event.keyCode === keyCodes.tab && event.srcElement.dataset.id === 'color-anchor') {
          event.preventDefault();
          this.template.querySelector('button[name="done"]').focus();
        } else if (!event.shiftKey && event.keyCode === keyCodes.tab && event.srcElement.name === 'done') {
          event.preventDefault();
          this.template.querySelector('lightning-color-picker-custom').focus();
        }
      }

    }

    lwc.registerDecorators(LightningColorPickerPanel, {
      publicProps: {
        currentColor: {
          config: 0
        }
      },
      track: {
        _isCustomTabActive: 1,
        _selectedColor: 1
      }
    });

    var _lightningColorPickerPanel = lwc.registerComponent(LightningColorPickerPanel, {
      tmpl: _tmpl$b
    });

    function tmpl$d($api, $cmp, $slotset, $ctx) {
      const {
        d: api_dynamic,
        h: api_element,
        c: api_custom_element,
        b: api_bind
      } = $api;
      const {
        _m0,
        _m1
      } = $ctx;
      return [api_element("button", {
        classMap: {
          "slds-button": true,
          "slds-color-picker__summary-button": true,
          "slds-button_icon": true,
          "slds-button_icon-more": true
        },
        attrs: {
          "type": "button"
        },
        props: {
          "disabled": $cmp.disabled
        },
        key: 4,
        on: {
          "click": _m0 || ($ctx._m0 = api_bind($cmp.handleColorPickerToggleClick))
        }
      }, [api_element("span", {
        classMap: {
          "slds-swatch": true
        },
        style: $cmp.colorInputStyle,
        attrs: {
          "data-id": "thumbnail"
        },
        key: 1
      }, [api_element("span", {
        classMap: {
          "slds-assistive-text": true
        },
        key: 0
      }, [api_dynamic($cmp.i18n.a11yTriggerText)])]), api_custom_element("lightning-primitive-icon", _lightningPrimitiveIcon, {
        props: {
          "iconName": "utility:down",
          "svgClass": "slds-button__icon slds-button__icon_small",
          "variant": "bare"
        },
        key: 2
      }, []), api_element("span", {
        classMap: {
          "slds-assistive-text": true,
          "a11y-color-value": true
        },
        key: 3
      }, [api_dynamic($cmp.value)])]), $cmp._isColorPickerPanelOpen ? api_custom_element("lightning-color-picker-panel", _lightningColorPickerPanel, {
        classMap: {
          "color-picker-panel": true
        },
        props: {
          "currentColor": $cmp.value
        },
        key: 5,
        on: {
          "updatecolor": _m1 || ($ctx._m1 = api_bind($cmp.handleUpdateColorEvent))
        }
      }, []) : null];
    }

    var _tmpl$c = lwc.registerTemplate(tmpl$d);
    tmpl$d.stylesheets = [];
    tmpl$d.stylesheetTokens = {
      hostAttribute: "lightning-primitiveColorpickerButton_primitiveColorpickerButton-host",
      shadowAttribute: "lightning-primitiveColorpickerButton_primitiveColorpickerButton"
    };

    var labelA11yTriggerText = 'Choose a color. Current color: ';

    const i18n$6 = {
      a11yTriggerText: labelA11yTriggerText
    };

    class PrimitiveColorpickerButton extends lwc.LightningElement {
      constructor(...args) {
        super(...args);
        this._isColorPickerPanelOpen = false;
        this._value = '';
        this._disabled = false;
      }

      get value() {
        return this._value;
      }

      set value(value) {
        this._value = value;
      }
      /**
       * If present, the input field is disabled and users cannot interact with it.
       * @type {boolean}
       * @default false
       */


      get disabled() {
        return this._disabled;
      }

      set disabled(value) {
        this._disabled = normalizeBoolean(value);
      }

      focus() {
        const button = this.template.querySelector('button');
        return button && button.focus();
      }

      blur() {
        const button = this.template.querySelector('button');
        return button && button.blur();
      }

      get colorInputStyle() {
        return `background: ${this.value || '#5679C0'};`;
      }

      handleColorPickerToggleClick(event) {
        event.preventDefault();
        this._isColorPickerPanelOpen = !this._isColorPickerPanelOpen;

        if (this._isColorPickerPanelOpen) {
          this.startColorPickerPositioning();
        } else {
          this.stopColorPickerPositioning();
        }
      }

      startColorPickerPositioning() {
        if (!this._autoPosition) {
          this._autoPosition = new AutoPosition(this);
        }

        this._autoPosition.start({
          target: () => this.template.querySelector('button.slds-color-picker__summary-button'),
          element: () => this.template.querySelector('lightning-color-picker-panel').shadowRoot.querySelector('section'),
          align: {
            horizontal: Direction.Left,
            vertical: Direction.Top
          },
          targetAlign: {
            horizontal: Direction.Left,
            vertical: Direction.Bottom
          },
          autoFlip: true
        });
      }

      stopColorPickerPositioning() {
        if (this._autoPosition) {
          this._autoPosition.stop();
        }
      }

      handleUpdateColorEvent(event) {
        event.stopPropagation();
        const detail = event.detail;
        this._isColorPickerPanelOpen = false;
        this.stopColorPickerPositioning();
        this.dispatchEvent(new CustomEvent('change', {
          detail
        }));
      }

      get i18n() {
        return i18n$6;
      }

    }

    PrimitiveColorpickerButton.delegatesFocus = true;

    lwc.registerDecorators(PrimitiveColorpickerButton, {
      publicProps: {
        value: {
          config: 3
        },
        disabled: {
          config: 3
        }
      },
      publicMethods: ["focus", "blur"],
      track: {
        _isColorPickerPanelOpen: 1,
        _value: 1,
        _disabled: 1
      }
    });

    var _lightningPrimitiveColorpickerButton = lwc.registerComponent(PrimitiveColorpickerButton, {
      tmpl: _tmpl$c
    });

    function stylesheet$4(hostSelector, shadowSelector, nativeShadow) {
      return "\n" + (nativeShadow ? (":host {display: block;}") : (hostSelector + " {display: block;}")) + "\n[dir=\"rtl\"] input[type=\"tel\"]" + shadowSelector + " {direction: ltr;text-align: right;unicode-bidi: embed;}\n";
    }
    var _implicitStylesheets$4 = [stylesheet$4];

    function stylesheet$5(hostSelector, shadowSelector, nativeShadow) {
      return "slot" + shadowSelector + " {display: inline-block;}\n";
    }
    var _implicitStylesheets$5 = [stylesheet$5];

    function tmpl$e($api, $cmp, $slotset, $ctx) {
      const {
        s: api_slot
      } = $api;
      return [api_slot("", {
        key: 0
      }, [], $slotset)];
    }

    var _tmpl$d = lwc.registerTemplate(tmpl$e);
    tmpl$e.slots = [""];
    tmpl$e.stylesheets = [];

    if (_implicitStylesheets$5) {
      tmpl$e.stylesheets.push.apply(tmpl$e.stylesheets, _implicitStylesheets$5);
    }
    tmpl$e.stylesheetTokens = {
      hostAttribute: "lightning-primitiveFileDroppableZone_primitiveFileDroppableZone-host",
      shadowAttribute: "lightning-primitiveFileDroppableZone_primitiveFileDroppableZone"
    };

    class LightningPrimitiveFileDroppableZone extends lwc.LightningElement {
      get disabled() {
        return this._disabled || false;
      }

      set disabled(value) {
        this._disabled = normalizeBoolean(value);
      }

      get multiple() {
        return this._multiple || false;
      }

      set multiple(value) {
        this._multiple = normalizeBoolean(value);
      }

      constructor() {
        super();
        this._disabled = void 0;
        this._multiple = void 0;
        this.template.addEventListener('dragover', this.allowDrop.bind(this));
        this.template.addEventListener('dragleave', this.handleDragLeave.bind(this));
        this.template.addEventListener('drop', this.handleOnDrop.bind(this));
      }

      connectedCallback() {
        this.classList.add('slds-file-selector__dropzone');
      }

      setDragOver(dragOver) {
        this.classList.toggle('slds-has-drag-over', dragOver);
      }

      handleDragLeave() {
        this.setDragOver(false);
      }

      handleOnDrop(event) {
        event.preventDefault();
        this.setDragOver(false);

        if (this.disabled) {
          event.stopPropagation();
          return;
        }

        if (!this.meetsMultipleCriteria(event)) {
          event.stopPropagation();
        }
      }

      allowDrop(event) {
        event.preventDefault();

        if (!this.disabled) {
          this.setDragOver(true);
        }
      }

      meetsMultipleCriteria(dragEvent) {
        const files = dragEvent.dataTransfer.files;
        return !(files.length > 1 && !this.multiple);
      }

    }

    lwc.registerDecorators(LightningPrimitiveFileDroppableZone, {
      publicProps: {
        disabled: {
          config: 3
        },
        multiple: {
          config: 3
        }
      },
      track: {
        _disabled: 1,
        _multiple: 1
      }
    });

    var _lightningPrimitiveFileDroppableZone = lwc.registerComponent(LightningPrimitiveFileDroppableZone, {
      tmpl: _tmpl$d
    });

    function tmpl$f($api, $cmp, $slotset, $ctx) {
      const {
        c: api_custom_element,
        d: api_dynamic,
        h: api_element,
        b: api_bind
      } = $api;
      const {
        _m0,
        _m1
      } = $ctx;
      return [api_element("button", {
        className: $cmp.computedButtonClass,
        attrs: {
          "name": $cmp.name,
          "title": $cmp.computedTitle,
          "accesskey": $cmp.computedAccessKey,
          "type": $cmp.normalizedType,
          "value": $cmp.value,
          "aria-label": $cmp.computedAriaLabel,
          "aria-expanded": $cmp.computedAriaExpanded,
          "aria-live": $cmp.computedAriaLive,
          "aria-atomic": $cmp.computedAriaAtomic
        },
        props: {
          "disabled": $cmp.disabled
        },
        key: 2,
        on: {
          "focus": _m0 || ($ctx._m0 = api_bind($cmp.handleFocus)),
          "blur": _m1 || ($ctx._m1 = api_bind($cmp.handleBlur))
        }
      }, [api_custom_element("lightning-primitive-icon", _lightningPrimitiveIcon, {
        props: {
          "iconName": $cmp.iconName,
          "svgClass": $cmp.computedIconClass,
          "variant": "bare"
        },
        key: 0
      }, []), $cmp.alternativeText ? api_element("span", {
        classMap: {
          "slds-assistive-text": true
        },
        key: 1
      }, [api_dynamic($cmp.alternativeText)]) : null])];
    }

    var _tmpl$e = lwc.registerTemplate(tmpl$f);
    tmpl$f.stylesheets = [];
    tmpl$f.stylesheetTokens = {
      hostAttribute: "lightning-buttonIcon_buttonIcon-host",
      shadowAttribute: "lightning-buttonIcon_buttonIcon"
    };

    function tmpl$g($api, $cmp, $slotset, $ctx) {
      return [];
    }

    var _tmpl$f = lwc.registerTemplate(tmpl$g);
    tmpl$g.stylesheets = [];
    tmpl$g.stylesheetTokens = {
      hostAttribute: "lightning-primitiveButton_primitiveButton-host",
      shadowAttribute: "lightning-primitiveButton_primitiveButton"
    };

    const ARIA_DESCRIBEDBY$2 = 'aria-describedby';
    const ARIA_CONTROLS$1 = 'aria-controls';
    /**
     * Primitive for button, buttonIcon and buttonIconStateful
     */

    class LightningPrimitiveButton extends lwc.LightningElement {
      /**
       * Specifies whether this button should be displayed in a disabled state.
       * Disabled buttons can't be clicked. This value defaults to false.
       *
       * @type {boolean}
       * @default false
       */
      get disabled() {
        return this.state.disabled;
      }

      set disabled(value) {
        this.state.disabled = normalizeBoolean(value);
      }

      set accessKey(value) {
        this.state.accesskey = value;
      }
      /**
       * Specifies a shortcut key to activate or focus an element.
       *
       * @type {string}
       */


      get accessKey() {
        return this.state.accesskey;
      }

      get computedAccessKey() {
        return this.state.accesskey;
      }
      /**
       * Displays tooltip text when the mouse cursor moves over the element.
       *
       * @type {string}
       */


      get title() {
        return this.state.title;
      }

      set title(value) {
        this.state.title = value;
      }
      /**
       * Label describing the button to assistive technologies.
       *
       * @type {string}
       */


      get ariaLabel() {
        return this.state.ariaLabel;
      }

      set ariaLabel(value) {
        this.state.ariaLabel = value;
      }

      get computedAriaLabel() {
        return this.state.ariaLabel;
      }
      /**
       * A space-separated list of element IDs that provide descriptive labels for the button.
       *
       * @type {string}
       */


      get ariaDescribedBy() {
        return this.state.ariaDescribedBy;
      }

      set ariaDescribedBy(value) {
        this.state.ariaDescribedBy = value;
        const button = this.template.querySelector('button');
        synchronizeAttrs(button, {
          [ARIA_DESCRIBEDBY$2]: value
        });
      }
      /**
       * A space-separated list of element IDs whose presence or content is controlled by this button.
       *
       * @type {string}
       */


      get ariaControls() {
        return this.state.ariaControls;
      }

      set ariaControls(value) {
        this.state.ariaControls = value;
        const button = this.template.querySelector('button');
        synchronizeAttrs(button, {
          [ARIA_CONTROLS$1]: value
        });
      }
      /**
       * Indicates whether an element that the button controls is expanded or collapsed.
       * Valid values are 'true' or 'false'. The default value is undefined.
       *
       * @type {string}
       * @default undefined
       */


      get ariaExpanded() {
        return this.state.ariaExpanded;
      }

      set ariaExpanded(value) {
        this.state.ariaExpanded = normalizeString(value, {
          fallbackValue: undefined,
          validValues: ['true', 'false']
        });
      }

      get computedAriaExpanded() {
        return this.state.ariaExpanded || null;
      }

      set ariaLive(value) {
        this.state.ariaLive = value;
      }
      /**
       * Indicates that the button can be updated when it doesn't have focus.
       * Valid values are 'polite', 'assertive', or 'off'. The polite value causes assistive
       * technologies to notify users of updates at a low priority, generally without interrupting.
       * The assertive value causes assistive technologies to notify users immediately,
       * potentially clearing queued speech updates.
       *
       * @type {string}
       */


      get ariaLive() {
        return this.state.ariaLive;
      }

      get computedAriaLive() {
        return this.state.ariaLive;
      }
      /**
       * Indicates whether assistive technologies present all, or only parts of,
       * the changed region. Valid values are 'true' or 'false'.
       *
       * @type {string}
       */


      get ariaAtomic() {
        return this.state.ariaAtomic || null;
      }

      set ariaAtomic(value) {
        this.state.ariaAtomic = normalizeString(value, {
          fallbackValue: undefined,
          validValues: ['true', 'false']
        });
      }

      get computedAriaAtomic() {
        return this.state.ariaAtomic || null;
      }
      /**
       * Sets focus on the element.
       */


      focus() {}

      constructor() {
        super(); // Workaround for an IE11 bug where click handlers on button ancestors
        // receive the click event even if the button element has the `disabled`
        // attribute set.

        this._initialized = false;
        this.state = {
          accesskey: null,
          ariaAtomic: null,
          ariaControls: null,
          ariaDescribedBy: null,
          ariaExpanded: null,
          ariaLabel: null,
          ariaLive: null,
          disabled: false
        };

        if (isIE11) {
          this.template.addEventListener('click', event => {
            if (this.disabled) {
              event.stopImmediatePropagation();
            }
          });
        }
      }

      renderedCallback() {
        if (!this._initialized) {
          const button = this.template.querySelector('button');
          synchronizeAttrs(button, {
            [ARIA_CONTROLS$1]: this.state.ariaControls,
            [ARIA_DESCRIBEDBY$2]: this.state.ariaDescribedBy
          });
          this._initialized = true;
        }
      }

    }

    lwc.registerDecorators(LightningPrimitiveButton, {
      publicProps: {
        disabled: {
          config: 3
        },
        accessKey: {
          config: 3
        },
        title: {
          config: 3
        },
        ariaLabel: {
          config: 3
        },
        ariaDescribedBy: {
          config: 3
        },
        ariaControls: {
          config: 3
        },
        ariaExpanded: {
          config: 3
        },
        ariaLive: {
          config: 3
        },
        ariaAtomic: {
          config: 3
        }
      },
      publicMethods: ["focus"],
      track: {
        state: 1
      },
      fields: ["_initialized"]
    });

    var LightningPrimitiveButton$1 = lwc.registerComponent(LightningPrimitiveButton, {
      tmpl: _tmpl$f
    });

    const DEFAULT_SIZE = 'medium';
    const DEFAULT_VARIANT = 'border';
    const DEFAULT_TYPE = 'button';
    /**
     * An icon-only HTML button.
     */

    class LightningButtonIcon extends LightningPrimitiveButton$1 {
      constructor(...args) {
        super(...args);
        this.name = void 0;
        this.value = void 0;
        this.variant = DEFAULT_VARIANT;
        this.iconName = void 0;
        this.iconClass = void 0;
        this.size = DEFAULT_SIZE;
        this.type = DEFAULT_TYPE;
        this.alternativeText = void 0;
        this._order = null;
        this._tooltip = null;
      }

      // remove-next-line-for-c-namespace

      /**
       * Text to display when the user mouses over or focuses on the button.
       * The tooltip is auto-positioned relative to the button and screen space.
       * @type {string}
       * @param {string} value - The plain text string for the tooltip
       */
      set tooltip(value) {
        if (this._tooltip) {
          this._tooltip.value = value;
        } else if (value) {
          // Note that because the tooltip target is a child element it may not be present in the
          // dom during initial rendering.
          this._tooltip = new Tooltip(value, {
            root: this,
            target: () => this.template.querySelector('button')
          });

          this._tooltip.initialize();
        }
      } // remove-next-line-for-c-namespace


      get tooltip() {
        return this._tooltip ? this._tooltip.value : undefined;
      }

      // this is there because raptor currently doesnt support inheritance
      render() {
        return _tmpl$e;
      }

      get computedTitle() {
        return this.state.title || this.alternativeText || '';
      }

      get normalizedVariant() {
        return normalizeString(this.variant, {
          fallbackValue: DEFAULT_VARIANT,
          validValues: ['bare', 'brand', 'container', 'border', 'border-filled', 'bare-inverse', 'border-inverse']
        });
      }

      get normalizedType() {
        return normalizeString(this.type, {
          fallbackValue: DEFAULT_TYPE,
          validValues: ['button', 'reset', 'submit']
        });
      }

      get normalizedSize() {
        return normalizeString(this.size, {
          fallbackValue: DEFAULT_SIZE,
          validValues: ['xx-small', 'x-small', 'small', 'medium', 'large']
        });
      }

      getVariantBase() {
        return this.normalizedVariant.split('-')[0];
      }

      getVariantModifier() {
        return this.normalizedVariant.split('-')[1] || '';
      }

      get computedButtonClass() {
        const {
          normalizedSize,
          normalizedVariant
        } = this;
        const isBare = this.getVariantBase(normalizedSize) === 'bare';
        const classes = classSet('slds-button');
        classes.add('slds-button_icon');

        if (!isBare) {
          // If the variant is not bare, then size the button instead of the icon
          switch (normalizedSize) {
            case 'small':
              classes.add('slds-button_icon-small');
              break;

            case 'x-small':
              classes.add('slds-button_icon-x-small');
              break;

            case 'xx-small':
              classes.add('slds-button_icon-xx-small');
              break;

            case 'large':
              // There is no `large` modifier for buttons so we should drop down one size to `medium`
              console.warn(`<lightning-button-icon> The non-bare variants of buttonIcon do not support a size value of "large". Supported values include "xx-small", "x-small", "small", and "medium". Falling back to size value "medium".`);
          }
        }

        return classes.add({
          'slds-button_icon-bare': isBare,
          'slds-button_icon-container': normalizedVariant === 'container',
          'slds-button_icon-border': normalizedVariant === 'border',
          'slds-button_icon-border-filled': normalizedVariant === 'border-filled',
          'slds-button_icon-border-inverse': normalizedVariant === 'border-inverse',
          'slds-button_icon-inverse': normalizedVariant === 'bare-inverse',
          'slds-button_icon-brand': normalizedVariant === 'brand',
          'slds-button_first': this._order === 'first',
          'slds-button_middle': this._order === 'middle',
          'slds-button_last': this._order === 'last'
        }).toString();
      }

      get computedIconClass() {
        const {
          normalizedSize,
          normalizedVariant
        } = this;
        const isBare = this.getVariantBase(normalizedVariant) === 'bare';
        const iconClass = this.iconClass || '';
        const classes = classSet('slds-button__icon');
        classes.add(iconClass);

        if (isBare) {
          // If the variant is bare, then size the icon instead of the button
          switch (normalizedSize) {
            case 'large':
              classes.add('slds-button__icon_large');
              break;

            case 'small':
              classes.add('slds-button__icon_small');
              break;

            case 'xx-small':
              // There is no `xx-small` modifier for bare so we should drop down one size to `x-small`
              console.warn(`<lightning-button-icon> The bare variant of buttonIcon does not support a size value of "xx-small". Supported values include "x-small", "small", "medium", and "large". The default is "medium".`);

            /* falls through */

            case 'x-small':
              classes.add('slds-button__icon_x-small');
              break;
          }
        }

        if (this.getVariantModifier(normalizedVariant) === 'inverse') {
          classes.add('slds-button_icon-inverse');
        }

        return classes.toString();
      }

      handleFocus() {
        this.dispatchEvent(new CustomEvent('focus'));
      }

      handleBlur() {
        this.dispatchEvent(new CustomEvent('blur'));
      }
      /**
       * Sets focus on the button.
       */


      focus() {
        if (this._connected) {
          this.template.querySelector('button').focus();
        }
      }
      /**
       * Clicks the button.
       */


      click() {
        if (this._connected) {
          this.template.querySelector('button').click();
        }
      }
      /**
       * {Function} setOrder - Sets the order value of the button when in the context of a button-group or other ordered component
       * @param {String} order -  The order string (first, middle, last)
       */


      setOrder(order) {
        this._order = order;
      }
      /**
       * Once we are connected, we fire a register event so the button-group (or other) component can register
       * the buttons.
       */


      connectedCallback() {
        this._connected = true;
        const privatebuttonregister = new CustomEvent('privatebuttonregister', {
          bubbles: true,
          detail: {
            callbacks: {
              setOrder: this.setOrder.bind(this),
              setDeRegistrationCallback: deRegistrationCallback => {
                this._deRegistrationCallback = deRegistrationCallback;
              }
            }
          }
        });
        this.dispatchEvent(privatebuttonregister);
      } // remove-next-line-for-c-namespace


      renderedCallback() {
        // initialize aria attributes in primitiveButton
        super.renderedCallback();

        if (this._tooltip && !this._tooltip.initialized) {
          this._tooltip.initialize();
        }
      }

      disconnectedCallback() {
        this._connected = false;

        if (this._deRegistrationCallback) {
          this._deRegistrationCallback();
        }
      }

    }

    LightningButtonIcon.delegatesFocus = true;

    lwc.registerDecorators(LightningButtonIcon, {
      publicProps: {
        name: {
          config: 0
        },
        value: {
          config: 0
        },
        variant: {
          config: 0
        },
        iconName: {
          config: 0
        },
        iconClass: {
          config: 0
        },
        size: {
          config: 0
        },
        type: {
          config: 0
        },
        alternativeText: {
          config: 0
        },
        tooltip: {
          config: 3
        }
      },
      publicMethods: ["focus", "click"],
      track: {
        _order: 1
      },
      fields: ["_tooltip"]
    });

    var _lightningButtonIcon = lwc.registerComponent(LightningButtonIcon, {
      tmpl: _tmpl$e
    });

    function stylesheet$6(hostSelector, shadowSelector, nativeShadow) {
      return "[dir=\"rtl\"] .slds-dropdown_left" + shadowSelector + " {left: 0;right: auto;}\n";
    }
    var _implicitStylesheets$6 = [stylesheet$6];

    function tmpl$h($api, $cmp, $slotset, $ctx) {
      const {
        ti: api_tab_index,
        b: api_bind,
        h: api_element,
        s: api_slot
      } = $api;
      const {
        _m0,
        _m1,
        _m2,
        _m3
      } = $ctx;
      return [api_element("div", {
        attrs: {
          "tabindex": api_tab_index($cmp._bookendTabIndex),
          "data-start": true
        },
        key: 0,
        on: {
          "focus": _m0 || ($ctx._m0 = api_bind($cmp._focusLastElement))
        }
      }, []), api_slot("", {
        key: 1,
        on: {
          "focusin": _m1 || ($ctx._m1 = api_bind($cmp._handleFocusIn)),
          "focusout": _m2 || ($ctx._m2 = api_bind($cmp._handleFocusOut))
        }
      }, [], $slotset), api_element("div", {
        attrs: {
          "tabindex": api_tab_index($cmp._bookendTabIndex),
          "data-end": true
        },
        key: 2,
        on: {
          "focus": _m3 || ($ctx._m3 = api_bind($cmp._focusFirstElement))
        }
      }, [])];
    }

    var _tmpl$g = lwc.registerTemplate(tmpl$h);
    tmpl$h.slots = [""];
    tmpl$h.stylesheets = [];
    tmpl$h.stylesheetTokens = {
      hostAttribute: "lightning-focusTrap_focusTrap-host",
      shadowAttribute: "lightning-focusTrap_focusTrap"
    };

    /**
     *
     * Returns all tabbable elements within a containing element. Tabbable elements are:
     * a visible/non-disabled element that has a tabIndex of 0 and is not within a custom
     * element with tabindex attribute of “-1" on it.
     *
     * @param {Element} container The element to search for tabbable element.
     * @returns {Array} Tabbable elements.
     */
    function findAllTabbableElements(container) {
      const result = [];
      traverseActiveTreeRecursively(container, element => {
        // Remove the try/catch once https://github.com/salesforce/lwc/issues/1421 is fixed
        try {
          if (isTabbable({
            element,
            rootContainer: container
          })) {
            result.push(element);
          }
        } catch (e) {
          console.warn(e);
        }
      });
      return result;
    }
    /**
     * Recursively traverse an active tree and run callback on each non-inert node element.
     *
     * @param {Node} node The starting node to recursively traverse.
     * @param {Function} callback Function to call on each node element.
     */

    function traverseActiveTreeRecursively(node, callback) {
      if (!node) {
        return;
      }

      if (node.nodeType === Node.ELEMENT_NODE) {
        // inert is only supported by Chrome for now (behind a flag)
        if (node.hasAttribute('inert')) {
          return;
        }

        if (isIframe(node)) {
          if (isIframeOfSameOrigin(node)) {
            // for a same-origin iframe, we don't want to include the
            // iframe itself in the list, since we can see any of the
            // frames focusable children. So, skip calling callback on
            // the iframe node, and proceed to traverse it's children.
            traverseActiveTreeRecursively(node.contentDocument, callback);
          } else {
            // a non same-origin iframe is totally opaque, so include the
            // iframe in the results, but do no try to traverse into the
            // iframes children
            if (callback) {
              callback(node);
            }
          }

          return;
        }

        if (callback) {
          callback(node);
        } // If the element has a shadow root, traverse that


        if (node.shadowRoot) {
          traverseActiveTreeRecursively(node.shadowRoot, callback);
          return;
        } // if it's a slot element, get all assigned nodes and traverse them


        if (node.localName === 'slot') {
          const slottedNodes = node.assignedNodes({
            flatten: true
          });

          for (let i = 0; i < slottedNodes.length; i++) {
            traverseActiveTreeRecursively(slottedNodes[i], callback);
          }

          return;
        }
      }

      let child = node.firstChild;

      while (child !== null) {
        traverseActiveTreeRecursively(child, callback);
        child = child.nextSibling;
      }
    } // returns true if iframe is same origin, and therefore, can focus its internal elements


    function isIframe(node) {
      return node.tagName === 'IFRAME' || node instanceof HTMLIFrameElement;
    }

    function isIframeOfSameOrigin(iframe) {
      // if we can access contentDocument (is not null) on the iframe, then it is of same origin
      return !!iframe.contentDocument;
    }

    const ELEMENTS_WITH_DISABLED_ATTRIBUTE = ['button', 'select', 'textarea', 'input']; // https://html.spec.whatwg.org/multipage/interaction.html#dom-tabindex

    const ELEMENTS_WITH_TABINDEX_ZERO_BY_DEFAULT = ['a', 'select', 'textarea', 'input', 'button', 'iframe', 'object', 'area', 'frame'];

    function isTabbable({
      element,
      rootContainer
    }) {
      const elementLocalName = element.localName;

      if (elementLocalName === 'input' && elementLocalName.type === 'hidden') {
        return false;
      }

      const tabIndexAttribute = element.getAttribute('tabindex');

      if (tabIndexAttribute === '-1') {
        return false;
      }

      if (element.disabled && ELEMENTS_WITH_DISABLED_ATTRIBUTE.includes(element.localName)) {
        return false;
      } // Either the attribute was set directly to '0' or it's an element that has tabIndex zero by default


      const hasTabIndexZero = tabIndexAttribute === '0' || element.tabIndex === 0 && ELEMENTS_WITH_TABINDEX_ZERO_BY_DEFAULT.includes(element.localName);
      return hasTabIndexZero && isElementVisible(element) && isParentCustomElementTabbable({
        element,
        rootContainer
      });
    }

    function isElementVisible(element) {
      const {
        width,
        height
      } = element.getBoundingClientRect();
      const nonZeroSize = width > 0 || height > 0;
      return nonZeroSize && getComputedStyle(element).visibility !== 'hidden';
    }

    function isParentCustomElementTabbable({
      element,
      rootContainer
    }) {
      const parentRoot = rootContainer.getRootNode();
      const ownerDocument = element.ownerDocument;
      let root = element.getRootNode();

      while (root !== parentRoot && root !== ownerDocument) {
        const host = root.host;

        if (host.getAttribute('tabindex') === '-1') {
          return false;
        }

        root = host && host.getRootNode();
      }

      return true;
    }

    class FocusTrap extends lwc.LightningElement {
      constructor(...args) {
        super(...args);
        this._startNode = void 0;
        this._endNode = void 0;
        this._focused = false;
        this._initialized = false;
        this._pendingFocusOut = false;
      }

      renderedCallback() {
        if (!this._initialized) {
          this._initialized = true;
          this._startNode = this.template.querySelector('[data-start]');
          this._endNode = this.template.querySelector('[data-end]');
        }
      }
      /**
       * Focuses the first focusable element in the focus trap.
       */


      focus() {
        if (!this._focused) {
          // We could potentially add support for focusing the element that has 'autofocus' attribute on it,
          // and if none, then focus on the first element
          this._focusFirstElement();
        }
      }

      get _bookendTabIndex() {
        return this._focused ? '0' : '-1';
      }

      _handleFocusIn() {
        if (this._pendingFocusOut) {
          this._pendingFocusOut = false;
        }

        this._focused = true;
      }

      _handleFocusOut() {
        // This assumes that a focusin will be dispatched after a focusout
        this._pendingFocusOut = true; // eslint-disable-next-line @lwc/lwc/no-async-operation

        requestAnimationFrame(() => {
          if (this._pendingFocusOut) {
            this._focused = false;
          }
        });
      }
      /**
       * Focuses on the specified element location.
       * @param {String} elementLocation Could be 'first or 'last'.
       */


      _moveFocusTo(elementLocation) {
        const focusableElements = this._getFocusableElements();

        if (focusableElements.length > 0) {
          let node;

          if (elementLocation === 'last') {
            node = focusableElements[focusableElements.length - 1];
          } else if (elementLocation === 'first') {
            node = focusableElements[0];
          }

          node.focus();
        }
      }
      /**
       * Focuses the last focusable element in the focus trap.
       */


      _focusFirstElement() {
        this._moveFocusTo('first');
      }
      /**
       * Focuses the last focusable element in the focus trap.
       */


      _focusLastElement() {
        this._moveFocusTo('last');
      }
      /**
       * Returns a list of the focusable children found within the element.
       */


      _getFocusableElements() {
        return findAllTabbableElements(this.template.querySelector('slot'));
      }

    }

    lwc.registerDecorators(FocusTrap, {
      publicMethods: ["focus"],
      fields: ["_startNode", "_endNode", "_focused", "_initialized", "_pendingFocusOut"]
    });

    var _lightningFocusTrap = lwc.registerComponent(FocusTrap, {
      tmpl: _tmpl$g
    });

    function tmpl$i($api, $cmp, $slotset, $ctx) {
      const {
        b: api_bind,
        c: api_custom_element,
        h: api_element,
        d: api_dynamic,
        gid: api_scoped_id,
        k: api_key,
        i: api_iterator,
        ti: api_tab_index
      } = $api;
      const {
        _m0,
        _m1,
        _m2,
        _m3,
        _m4,
        _m5,
        _m6
      } = $ctx;
      return [api_element("div", {
        classMap: {
          "slds-datepicker": true,
          "slds-dropdown": true,
          "slds-dropdown_left": true
        },
        attrs: {
          "aria-hidden": "false",
          "aria-label": $cmp.computedAriaLabel,
          "role": "dialog",
          "tabindex": "-1"
        },
        key: 20
      }, [api_custom_element("lightning-focus-trap", _lightningFocusTrap, {
        key: 19
      }, [api_element("div", {
        classMap: {
          "slds-datepicker__filter": true,
          "slds-grid": true
        },
        key: 8
      }, [api_element("div", {
        classMap: {
          "slds-datepicker__filter_month": true,
          "slds-grid": true,
          "slds-grid_align-spread": true,
          "slds-grow": true
        },
        key: 5
      }, [api_element("div", {
        classMap: {
          "slds-align-middle": true
        },
        key: 1
      }, [api_custom_element("lightning-button-icon", _lightningButtonIcon, {
        props: {
          "iconName": "utility:left",
          "variant": "container",
          "alternativeText": $cmp.i18n.previousMonth
        },
        key: 0,
        on: {
          "click": _m0 || ($ctx._m0 = api_bind($cmp.goToPreviousMonth))
        }
      }, [])]), api_element("h2", {
        classMap: {
          "slds-align-middle": true
        },
        attrs: {
          "aria-atomic": "true",
          "aria-live": "assertive",
          "id": api_scoped_id("month-title"),
          "data-index": $cmp.monthIndex
        },
        key: 2
      }, [api_dynamic($cmp.computedMonthTitle)]), api_element("div", {
        classMap: {
          "slds-align-middle": true
        },
        key: 4
      }, [api_custom_element("lightning-button-icon", _lightningButtonIcon, {
        props: {
          "iconName": "utility:right",
          "variant": "container",
          "alternativeText": $cmp.i18n.nextMonth
        },
        key: 3,
        on: {
          "click": _m1 || ($ctx._m1 = api_bind($cmp.goToNextMonth))
        }
      }, [])])]), api_element("div", {
        classMap: {
          "slds-shrink-none": true
        },
        key: 7
      }, [api_custom_element("lightning-primitive-select", _lightningPrimitiveSelect, {
        props: {
          "value": $cmp.calendarYear,
          "label": $cmp.i18n.yearSelector,
          "variant": "label-hidden",
          "options": $cmp.computedYearList
        },
        key: 6,
        on: {
          "change": _m2 || ($ctx._m2 = api_bind($cmp.handleYearChange)),
          "click": _m3 || ($ctx._m3 = api_bind($cmp.handleYearSelectClick))
        }
      }, [])])]), api_element("table", {
        classMap: {
          "slds-datepicker__month": true
        },
        attrs: {
          "aria-labelledby": `${api_scoped_id("month-title")}`,
          "role": "grid"
        },
        key: 17
      }, [api_element("thead", {
        key: 12
      }, [api_element("tr", {
        attrs: {
          "id": api_scoped_id("weekdays-element")
        },
        key: 11
      }, api_iterator($cmp.computedWeekdayLabels, function (weekday) {
        return api_element("th", {
          attrs: {
            "id": api_scoped_id(weekday.fullName),
            "scope": "col"
          },
          key: api_key(10, weekday.fullName)
        }, [api_element("abbr", {
          attrs: {
            "title": weekday.fullName
          },
          key: 9
        }, [api_dynamic(weekday.shortName)])]);
      }))]), api_element("tbody", {
        key: 16,
        on: {
          "keydown": _m5 || ($ctx._m5 = api_bind($cmp.handleCalendarKeyDown))
        }
      }, api_iterator($cmp.computedMonth, function (week, index) {
        return api_element("tr", {
          key: api_key(15, week.id)
        }, api_iterator(week.days, function (day) {
          return api_element("td", {
            className: day.className,
            attrs: {
              "role": "gridcell",
              "aria-selected": day.isSelected,
              "aria-current": day.ariaCurrent,
              "tabindex": api_tab_index(day.tabIndex),
              "data-value": day.dateValue
            },
            key: api_key(14, day.dateValue)
          }, [api_element("span", {
            classMap: {
              "slds-day": true
            },
            key: 13,
            on: {
              "click": _m4 || ($ctx._m4 = api_bind($cmp.handleDateClick))
            }
          }, [api_dynamic(day.dayInMonth)])]);
        }));
      }))]), api_element("button", {
        classMap: {
          "slds-button": true,
          "slds-align_absolute-center": true,
          "slds-text-link": true
        },
        attrs: {
          "name": "today",
          "type": "button"
        },
        key: 18,
        on: {
          "click": _m6 || ($ctx._m6 = api_bind($cmp.handleTodayClick))
        }
      }, [api_dynamic($cmp.i18n.today)])])])];
    }

    var _tmpl$h = lwc.registerTemplate(tmpl$i);
    tmpl$i.stylesheets = [];

    if (_implicitStylesheets$6) {
      tmpl$i.stylesheets.push.apply(tmpl$i.stylesheets, _implicitStylesheets$6);
    }
    tmpl$i.stylesheetTokens = {
      hostAttribute: "lightning-calendar_calendar-host",
      shadowAttribute: "lightning-calendar_calendar"
    };

    var labelAriaLabelMonth = 'Date picker: ';

    var labelNextMonth = 'Next Month';

    var labelPreviousMonth = 'Previous Month';

    var labelToday = 'Today';

    var labelYearSelector = 'Pick a Year';

    var firstDayOfWeek = '1';

    function handleKeyDownOnCalendar(event, date, calendarInterface) {
      const tdElement = event.target;
      const keyValue = normalizeKeyValue(event.key);

      switch (keyValue) {
        case 'ArrowUp':
          preventDefaultAndStopPropagation$1(event);
          date.setDate(date.getDate() - 7);
          calendarInterface.focusDate(date);
          break;

        case 'ArrowDown':
          preventDefaultAndStopPropagation$1(event);
          date.setDate(date.getDate() + 7);
          calendarInterface.focusDate(date);
          break;

        case 'ArrowRight':
          preventDefaultAndStopPropagation$1(event);
          date.setDate(date.getDate() + 1);
          calendarInterface.focusDate(date);
          break;

        case 'ArrowLeft':
          preventDefaultAndStopPropagation$1(event);
          date.setDate(date.getDate() - 1);
          calendarInterface.focusDate(date);
          break;

        case 'Enter':
        case ' ':
          preventDefaultAndStopPropagation$1(event);
          calendarInterface.selectDate(tdElement);
          break;

        case 'PageUp':
          preventDefaultAndStopPropagation$1(event);

          if (event.altKey) {
            date.setFullYear(date.getFullYear() - 1);
          } else {
            date.setMonth(date.getMonth() - 1);
          }

          calendarInterface.focusDate(date);
          break;

        case 'PageDown':
          preventDefaultAndStopPropagation$1(event);

          if (event.altKey) {
            date.setFullYear(date.getFullYear() + 1);
          } else {
            date.setMonth(date.getMonth() + 1);
          }

          calendarInterface.focusDate(date);
          break;

        case 'Home':
          {
            preventDefaultAndStopPropagation$1(event);
            const startOfWeek = calendarInterface.getStartOfWeek(date);
            calendarInterface.focusDate(startOfWeek);
            break;
          }

        case 'End':
          {
            preventDefaultAndStopPropagation$1(event);
            const endOfWeek = calendarInterface.getStartOfWeek(date);
            endOfWeek.setDate(endOfWeek.getDate() + 6);
            calendarInterface.focusDate(endOfWeek);
            break;
          }
      }
    }

    function preventDefaultAndStopPropagation$1(event) {
      event.preventDefault();
      event.stopPropagation();
    }

    // This is a library built from Globalization's repo
    /**
     * Define address format patterns.
     */

    var AddressFormatPattern = Object.freeze({
      /**
       *
       * N: Name (The formatting of names for this field is outside of the scope of the address elements.)
       * O: Organization
       * A: Address Lines (2 or 3 lines address)
       * D: District (Sub-locality): smaller than a city, and could be a neighborhood, suburb or dependent locality.
       * C: City (Locality)
       * S: State (Administrative Area)
       * K: Country
       * Z: ZIP Code / Postal Code
       * X: Sorting code, for example, CEDEX as used in France
       * n: newline
       */
      A: Symbol('Address Lines'),
      C: Symbol('City'),
      S: Symbol('State'),
      K: Symbol('Country'),
      Z: Symbol('Zip Code'),
      n: Symbol('New Line'),
      fromPlaceHolder: function fromPlaceHolder(placeHolder) {
        switch (placeHolder) {
          case 'A':
            return AddressFormatPattern.A;

          case 'C':
            return AddressFormatPattern.C;

          case 'S':
            return AddressFormatPattern.S;

          case 'K':
            return AddressFormatPattern.K;

          case 'Z':
            return AddressFormatPattern.Z;

          case 'n':
            return AddressFormatPattern.n;
        }

        return null;
      },
      getPlaceHolder: function getPlaceHolder(pattern) {
        switch (pattern) {
          case AddressFormatPattern.A:
            return 'A';

          case AddressFormatPattern.C:
            return 'C';

          case AddressFormatPattern.S:
            return 'S';

          case AddressFormatPattern.K:
            return 'K';

          case AddressFormatPattern.Z:
            return 'Z';

          case AddressFormatPattern.n:
            return 'n';
        }

        return null;
      },
      getData: function getData(pattern, data) {
        if (data) {
          switch (pattern) {
            case AddressFormatPattern.A:
              return data.address;

            case AddressFormatPattern.C:
              return data.city;

            case AddressFormatPattern.S:
              return data.state;

            case AddressFormatPattern.K:
              return data.country;

            case AddressFormatPattern.Z:
              return data.zipCode;

            case AddressFormatPattern.n:
              return data.newLine;
          }
        }

        return null;
      }
    });

    var classCallCheck = function (instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    };

    var createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    /**
     * Address token types enum
     *
     * @private
     */


    var AddressTokenTypes = Object.freeze({
      DATA: Symbol('data'),
      STRING: Symbol('string'),
      NEWLINE: Symbol('newline'),
      GROUP: Symbol('group')
    });
    /**
     * AddressToken class
     *
     * @private
     */

    var AddressToken = function () {
      /**
       *
       * @param {AddressTokenTypes} type
       * @param {string} string
       * @param {*} pattern
       */
      function AddressToken(type, string, pattern) {
        classCallCheck(this, AddressToken);
        this.type = type;
        this.string = string;
        this.pattern = pattern;
      }
      /**
       * Construct a string type token
       *
       * @param {string} string String
       * @return {AddressToken} Address Token
       */


      createClass(AddressToken, null, [{
        key: 'string',
        value: function string(_string) {
          return new AddressToken(AddressTokenTypes.STRING, _string);
        }
        /**
         * Construct a data type token
         *
         * @param {pattern} pattern Address Format Pattern
         * @return {AddressToken} Address Token
         */

      }, {
        key: 'data',
        value: function data(pattern) {
          return new AddressToken(AddressTokenTypes.DATA, undefined, pattern);
        }
        /**
         * Construct a new line type token
         *
         * @return {AddressToken} Address Token
         */

      }, {
        key: 'newLine',
        value: function newLine() {
          return new AddressToken(AddressTokenTypes.NEWLINE);
        }
      }]);
      return AddressToken;
    }();

    // This is a library built from Globalization's repo

    /**
     S: Salutation
     F: First Name(givenName)
     M: Middle Name
     L: Last Name(familyName)
     X: Suffix
     I: Informal Name
     */

    var fieldConstants = {
      SALUTATION: Symbol('Salutation'),
      FIRST: Symbol('First Name'),
      MIDDLE: Symbol('Middle Name'),
      LAST: Symbol('Last Name'),
      SUFFIX: Symbol('Suffix'),
      INFORMAL: Symbol('Informal Name')
    };

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }

    var Format = function Format(parts) {
      _classCallCheck(this, Format);

      this.parts = Object.freeze(parts);
      Object.freeze(this);
    };
    /**
     * Represents a field within the format
     */


    var FieldFormatPart = function FieldFormatPart(field) {
      _classCallCheck(this, FieldFormatPart);

      this.field = field;
      this.type = 'field';
      Object.freeze(this);
    };
    /**
     * Represents text to be output directly
     */


    var TextFormatPart = function TextFormatPart(text) {
      _classCallCheck(this, TextFormatPart);

      this.type = 'text';
      this.text = text;
      Object.freeze(this);
    };

    var fieldFormatParts = Object.freeze({
      SALUTATION: new FieldFormatPart(fieldConstants.SALUTATION),
      FIRST: new FieldFormatPart(fieldConstants.FIRST),
      MIDDLE: new FieldFormatPart(fieldConstants.MIDDLE),
      LAST: new FieldFormatPart(fieldConstants.LAST),
      SUFFIX: new FieldFormatPart(fieldConstants.SUFFIX),
      INFORMAL: new FieldFormatPart(fieldConstants.INFORMAL)
    });

    var FormatParser = function () {
      function FormatParser() {
        _classCallCheck(this, FormatParser);
      }

      _createClass(FormatParser, [{
        key: 'parse',

        /**
         * Parses the format
         * @param {string} fmt the format to be parsed
         * @returns {Format}
         */
        value: function parse(fmt) {
          var nodes = [];
          var textBuffer = ''; // parse the format string

          for (var i = 0; i < fmt.length; i = i + 1) {
            if (fmt[i] === '%') {
              i = i + 1; // move to the next character after %
              // end the last text buffer

              if (textBuffer.length > 0) {
                nodes.push(Object.freeze(new TextFormatPart(textBuffer)));
                textBuffer = '';
              }

              if (i >= fmt.length) {
                throw new Error('Unexpected end of format. Symbol at ' + (i - 1) + ' should be followed by a valid field code');
              }

              var code = fmt[i];

              switch (code) {
                case 'S':
                  nodes.push(fieldFormatParts.SALUTATION);
                  break;

                case 'F':
                  nodes.push(fieldFormatParts.FIRST);
                  break;

                case 'M':
                  nodes.push(fieldFormatParts.MIDDLE);
                  break;

                case 'L':
                  nodes.push(fieldFormatParts.LAST);
                  break;

                case 'X':
                  nodes.push(fieldFormatParts.SUFFIX);
                  break;

                case 'I':
                  nodes.push(fieldFormatParts.INFORMAL);
                  break;
              }
            } else {
              // if it wasn't a symbol, then just output the value directly
              textBuffer += fmt[i];
            }
          }

          if (textBuffer.length > 0) {
            nodes.push(new TextFormatPart(textBuffer));
          }

          return new Format(nodes);
        }
      }]);

      return FormatParser;
    }();

    var formatParser = new FormatParser();

    var numberFormat = '#,##0.###';

    var percentFormat = '#,##0%';

    var currencyFormat = '¤#,##0.00;(¤#,##0.00)';

    var currency = 'USD';

    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat#Parameters

    const POSSIBLE_OPTS = {
      style: true,
      currency: true,
      currencyDisplay: true,
      useGrouping: true,
      minimumIntegerDigits: true,
      minimumFractionDigits: true,
      maximumFractionDigits: true,
      minimumSignificantDigits: true,
      maximumSignificantDigits: true
    };
    const STYLE = {
      DECIMAL: 'decimal',
      CURRENCY: 'currency',
      PERCENT: 'percent'
    };
    const CURRENCY_DISPLAY = {
      CODE: 'code',
      // USD
      SYMBOL: 'symbol',
      // $
      NAME: 'name' // US Dollars

    };
    const SAFE_NUM_LENGTH = 15;
    const numberFormatInstancesCache = {};

    function getStringOfChar(char, amount) {
      return new Array(amount + 1).join(char);
    }

    function getGroupingCount(skeleton) {
      const match = skeleton.match(/,[#0]*\./);
      return match ? match[0].length - 2 : 0;
    }

    function getOptionsUniqueKey(options) {
      return Object.keys(options).sort().reduce((prev, optionName) => {
        if (POSSIBLE_OPTS[optionName]) {
          return prev + optionName + options[optionName] + '';
        }

        return prev;
      }, '');
    }

    function toNumber(value, defaultValue) {
      const number = parseInt(value, 10);

      if (isNaN(number)) {
        return defaultValue;
      }

      return number;
    }

    function getFractionPart(options) {
      const minimumDigits = toNumber(options.minimumFractionDigits, 0);
      const maximumDigits = Math.max(toNumber(options.maximumFractionDigits, 0), minimumDigits);
      return '.' + new Array(minimumDigits + 1).join('0') + new Array(maximumDigits - minimumDigits + 1).join('#');
    }

    function updateFractionPart(skeleton, options) {
      const fractionPart = getFractionPart(options);
      return addFractionsToPattern(skeleton, fractionPart);
    }

    function addFractionsToPattern(pattern, fractionPart) {
      if (!fractionPart) {
        return pattern;
      } // if pattern has two formats (one for positive and one for negative numbers), add fractions to both patterns


      if (pattern.indexOf(';') > 0) {
        const [positivePattern, negativePattern] = pattern.split(';');
        return `${addFractionsToPattern(positivePattern, fractionPart)};${addFractionsToPattern(negativePattern, fractionPart)}`;
      } // If the pattern already has a fraction part, replace it with the fractions calculated from the options


      if (pattern.indexOf('.') > 0) {
        return pattern.replace(/\.(0|#)*/, fractionPart);
      } // If the pattern doesn't have a fraction part, we need to add it to the pattern
      // We need to add the fraction part after the last digit (represented by '0' or '#')


      const position = Math.max(pattern.lastIndexOf('0'), pattern.lastIndexOf('#')) + 1;
      return [pattern.slice(0, position), fractionPart, pattern.slice(position)].join('');
    }

    function updateCurrencySymbol(skeleton, currencyCode, options) {
      const symbol = String.fromCharCode(164);

      if (options.currencyDisplay === CURRENCY_DISPLAY.NAME) {
        // append the currency code at the end.
        return skeleton.replace(symbol, '') + currencyCode;
      }

      return skeleton.replace(symbol, currencyCode);
    }

    function updateIntegerPart(skeleton, options) {
      const minimumIntegerDigits = options.minimumIntegerDigits;
      const groupingCount = getGroupingCount(skeleton);

      if (!minimumIntegerDigits) {
        return skeleton;
      }

      if (minimumIntegerDigits <= groupingCount) {
        return skeleton.replace(/,[#0]*\./, ',' + getStringOfChar('#', groupingCount - minimumIntegerDigits) + getStringOfChar('0', minimumIntegerDigits) + '.');
      }

      return skeleton.replace(/[#0]*\./, getStringOfChar('0', minimumIntegerDigits - groupingCount) + ',' + getStringOfChar('0', groupingCount) + '.');
    }

    function getBestMatchCurrencySymbol(code, currencyDisplay) {
      if (!('Intl' in window)) {
        return code; // fail gracefully.
      }

      const opts = {
        style: 'currency',
        currency: code,
        minimumFractionDigits: 0
      };

      if (currencyDisplay) {
        opts.currencyDisplay = currencyDisplay;
      }

      const nf = getFromCache(opts);
      return nf.format(2).replace(/2/g, '');
    }

    function getCurrency(options) {
      const currencyDisplay = options.currencyDisplay || CURRENCY_DISPLAY.SYMBOL;

      if (currencyDisplay === CURRENCY_DISPLAY.SYMBOL || currencyDisplay === CURRENCY_DISPLAY.NAME) {
        return getBestMatchCurrencySymbol(options.currency, currencyDisplay);
      }

      return options.currency;
    }

    function getFromCache(options) {
      const optionsUniqueKey = getOptionsUniqueKey(options);
      let numberFormatInstance = numberFormatInstancesCache[optionsUniqueKey];

      if (numberFormatInstance) {
        return numberFormatInstance;
      }

      numberFormatInstance = new Intl.NumberFormat(salesforceLocale, options);
      numberFormatInstancesCache[optionsUniqueKey] = numberFormatInstance;
      return numberFormatInstance;
    }

    function exceedsSafeLength(value) {
      const numberAsString = value.toString().replace('.', '');
      return numberAsString.length >= SAFE_NUM_LENGTH;
    }

    function normalizedMinimumFractionDigits(options) {
      const fractionSkeleton = getFallbackFractionSkeleton(options.style);
      const fractionDigits = fractionSkeleton.replace(/[^0]/g, '');
      return fractionDigits.length;
    }

    function normalizedMaximumFractionDigits(options) {
      const fractionSkeleton = getFallbackFractionSkeleton(options.style);
      const fractionDigits = fractionSkeleton.replace(/[^0#]/g, '');
      return Math.max(options.minimumFractionDigits, fractionDigits.length);
    }

    function getFallbackFractionSkeleton(style) {
      let styleFormat = numberFormat;

      if (style === STYLE.CURRENCY) {
        styleFormat = currencyFormat;
      } else if (style === STYLE.PERCENT) {
        styleFormat = percentFormat;
      }

      const format = styleFormat.split(';')[0];
      return format.split('.')[1] || '';
    }

    function normalizeOptions(options) {
      const normalizedOpts = Object.assign({}, options);
      normalizedOpts.currency = normalizedOpts.currency || currency;

      if (normalizedOpts.minimumFractionDigits === undefined) {
        normalizedOpts.minimumFractionDigits = normalizedMinimumFractionDigits(normalizedOpts);
      }

      if (normalizedOpts.maximumFractionDigits === undefined || normalizedOpts.maximumFractionDigits < normalizedOpts.minimumFractionDigits) {
        normalizedOpts.maximumFractionDigits = normalizedMaximumFractionDigits(normalizedOpts);
      }

      return normalizedOpts;
    }

    function NumberOptions(options) {
      this.options = options || {};
    }

    NumberOptions.prototype.isCurrency = function () {
      return this.options.style === 'currency';
    };

    NumberOptions.prototype.isPercent = function () {
      return this.options.style === 'percent';
    };

    NumberOptions.prototype.isDefaultCurrency = function () {
      return !this.options.currency || currency === this.options.currency;
    };

    NumberOptions.prototype.getDefaultSkeleton = function () {
      return this.isCurrency() ? currencyFormat : this.isPercent() ? percentFormat : numberFormat;
    };

    NumberOptions.prototype.getSkeleton = function () {
      const options = this.options;
      const defaultSkeleton = this.getDefaultSkeleton();
      let skeleton = updateFractionPart(defaultSkeleton, options);
      skeleton = updateIntegerPart(skeleton, options);

      if (!this.isDefaultCurrency()) {
        skeleton = updateCurrencySymbol(skeleton, getCurrency(options), options);
      }

      return skeleton;
    };

    /*
     * Regex to test a string for an ISO8601 Date. The following formats are matched.
     * Note that if a time element is present (e.g. 'T'), the string should have a time zone designator (Z or +hh:mm or -hh:mm).
     *
     *  YYYY
     *  YYYY-MM
     *  YYYY-MM-DD
     *  YYYY-MM-DDThh:mmTZD
     *  YYYY-MM-DDThh:mm:ssTZD
     *  YYYY-MM-DDThh:mm:ss.STZD
     *
     *
     * @see: https://www.w3.org/TR/NOTE-datetime
     */
    const ISO8601_STRICT_PATTERN = /^\d{4}(-\d\d(-\d\d(T\d\d:\d\d(:\d\d)?(\.\d+)?(([+-]\d\d:\d\d)|Z){1})?)?)?$/i;
    /* Regex to test a string for an ISO8601 partial time or full time:
     * hh:mm
     * hh:mm:ss
     * hh:mm:ss.S
     * full time = partial time + TZD
     */

    const ISO8601_TIME_PATTERN = /^\d\d:\d\d(:\d\d)?(\.\d+)?(([+-]\d\d:\d\d)|Z)?$/i;
    const STANDARD_DATE_FORMAT = 'YYYY-MM-DD';
    const TIME_SEPARATOR = 'T';
    const TIMEZONE_INDICATOR = /(Z|([+-])(\d{2}):(\d{2}))$/;
    function isValidISODateTimeString(dateTimeString) {
      return isValidISO8601String(dateTimeString) && isValidDate(dateTimeString);
    }
    function isValidISOTimeString(timeString) {
      if (!isValidISO8601TimeString(timeString)) {
        return false;
      }

      const timeOnly = removeTimeZoneSuffix(timeString);
      return isValidDate(`2018-09-09T${timeOnly}Z`);
    }
    function removeTimeZoneSuffix(dateTimeString) {
      if (typeof dateTimeString === 'string') {
        return dateTimeString.split(TIMEZONE_INDICATOR)[0];
      }

      return dateTimeString;
    }

    function isValidISO8601String(dateTimeString) {
      if (typeof dateTimeString !== 'string') {
        return false;
      }

      return ISO8601_STRICT_PATTERN.test(dateTimeString);
    }

    function isValidISO8601TimeString(timeString) {
      if (typeof timeString !== 'string') {
        return false;
      }

      return ISO8601_TIME_PATTERN.test(timeString);
    }

    function isValidDate(value) {
      // Date.parse returns NaN if the argument doesn't represent a valid date
      const timeStamp = Date.parse(value);
      return isFinite(timeStamp);
    }

    // This is a library for all calls to the aura localizationService.
    function isBefore(date1, date2, unit) {
      return configProvider.getLocalizationService().isBefore(date1, date2, unit);
    }
    function isAfter(date1, date2, unit) {
      return configProvider.getLocalizationService().isAfter(date1, date2, unit);
    }
    function formatDateTimeUTC(date) {
      return configProvider.getLocalizationService().formatDateTimeUTC(date);
    }
    function formatDate(dateString, format, locale) {
      return configProvider.getLocalizationService().formatDate(dateString, format, locale);
    }
    function formatTime(timeString, format) {
      return configProvider.getLocalizationService().formatTime(timeString, format);
    }
    function parseDateTimeUTC(dateTimeString) {
      return configProvider.getLocalizationService().parseDateTimeUTC(dateTimeString);
    }
    function parseDateTimeISO8601(dateTimeString) {
      return configProvider.getLocalizationService().parseDateTimeISO8601(dateTimeString);
    }
    function parseDateTime(dateTimeString, format, strictMode) {
      return configProvider.getLocalizationService().parseDateTime(dateTimeString, format, strictMode);
    }
    function syncUTCToWallTime(date, timeZone) {
      let converted = null; // eslint-disable-next-line new-cap

      configProvider.getLocalizationService().UTCToWallTime(date, timeZone, result => {
        converted = result;
      });
      return converted;
    }
    function syncWallTimeToUTC(date, timeZone) {
      let converted = null; // eslint-disable-next-line new-cap

      configProvider.getLocalizationService().WallTimeToUTC(date, timeZone, result => {
        converted = result;
      });
      return converted;
    }
    function toOtherCalendar(date) {
      return configProvider.getLocalizationService().translateToOtherCalendar(date);
    }
    function fromOtherCalendar(date) {
      return configProvider.getLocalizationService().translateFromOtherCalendar(date);
    }
    function toLocalizedDigits(input) {
      return configProvider.getLocalizationService().translateToLocalizedDigits(input);
    }
    function fromLocalizedDigits(input) {
      return configProvider.getLocalizationService().translateFromLocalizedDigits(input);
    } // This belongs to localization service; i.e. getLocalizationService().parseTime()
    // Should be removed after it's been added to the localization service

    function parseTime(timeString, format, strictParsing) {
      if (!timeString) {
        return null;
      }

      if (!format) {
        if (!isValidISOTimeString(timeString)) {
          return null;
        }

        return parseDateTimeISO8601(timeString);
      }

      const parseString = timeString.replace(/(\d)([AaPp][Mm])/g, '$1 $2'); // Modifying the time string so that strict parsing doesn't break on minor deviations

      const parseFormat = format.replace(/(\b|[^h])h{2}(?!h)/g, '$1h').replace(/(\b|[^H])H{2}(?!H)/g, '$1H').replace(/(\b|[^m])m{2}(?!m)/g, '$1m').replace(/\s*A/g, ' A').trim();
      const acceptableFormats = [parseFormat]; // We want to be lenient and accept input values with seconds or milliseconds precision.
      // So even though we may display the time as 10:23 AM, we would accept input values like 10:23:30.555 AM.

      acceptableFormats.push(parseFormat.replace('m', 'm:s'), parseFormat.replace('m', 'm:s.S'), parseFormat.replace('m', 'm:s.SS'), parseFormat.replace('m', 'm:s.SSS')); // Start parsing from the most strict format (i.e. time with milliseconds).
      // The strict mode parsing of time strings using parseDateTime seems to be lenient for certain formats

      acceptableFormats.reverse();

      for (let i = 0; i < acceptableFormats.length; i++) {
        const time = parseDateTime(parseString, acceptableFormats[i], strictParsing);

        if (time) {
          return time;
        }
      }

      return null;
    } // This is called from the numberFormat library when the value exceeds the safe length.

    function getNumberFormat(format) {
      return configProvider.getLocalizationService().getNumberFormat(format);
    }

    function numberFormatFallback(options) {
      const skeleton = new NumberOptions(options).getSkeleton();
      return {
        format: value => {
          return getNumberFormat(skeleton).format(value);
        }
      };
    }

    function numberFormat$1(options) {
      const normalizedOpts = Object.assign({}, normalizeOptions(options));

      if (!('Intl' in window)) {
        return numberFormatFallback(normalizedOpts);
      }

      return {
        format: value => {
          if (value && exceedsSafeLength(value)) {
            return numberFormatFallback(normalizedOpts).format(value);
          }

          const numberFormatInstance = getFromCache(normalizedOpts);
          return numberFormatInstance.format(value);
        }
      };
    }

    const isTimeZonesSupported = function () {
      try {
        // IE11 only supports the UTC time zone and throws when given anything else
        // eslint-disable-next-line new-cap
        Intl.DateTimeFormat('en-US', {
          timeZone: 'America/Los_Angeles'
        });
      } catch (err) {
        return false;
      }

      return true;
    }();

    var salesforceLanguage = 'en';

    // Falling back to the user's locale or the default 'en-us' in case the tag isn't supported by the browser's Intl implementation

    const FALLBACK_LOCALES = [salesforceLocale, 'en-us'];
    const symbolsCache = {}; // languageOverride is only used in the tests

    function getNameOfWeekdays(languageOverride) {
      const language = languageOverride || salesforceLanguage;
      const languageDataCache = symbolsCache[language];

      if (languageDataCache && languageDataCache.weekdays) {
        return languageDataCache.weekdays;
      }

      const intlLocales = [language, ...FALLBACK_LOCALES];
      const fullNameFormatter = new Intl.DateTimeFormat(intlLocales, {
        weekday: 'long',
        timeZone: 'UTC'
      });
      const shortNameFormatter = new Intl.DateTimeFormat(intlLocales, {
        weekday: 'short',
        timeZone: 'UTC'
      });
      const weekdays = [];

      for (let i = 0; i <= 6; i++) {
        // (1970, 0, 4) corresponds to a sunday.
        const date = new Date(Date.UTC(1970, 0, 4 + i));
        weekdays.push({
          fullName: format(fullNameFormatter, date),
          shortName: format(shortNameFormatter, date)
        });
      }

      if (!symbolsCache[language]) {
        symbolsCache[language] = {};
      }

      symbolsCache[language].weekdays = weekdays;
      return weekdays;
    } // languageOverride is only used in the tests

    function getMonthNames(languageOverride) {
      const language = languageOverride || salesforceLanguage;
      const languageDataCache = symbolsCache[language];

      if (languageDataCache && languageDataCache.months) {
        return languageDataCache.months;
      }

      const intlLocales = [language, ...FALLBACK_LOCALES];
      const monthNameFormatter = new Intl.DateTimeFormat(intlLocales, {
        month: 'long'
      });
      const months = [];

      for (let i = 0; i <= 11; i++) {
        const date = new Date(1970, i, 4);
        months.push({
          // we currently only need the fullName
          fullName: format(monthNameFormatter, date)
        });
      }

      if (!symbolsCache[language]) {
        symbolsCache[language] = {};
      }

      symbolsCache[language].months = months;
      return months;
    }

    function format(dateTimeFormat, date) {
      const formattedDate = dateTimeFormat.format(date);
      return removeIE11Markers(formattedDate);
    }

    function removeIE11Markers(formattedString) {
      // IE11 adds LTR / RTL mark in the formatted date time string
      return formattedString.replace(/[\u200E\u200F]/g, '');
    }

    var mediumDateFormat = 'MMM d, yyyy';

    var mediumTimeFormat = 'h:mm:ss a';

    function normalizeISODate(value, format) {
      const dateValue = typeof value === 'string' ? value.trim() : value;

      if (!dateValue) {
        return {
          isoValue: null,
          displayValue: value || ''
        };
      } // if value is an ISO string, only fetch the date part


      const dateOnlyString = typeof dateValue === 'string' && dateValue.split(TIME_SEPARATOR)[0] || dateValue;
      assert(isValidISODateTimeString(dateOnlyString), `datetime component: The value attribute accepts a valid ISO8601 formatted string ` + `with timezone offset. but we are getting the ${typeof value} value "${value}" instead.`);
      const parsedDate = parseDateTime(dateOnlyString, STANDARD_DATE_FORMAT);

      if (!parsedDate) {
        return {
          isoValue: null,
          displayValue: value || ''
        };
      } // convert from Gregorian to Buddhist Calendar if necessary


      const civilDate = toOtherCalendar(parsedDate);
      return {
        isoValue: dateOnlyString,
        displayValue: formatDate(civilDate, format)
      };
    }
    function normalizeISOTime(value, format) {
      // We are not converting the time to the user's timezone. All values are displayed and saved as UTC time values
      const normalizedValue = removeTimeZoneSuffix(value);
      const timeValue = typeof normalizedValue === 'string' ? normalizedValue.trim() : normalizedValue;

      if (!timeValue) {
        return {
          isoValue: null,
          displayValue: value || ''
        };
      }

      assert(isValidISOTimeString(timeValue), `datetime component: The value attribute accepts a valid ISO8601 formatted string. ` + `but we are getting the ${typeof value} value "${value}" instead.`);
      const parsedTime = parseTime(timeValue);

      if (!parsedTime) {
        return {
          isoValue: null,
          displayValue: value || ''
        };
      }

      return {
        isoValue: getISOTimeString(parsedTime),
        displayValue: formatTime(parsedTime, format)
      };
    }
    function normalizeISODateTime(value, timezone, format) {
      const dateTimeValue = typeof value === 'string' ? value.trim() : value;

      if (!dateTimeValue) {
        return {
          isoValue: null,
          displayValue: value || ''
        };
      }

      assert(isValidISODateTimeString(dateTimeValue), `datetime component: The value attribute accepts a valid ISO8601 formatted string ` + `with timezone offset. but we are getting the ${typeof value} value "${value}" instead.`);
      const parsedDate = parseDateTimeISO8601(dateTimeValue);

      if (!parsedDate) {
        return {
          isoValue: null,
          displayValue: value || ''
        };
      }

      const convertedDate = syncUTCToWallTime(parsedDate, timezone);
      return {
        // We are passing the ISO value without a timezone designator.
        // the native input type='datetime-local' who calls this does not accept timezone offset
        isoValue: removeTimeZoneSuffix(convertedDate.toISOString()),
        displayValue: formatDateTimeUTC(convertedDate)
      };
    }
    function normalizeFormattedDate(value, format) {
      const dateValue = typeof value === 'string' ? value.trim() : value;

      if (!dateValue) {
        return null;
      }

      const parsedDate = parseDateTime(dateValue, format || mediumDateFormat, true);

      if (!parsedDate) {
        return null;
      }

      const gregorianDate = fromOtherCalendar(parsedDate);
      return getISODateString(gregorianDate);
    }
    function normalizeFormattedTime(value, format) {
      const timeValue = typeof value === 'string' ? value.trim() : value;

      if (!timeValue) {
        return null;
      }

      const parsedDate = parseTime(timeValue, format || mediumTimeFormat, true);

      if (!parsedDate) {
        return null;
      }

      return getISOTimeString(parsedDate);
    } // The value here isn't really formatted, it's always an ISO string in the form isoDate + T + isoTime (without Z).

    function normalizeFormattedDateTime(value, timezone, format) {
      const datetimeValue = typeof value === 'string' ? value.trim() : value;

      if (!datetimeValue) {
        return null;
      } // given that value is an ISO string without Z, the method below is equivalent to parseDateTimeISO8601(value + 'Z')
      // However, parseDateTimeUTC is more concise and doesn't need any manipulation of the input (adding Z).


      const parsedDate = parseDateTimeUTC(datetimeValue);

      if (!parsedDate) {
        return null;
      }

      const convertedDate = syncWallTimeToUTC(parsedDate, timezone);
      return convertedDate.toISOString();
    }
    function getToday() {
      const today = getTodayBasedOnTimezone();
      return getISODateString(today);
    }
    function getISODateString(date) {
      return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}`;
    }
    function getISOTimeString(date) {
      return `${pad(date.getHours())}:${pad(date.getMinutes())}:${pad(date.getSeconds())}.${doublePad(date.getMilliseconds())}`;
    }
    function getCurrentTime(timezone) {
      const today = getTodayBasedOnTimezone(timezone);
      return pad(today.getHours()) + ':' + pad(today.getMinutes());
    }

    function getTodayBasedOnTimezone(timezone) {
      const today = new Date();
      today.setTime(today.getTime() + today.getTimezoneOffset() * 60 * 1000); // time in UTC
      // localization service will use $Locale.timezone when no timezone provided

      return syncUTCToWallTime(today, timezone);
    }

    function pad(n) {
      return Number(n) < 10 ? '0' + n : n;
    }

    function doublePad(n) {
      const number = Number(n);

      if (number < 10) {
        return '00' + n;
      } else if (number < 100) {
        return '0' + n;
      }

      return n;
    }

    const i18n$7 = {
      ariaLabelMonth: labelAriaLabelMonth,
      nextMonth: labelNextMonth,
      previousMonth: labelPreviousMonth,
      today: labelToday,
      yearSelector: labelYearSelector
    };
    const WEEKS_PER_MONTH = 6;
    const DAYS_PER_WEEK = 7;
    const calendarCache = {}; // cache of calendar cells for a given year/month

    class LightningCalendar extends lwc.LightningElement {
      get value() {
        return this.selectedDate;
      }

      set value(newValue) {
        // if value is an ISO string, only fetch the time part
        const dateOnlyString = typeof newValue === 'string' ? newValue.split(TIME_SEPARATOR)[0] : newValue;

        if (dateOnlyString !== this.selectedDate) {
          this.selectedDate = dateOnlyString;

          if (!this._connected) {
            return;
          }

          const newDate = this.parseDate(dateOnlyString); // if the date is invalid, render today's date

          if (!newDate) {
            this.selectedDate = null;
            this.renderToday();
          } else {
            this.selectDate(newDate);
          }
        }
      }

      constructor() {
        super();
        this.calendarYear = null;
        this.calendarMonth = null;
        this.min = void 0;
        this.max = void 0;
        this.uniqueId = generateUniqueId();
      }

      renderedCallback() {
        this.dispatchEvent(new CustomEvent('ready'));
      }

      connectedCallback() {
        this._connected = true;
        this.todayDate = getToday();
        const renderDate = this.getSelectedDate() || this.getTodaysDate();
        this.renderCalendar(renderDate);
        this.keyboardInterface = this.calendarKeyboardInterface();
      }

      disconnectedCallback() {
        this._connected = false;
      }
      /**
       * Sets focus on the focusable date cell in the calendar.
       */


      focus() {
        // eslint-disable-next-line @lwc/lwc/no-async-operation
        requestAnimationFrame(() => {
          const dateElement = this.getFocusableDateCell();

          if (dateElement) {
            dateElement.focus();
          }
        });
      }

      get i18n() {
        return i18n$7;
      }

      get computedAriaLabel() {
        const renderedMonth = this.getCalendarDate().getMonth();
        return i18n$7.ariaLabelMonth + getMonthNames()[renderedMonth].fullName;
      }

      get computedMonthTitle() {
        const renderedMonth = this.getCalendarDate().getMonth();
        return getMonthNames()[renderedMonth].fullName;
      }

      get computedWeekdayLabels() {
        const nameOfWeekdays = getNameOfWeekdays();
        const firstDay = this.getFirstDayOfWeek();
        const computedWeekdayLabels = []; // We need to adjust the weekday labels to start from the locale's first day of week

        for (let i = firstDay; i < nameOfWeekdays.length; i++) {
          computedWeekdayLabels.push(nameOfWeekdays[i]);
        }

        for (let i = 0; i < firstDay; i++) {
          computedWeekdayLabels.push(nameOfWeekdays[i]);
        }

        return computedWeekdayLabels;
      }

      get computedSelectElementId() {
        return this.uniqueId + '-select';
      }

      get computedWeekdaysElementId() {
        return this.uniqueId + '-weekdays';
      }

      get computedMonthTitleId() {
        return this.uniqueId + '-month';
      }

      get computedYearList() {
        const sampleDate = new Date();
        const currentYear = sampleDate.getFullYear();
        const minDate = this.parseDate(this.min);
        const maxDate = this.parseDate(this.max);
        const minYear = minDate ? minDate.getFullYear() : currentYear - 100;
        const maxYear = maxDate ? maxDate.getFullYear() : currentYear + 100;
        const yearList = [];

        for (let year = minYear; year <= maxYear; year++) {
          yearList.push({
            label: this.getYearDisplayValue(sampleDate, year),
            value: year
          });
        }

        return yearList;
      }

      get monthIndex() {
        return this.getCalendarDate().getMonth();
      }

      getYearDisplayValue(date, yearValue) {
        date.setFullYear(yearValue);
        return toLocalizedDigits(String(toOtherCalendar(date).getFullYear()));
      }

      get computedMonth() {
        if (!this._connected) {
          return [];
        }

        this.removeCurrentlySelectedDateAttributes();
        const selectedDate = this.getSelectedDate();
        const renderDate = this.getCalendarDate();
        const cacheKey = this.getCalendarCacheKey(renderDate, selectedDate);

        if (cacheKey in calendarCache) {
          return calendarCache[cacheKey];
        }

        const todayDate = this.getTodaysDate();
        const focusableDate = this.getInitialFocusDate(todayDate, selectedDate, renderDate);
        const calendarDates = {
          selectedDate,
          renderDate,
          focusableDate,
          todayDate,
          minDate: this.parseDate(this.min),
          maxDate: this.parseDate(this.max)
        };
        const monthCells = [];
        const date = this.getCalendarStartDate(renderDate);

        for (let week = 0; week < WEEKS_PER_MONTH; week++) {
          const weekCells = {
            id: week,
            days: []
          };

          for (let weekday = 0; weekday < DAYS_PER_WEEK; weekday++) {
            const dayCell = this.getDateCellAttributes(date, calendarDates);
            weekCells.days.push(dayCell);
            date.setDate(date.getDate() + 1);
          }

          monthCells.push(weekCells);
        }

        calendarCache[cacheKey] = monthCells;
        return monthCells;
      }

      getDateCellAttributes(date, calendarDates) {
        const isInAdjacentMonth = !this.dateInCalendar(date, calendarDates.renderDate) || !this.isBetween(date, calendarDates.minDate, calendarDates.maxDate);
        const isSelected = this.isSame(date, calendarDates.selectedDate);
        const isToday = this.isSame(date, calendarDates.todayDate);
        const ariaCurrent = isToday ? 'date' : false;
        const tabIndex = this.isSame(date, calendarDates.focusableDate) ? '0' : false;
        const className = classSet().add({
          'slds-is-today': isToday,
          'slds-is-selected': isSelected,
          'slds-day_adjacent-month': isInAdjacentMonth
        }).toString();
        return {
          dayInMonth: toLocalizedDigits(String(date.getDate())),
          dateValue: this.formatDate(date),
          isSelected: isSelected ? 'true' : 'false',
          className,
          tabIndex,
          ariaCurrent
        };
      }

      dispatchSelectEvent() {
        this.dispatchEvent(new CustomEvent('select', {
          composed: true,
          bubbles: true,
          cancelable: true,
          detail: {
            value: this.selectedDate
          }
        }));
      } // Determines if the date is in the rendered month/year calendar.


      dateInCalendar(date, calendarDate) {
        const renderedCalendar = calendarDate || this.getCalendarDate();
        return date.getMonth() === renderedCalendar.getMonth() && date.getFullYear() === renderedCalendar.getFullYear();
      }

      getInitialFocusDate(todayDate, selectedDate, renderedDate) {
        if (selectedDate && this.dateInCalendar(selectedDate, renderedDate)) {
          return selectedDate;
        }

        if (this.dateInCalendar(todayDate, renderedDate)) {
          return todayDate;
        }

        return new Date(renderedDate.getFullYear(), renderedDate.getMonth(), 1);
      }

      getTodaysDate() {
        if (this.todayDate) {
          return this.parseDate(this.todayDate);
        } // Today's date will be fetched in connectedCallback. In the meantime, use the date based on the device timezone.


        return new Date();
      }

      getSelectedDate() {
        return this.parseDate(this.selectedDate);
      } // returns the month and year in the calendar


      getCalendarDate() {
        if (this.calendarYear) {
          return new Date(this.calendarYear, this.calendarMonth, 1);
        }

        return this.getTodaysDate();
      }

      getCalendarStartDate(renderedDate) {
        const firstDayOfMonth = new Date(renderedDate.getFullYear(), renderedDate.getMonth(), 1);
        return this.getStartOfWeek(firstDayOfMonth);
      }

      getStartOfWeek(dayInWeek) {
        const firstDay = this.getFirstDayOfWeek(); // Negative dates in JS will subtract days from the 1st of the given month

        let startDay = dayInWeek.getDay();

        while (startDay !== firstDay) {
          dayInWeek.setDate(dayInWeek.getDate() - 1);
          startDay = dayInWeek.getDay();
        }

        return dayInWeek;
      }

      getFirstDayOfWeek() {
        return firstDayOfWeek - 1; // In Java, week days are 1 - 7
      } // This method is called when a new value is set, or when you click the today button.
      // In both cases, we need to check if newValue is in the currently rendered calendar


      selectDate(newDate) {
        if (this.dateInCalendar(newDate)) {
          const dateElement = this.getElementByDate(this.formatDate(newDate));
          this.selectDateInCalendar(dateElement);
        } else {
          this.renderCalendar(newDate);
        }
      } // Select a date in current calendar without the need to re-render the calendar


      selectDateInCalendar(dateElement) {
        this.selectedDate = dateElement.getAttribute('data-value');
        this.removeCurrentlySelectedDateAttributes();
        this.addSelectedDateAttributes(dateElement);
      }

      selectDateInCalendarAndDispatchSelect(dateElement) {
        this.selectDateInCalendar(dateElement);
        this.dispatchSelectEvent();
      } // we should be able to control the select value with an attribute once we have a select component


      selectYear(year) {
        const optionElement = this.template.querySelector(`option[value='${year}']`);

        if (optionElement) {
          optionElement.selected = true;
        }
      }

      getElementByDate(dateString) {
        return this.template.querySelector(`td[data-value='${dateString}']`);
      }

      getFocusableDateCell() {
        return this.template.querySelector(`td[tabIndex='0']`);
      }

      unfocusDateCell(element) {
        if (element) {
          element.removeAttribute('tabIndex');
        }
      }

      focusDateCell(element) {
        if (element) {
          element.setAttribute('tabIndex', 0);
          element.focus();
        }
      }

      focusElementByDate(date) {
        // eslint-disable-next-line @lwc/lwc/no-async-operation
        requestAnimationFrame(() => {
          const element = this.getElementByDate(this.formatDate(date));

          if (element) {
            this.unfocusDateCell(this.getFocusableDateCell());
            this.focusDateCell(element);
          }
        });
      }

      renderCalendar(newDate) {
        this.calendarMonth = newDate.getMonth();
        this.calendarYear = newDate.getFullYear();
        this.selectYear(newDate.getFullYear());
      }

      renderToday() {
        const todaysDate = this.getTodaysDate();

        if (this.dateInCalendar(todaysDate)) {
          this.removeCurrentlySelectedDateAttributes();
          this.unfocusDateCell(this.getFocusableDateCell());
          const todayElement = this.getElementByDate(this.todayDate);
          todayElement.setAttribute('tabIndex', 0);
        } else {
          this.renderCalendar(todaysDate);
        }
      }

      removeCurrentlySelectedDateAttributes() {
        const currentlySelectedElement = this.template.querySelector(`td[class*='slds-is-selected']`);

        if (currentlySelectedElement) {
          currentlySelectedElement.classList.remove('slds-is-selected');
          currentlySelectedElement.setAttribute('aria-selected', 'false');
        }

        this.unfocusDateCell(this.getFocusableDateCell());
      }

      addSelectedDateAttributes(dateElement) {
        this.focusDateCell(dateElement);
        dateElement.classList.add('slds-is-selected');
        dateElement.setAttribute('aria-selected', 'true');
      }

      handleCalendarKeyDown(event) {
        const dateString = event.target.getAttribute('data-value');
        handleKeyDownOnCalendar(event, this.parseDate(dateString), this.keyboardInterface);
      }

      handleDateClick(event) {
        event.stopPropagation();
        const tdElement = event.target.parentElement;
        this.selectDateInCalendarAndDispatchSelect(tdElement);
      }

      handleTodayClick(event) {
        event.stopPropagation();
        this.selectedDate = this.todayDate;
        this.selectDate(this.getTodaysDate());
        this.dispatchSelectEvent();
      }

      handleYearSelectClick(event) {
        event.stopPropagation();
      }

      handleYearChange(event) {
        event.stopPropagation();
        const newYearValue = event.target.value;

        if (this.calendarYear !== newYearValue) {
          this.calendarYear = newYearValue;
        }
      }

      goToNextMonth(event) {
        event.stopPropagation();
        const calendarDate = this.getCalendarDate();
        calendarDate.setMonth(calendarDate.getMonth() + 1);
        this.renderCalendar(calendarDate);
      }

      goToPreviousMonth(event) {
        event.stopPropagation();
        const calendarDate = this.getCalendarDate();
        calendarDate.setMonth(calendarDate.getMonth() - 1);
        this.renderCalendar(calendarDate);
      }

      calendarKeyboardInterface() {
        const that = this;
        return {
          focusDate(newDate) {
            if (!that.dateInCalendar(newDate)) {
              that.renderCalendar(newDate);
            }

            that.focusElementByDate(newDate);
          },

          getStartOfWeek(dayInWeek) {
            return that.getStartOfWeek(dayInWeek);
          },

          selectDate(dateElement) {
            that.selectDateInCalendarAndDispatchSelect(dateElement);
          }

        };
      }

      formatDate(date) {
        return getISODateString(date);
      }

      parseDate(dateString) {
        return parseDateTime(dateString, STANDARD_DATE_FORMAT, true);
      }

      isSame(date1, date2) {
        if (!date1 || !date2) {
          return false;
        }

        return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate() // getDate returns the day in month whereas getDay returns the weekday number
        ;
      }

      isBetween(date, date1, date2) {
        let isBeforeEndDate = true;
        let isAfterStartDate = true;

        if (date2) {
          isBeforeEndDate = isBefore(date, date2, 'day') || this.isSame(date, date2);
        }

        if (date1) {
          isAfterStartDate = isAfter(date, date1, 'day') || this.isSame(date, date1);
        }

        return isBeforeEndDate && isAfterStartDate;
      }

      getCalendarCacheKey(renderDate, selectedDate) {
        let key = renderDate.getFullYear() + '-' + renderDate.getMonth(); // Having the key include min/max seems enough for now.
        // We're not going to complicate things by checking if renderDate falls before/after the min/max.

        key += this.min ? 'min' + this.min : '';
        key += this.max ? 'max' + this.max : '';

        if (selectedDate && this.dateInCalendar(selectedDate, renderDate)) {
          key += '_' + selectedDate.getDate();
        }

        return key;
      }

    }

    lwc.registerDecorators(LightningCalendar, {
      publicProps: {
        min: {
          config: 0
        },
        max: {
          config: 0
        },
        value: {
          config: 3
        }
      },
      publicMethods: ["focus"],
      track: {
        calendarYear: 1,
        calendarMonth: 1
      }
    });

    var _lightningCalendar = lwc.registerComponent(LightningCalendar, {
      tmpl: _tmpl$h
    });

    function tmpl$j($api, $cmp, $slotset, $ctx) {
      const {
        t: api_text,
        h: api_element,
        d: api_dynamic,
        gid: api_scoped_id,
        c: api_custom_element,
        b: api_bind
      } = $api;
      const {
        _m0,
        _m1,
        _m2,
        _m3,
        _m4,
        _m5,
        _m6,
        _m7,
        _m8,
        _m9,
        _m10,
        _m11,
        _m12,
        _m13,
        _m14
      } = $ctx;
      return [api_element("div", {
        classMap: {
          "slds-form-element": true,
          "slds-dropdown-trigger": true,
          "slds-dropdown-trigger_click": true,
          "slds-size_1-of-1": true
        },
        attrs: {
          "tabindex": "-1"
        },
        key: 7
      }, [api_element("label", {
        className: $cmp.computedLabelClass,
        attrs: {
          "for": `${api_scoped_id("input")}`
        },
        key: 1
      }, [$cmp.required ? api_element("abbr", {
        classMap: {
          "slds-required": true
        },
        attrs: {
          "title": $cmp.i18n.required
        },
        key: 0
      }, [api_text("*")]) : null, api_dynamic($cmp.label)]), $cmp.fieldLevelHelp ? api_custom_element("lightning-helptext", _lightningHelptext, {
        props: {
          "content": $cmp.fieldLevelHelp
        },
        key: 2
      }, []) : null, api_element("div", {
        classMap: {
          "slds-form-element__control": true,
          "slds-input-has-icon": true,
          "slds-input-has-icon_right": true
        },
        key: 6
      }, [api_element("input", {
        classMap: {
          "slds-input": true
        },
        attrs: {
          "type": "text",
          "id": api_scoped_id("input"),
          "name": $cmp.name,
          "placeholder": $cmp.placeholder,
          "aria-label": $cmp.ariaLabel,
          "autocomplete": $cmp.autocomplete
        },
        props: {
          "value": $cmp.displayValue,
          "required": $cmp.required,
          "readOnly": $cmp.readOnly,
          "disabled": $cmp.disabled
        },
        key: 3,
        on: {
          "input": _m0 || ($ctx._m0 = api_bind($cmp.handleInput)),
          "change": _m1 || ($ctx._m1 = api_bind($cmp.handleInputChange)),
          "focusin": _m2 || ($ctx._m2 = api_bind($cmp.onFocusIn)),
          "focusout": _m3 || ($ctx._m3 = api_bind($cmp.handleInputBlur)),
          "keydown": _m4 || ($ctx._m4 = api_bind($cmp.handleInputKeydown)),
          "click": _m5 || ($ctx._m5 = api_bind($cmp.handleInputClick))
        }
      }, []), api_custom_element("lightning-button-icon", _lightningButtonIcon, {
        classMap: {
          "slds-input__icon": true,
          "slds-input__icon_right": true
        },
        props: {
          "iconName": "utility:event",
          "variant": "bare",
          "disabled": $cmp.computedIconDisabledState,
          "title": $cmp.i18n.selectDate,
          "alternativeText": $cmp.i18n.selectDate
        },
        key: 4,
        on: {
          "click": _m6 || ($ctx._m6 = api_bind($cmp.handleDatePickerIconClick)),
          "keydown": _m7 || ($ctx._m7 = api_bind($cmp.handleDatePickerIconKeyDown)),
          "focusin": _m8 || ($ctx._m8 = api_bind($cmp.onFocusIn)),
          "focusout": _m9 || ($ctx._m9 = api_bind($cmp.onFocusOut))
        }
      }, []), $cmp.isCalendarVisible ? api_custom_element("lightning-calendar", _lightningCalendar, {
        props: {
          "value": $cmp.value,
          "min": $cmp.min,
          "max": $cmp.max
        },
        key: 5,
        on: {
          "select": _m10 || ($ctx._m10 = api_bind($cmp.handleDateSelect)),
          "ready": _m11 || ($ctx._m11 = api_bind($cmp.startPositioning)),
          "keydown": _m12 || ($ctx._m12 = api_bind($cmp.handleCalendarKeyDown)),
          "focusin": _m13 || ($ctx._m13 = api_bind($cmp.onFocusIn)),
          "focusout": _m14 || ($ctx._m14 = api_bind($cmp.onFocusOut))
        }
      }, []) : null])]), $cmp.errorMessage ? api_element("div", {
        classMap: {
          "slds-form-element__help": true
        },
        attrs: {
          "id": api_scoped_id("error-message"),
          "data-error-message": true,
          "aria-live": "assertive"
        },
        key: 8
      }, [api_dynamic($cmp.errorMessage)]) : null];
    }

    var _tmpl$i = lwc.registerTemplate(tmpl$j);
    tmpl$j.stylesheets = [];
    tmpl$j.stylesheetTokens = {
      hostAttribute: "lightning-datepicker_datepicker-host",
      shadowAttribute: "lightning-datepicker_datepicker"
    };

    var labelInvalidDate = 'Your entry does not match the allowed format {0}.';

    var labelRangeOverflow$1 = 'Value must be {0} or earlier.';

    var labelRangeUnderflow$1 = 'Value must be {0} or later.';

    var labelSelectDate = 'Select a date';

    var shortDateFormat = 'M/d/yyyy';

    var longDateFormat = 'MMMM d, yyyy';

    function handleKeyDownOnDatePickerIcon(event, datepickerInterface) {
      switch (normalizeKeyValue(event.key)) {
        case 'Enter':
        case ' ':
          preventDefaultAndStopPropagation$2(event);
          datepickerInterface.showCalendar();
          break;

        case 'Escape':
          preventDefaultAndStopPropagation$2(event);
          datepickerInterface.hideCalendar();
          break;
      }
    }
    function handleBasicKeyDownBehaviour(event, datepickerInterface) {
      if (!datepickerInterface.isCalendarVisible()) {
        return;
      }

      if (normalizeKeyValue(event.key) === 'Escape') {
        preventDefaultAndStopPropagation$2(event);
        datepickerInterface.hideCalendar();
      }
    }

    function preventDefaultAndStopPropagation$2(event) {
      event.preventDefault();
      event.stopPropagation();
    }

    const i18n$8 = {
      invalidDate: labelInvalidDate,
      rangeOverflow: labelRangeOverflow$1,
      rangeUnderflow: labelRangeUnderflow$1,
      required: labelRequired,
      selectDate: labelSelectDate
    };
    const ARIA_CONTROLS$2 = 'aria-controls';
    const ARIA_LABEL$1 = 'aria-label';
    const ARIA_LABELLEDBY$1 = 'aria-labelledby';
    const ARIA_DESCRIBEDBY$3 = 'aria-describedby';
    const DATE_STYLE = {
      SHORT: 'short',
      MEDIUM: 'medium',
      LONG: 'long'
    };

    class LightningDatePicker extends lwc.LightningElement {
      get messageWhenBadInput() {
        return this._messageWhenBadInput || formatLabel(this.i18n.invalidDate, this.dateFormat);
      }

      set messageWhenBadInput(message) {
        this._messageWhenBadInput = message;
      }

      get messageWhenRangeOverflow() {
        return this._messageWhenRangeOverflow || formatLabel(this.i18n.rangeOverflow, this.max);
      }

      set messageWhenRangeOverflow(message) {
        this._messageWhenRangeOverflow = message;
      }

      get messageWhenRangeUnderflow() {
        return this._messageWhenRangeUnderflow || formatLabel(this.i18n.rangeUnderflow, this.min);
      }

      set messageWhenRangeUnderflow(message) {
        this._messageWhenRangeUnderflow = message;
      } // setter is required to properly trigger update


      get ariaLabel() {
        return this._ariaLabel;
      }

      set ariaLabel(val) {
        this._ariaLabel = val;
        this.synchronizeA11y();
      }

      set ariaLabelledByElement(el) {
        this._ariaLabelledBy = el;
        this.synchronizeA11y();
      }

      get ariaLabelledByElement() {
        return this._ariaLabelledBy;
      }

      set ariaControlsElement(el) {
        this._ariaControls = el;
        this.synchronizeA11y();
      }

      get ariaControlsElement() {
        return this._ariaControls;
      }

      set ariaDescribedByElements(el) {
        if (Array.isArray(el)) {
          this._ariaDescribedBy = el;
        } else {
          this._ariaDescribedBy = [el];
        }

        this.synchronizeA11y();
      }

      get ariaDescribedByElements() {
        return this._ariaDescribedBy;
      }

      get ariaLabelledbyId() {
        return getRealDOMId(this._ariaLabelledBy);
      }

      get ariaControlsId() {
        return getRealDOMId(this.ariaControlsElement);
      }

      synchronizeA11y() {
        const input = this.template.querySelector('input');

        if (!input) {
          return;
        }

        synchronizeAttrs(input, {
          [ARIA_LABELLEDBY$1]: this.ariaLabelledbyId,
          [ARIA_DESCRIBEDBY$3]: this.computedAriaDescribedby,
          [ARIA_CONTROLS$2]: this.ariaControlsId,
          [ARIA_LABEL$1]: this._ariaLabel
        });
      }

      renderedCallback() {
        this.synchronizeA11y();
      }

      get value() {
        return this._value;
      }

      set value(newValue) {
        const normalizedDate = normalizeISODate(newValue, this.dateFormat);
        this._value = normalizedDate.isoValue;
        this._displayValue = normalizedDate.displayValue;
      }

      get disabled() {
        return this._disabled;
      }

      set disabled(value) {
        this._disabled = normalizeBoolean(value);
      }

      get readOnly() {
        return this._readonly;
      }

      set readOnly(value) {
        this._readonly = normalizeBoolean(value);
      }

      get required() {
        return this._required;
      }

      set required(value) {
        this._required = normalizeBoolean(value);
      }

      set fieldLevelHelp(value) {
        this._fieldLevelHelp = value;
      }

      get fieldLevelHelp() {
        return this._fieldLevelHelp;
      }

      get variant() {
        return this._variant || VARIANT.STANDARD;
      }

      set variant(value) {
        this._variant = normalizeVariant$1(value);
      }

      focus() {
        if (this.connected) {
          this.inputElement.focus();
        }
      }

      blur() {
        if (this.connected) {
          this.inputElement.blur();
        }
      }

      showHelpMessage(message) {
        if (!message) {
          this.classList.remove('slds-has-error');
          this._errorMessage = '';
        } else {
          this.classList.add('slds-has-error');
          this._errorMessage = message;
        }
      }

      hasBadInput() {
        return !!this._displayValue && this._value === null;
      }

      get dateStyle() {
        return this._dateStyle;
      }

      set dateStyle(value) {
        this._dateStyle = normalizeString(value, {
          fallbackValue: DATE_STYLE.MEDIUM,
          validValues: [DATE_STYLE.SHORT, DATE_STYLE.MEDIUM, DATE_STYLE.LONG]
        });
        this.dateFormat = this.getDateFormatFromStyle(this._dateStyle);
        const normalizedDate = normalizeISODate(this._value, this.dateFormat);
        this._displayValue = normalizedDate.displayValue;
      }

      constructor() {
        super();
        this._disabled = false;
        this._readonly = false;
        this._required = false;
        this._value = null;
        this._calendarVisible = false;
        this._displayValue = null;
        this._errorMessage = '';
        this._fieldLevelHelp = void 0;
        this._variant = void 0;
        this.label = void 0;
        this.name = void 0;
        this.max = void 0;
        this.min = void 0;
        this.placeholder = void 0;
        this.autocomplete = void 0;
        this.messageWhenValueMissing = void 0;
        this._ariaLabelledBy = void 0;
        this._ariaControls = void 0;
        this._ariaDescribedBy = [];
        this.uniqueId = generateUniqueId();
      }

      connectedCallback() {
        this.connected = true;
        this.keyboardInterface = this.datepickerKeyboardInterface();
      }

      disconnectedCallback() {
        this.connected = false;
      }

      get i18n() {
        return i18n$8;
      }

      get isLabelHidden() {
        return this.variant === VARIANT.LABEL_HIDDEN;
      }

      get computedLabelClass() {
        return classSet('slds-form-element__label').add({
          'slds-assistive-text': this.isLabelHidden
        }).toString();
      }

      get computedUniqueErrorMessageElementId() {
        const el = this.template.querySelector('[data-error-message]');
        return getRealDOMId(el);
      }

      get isCalendarVisible() {
        return this._calendarVisible;
      }

      get displayValue() {
        return this._displayValue;
      }

      get errorMessage() {
        return this._errorMessage;
      }

      get computedIconDisabledState() {
        return this.disabled || this.readOnly;
      }

      get computedAriaDescribedby() {
        const ariaValues = [];

        if (this.errorMessage) {
          ariaValues.push(this.computedUniqueErrorMessageElementId);
        }

        this._ariaDescribedBy.forEach(item => {
          const id = getRealDOMId(item);

          if (id) {
            ariaValues.push(id);
          }
        });

        return normalizeAriaAttribute(ariaValues);
      }

      handleInputChange(event) {
        event.stopPropagation(); // keeping the display value in sync with the element's value

        this._displayValue = event.currentTarget.value;
        this._value = this.parseFormattedDate(this._displayValue);
        this.dispatchChangeEvent();
      }

      handleInput() {
        // keeping the display value in sync with the element's value
        this._displayValue = this.inputElement.value; // IE11 fires an input event along with the click event when the element has a placeholder.
        // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/101220/
        // remove this block when we stop support for IE11

        if (isIE11 && this.placeholder !== undefined) {
          return;
        } // Making sure that the focus remains on the input and we're not triggering leave


        this.hideCalendarAndFocusTrigger();
      }

      handleInputBlur() {
        if (this._value !== null) {
          const normalizedDate = normalizeISODate(this._value, this.dateFormat);
          this._displayValue = normalizedDate.displayValue;
        }

        this.onFocusOut();
      }

      handleInputClick(event) {
        if (this.readOnly) {
          return;
        }

        this.calendarTrigger = event.target;
        this.showCalendar();
      }
      /**
       * When the element gains focus this function is called.
       */


      onFocusIn() {
        if (this._pendingFocusOut) {
          this._pendingFocusOut = false;
        }

        if (!this._focused) {
          this.dispatchEvent(new CustomEvent('focus'));
        }

        this._focused = true;
      }
      /**
       * When the element looses its focus this function is called.
       */


      onFocusOut() {
        // This assumes that a focusin will be dispatched after a focusout
        this._pendingFocusOut = true; // eslint-disable-next-line @lwc/lwc/no-async-operation

        requestAnimationFrame(() => {
          if (this._pendingFocusOut) {
            this._focused = false;
            this.hideCalendar();
            this.dispatchEvent(new CustomEvent('blur'));
          }
        });
      }

      handleDatePickerIconClick(event) {
        if (this.readOnly || this.disabled) {
          return;
        }

        this.calendarTrigger = event.target;
        this.showAndFocusCalendar();
      }

      handleInputKeydown(event) {
        this.calendarTrigger = event.target;
        handleBasicKeyDownBehaviour(event, this.keyboardInterface);
      }

      handleDatePickerIconKeyDown(event) {
        this.calendarTrigger = event.target;
        handleKeyDownOnDatePickerIcon(event, this.keyboardInterface);
      }

      handleCalendarKeyDown(event) {
        handleBasicKeyDownBehaviour(event, this.keyboardInterface);
      }

      handleDateSelect(event) {
        event.stopPropagation();
        this._value = event.detail.value;
        this._displayValue = normalizeISODate(this._value, this.dateFormat).displayValue;
        this.hideCalendarAndFocusTrigger();
        this.dispatchChangeEvent();
      }

      showAndFocusCalendar() {
        this.showCalendar(); // eslint-disable-next-line @lwc/lwc/no-async-operation

        requestAnimationFrame(() => {
          this.focusCalendar();
        });
      }

      hideCalendarAndFocusTrigger() {
        this.hideCalendar();

        if (this.calendarTrigger) {
          this.calendarTrigger.focus();
        }
      }

      focusCalendar() {
        const calendar = this.template.querySelector('lightning-calendar');

        if (calendar) {
          calendar.focus();
        }
      }

      startPositioning() {
        if (!this._relationship) {
          this._relationship = startPositioning(this, {
            target: () => this.template.querySelector('input'),
            element: () => this.template.querySelector('lightning-calendar').shadowRoot.querySelector('div'),
            align: {
              horizontal: Direction.Right,
              vertical: Direction.Top
            },
            targetAlign: {
              horizontal: Direction.Right,
              vertical: Direction.Bottom
            },
            autoFlip: true,
            // Auto flip direction if not have enough space
            leftAsBoundary: true // horizontal flip uses target left as boundary

          });
        } else {
          this._relationship.reposition();
        }
      }

      stopPositioning() {
        if (this._relationship) {
          stopPositioning(this._relationship);
          this._relationship = null;
        }
      }

      showCalendar() {
        if (!this.isCalendarVisible) {
          this.rootElement.classList.add('slds-is-open');
          this._calendarVisible = true;
        }
      }

      hideCalendar() {
        if (this.isCalendarVisible) {
          this.rootElement.classList.remove('slds-is-open');
          this.stopPositioning();
          this._calendarVisible = false;
        }
      }

      get rootElement() {
        return this.template.querySelector('div');
      }

      get inputElement() {
        return this.template.querySelector('input');
      }

      get dateFormat() {
        if (!this._dateFormat) {
          this._dateFormat = this.getDateFormatFromStyle();
        }

        return this._dateFormat;
      }

      set dateFormat(value) {
        this._dateFormat = value;
      }

      getDateFormatFromStyle(dateStyle) {
        let dateFormat;

        switch (dateStyle) {
          case DATE_STYLE.SHORT:
            dateFormat = shortDateFormat;
            break;

          case DATE_STYLE.LONG:
            dateFormat = longDateFormat;
            break;

          default:
            dateFormat = mediumDateFormat;
            break;
        }

        return dateFormat;
      }

      dispatchChangeEvent() {
        this.dispatchEvent(new CustomEvent('change', {
          composed: true,
          bubbles: true,
          detail: {
            value: this._value
          }
        }));
      }

      datepickerKeyboardInterface() {
        const that = this;
        return {
          showCalendar() {
            that.showAndFocusCalendar();
          },

          hideCalendar() {
            that.hideCalendarAndFocusTrigger();
          },

          isCalendarVisible() {
            return that.isCalendarVisible;
          }

        };
      }

      parse(dateString) {
        // We cannot use parseDateTimeISO8601 here because that method does not have a strict flag. If the value is not an ISO string, that method will parse using the native Date()
        // Alternatively we could call isValidISODateTimeString and then parseDateTimeISO8601.
        return parseDateTime(dateString, STANDARD_DATE_FORMAT, true);
      }

      get allowedDateFormats() {
        // We should prioritize the long, because a long date matched with the medium format. An issue in aura?
        // Ex: September 8, 2017 when be parsed with the medium format, returns a valid iso date.
        return [longDateFormat, mediumDateFormat, shortDateFormat];
      }
      /**
       * Parses the input date and sets the dateFormat used to parse the displayValue
       * if it is a valid Date.
       *
       * @param {String} displayValue - The input date.
       * @return {null | string} - A normalized formatted date if displayValue is valid. null otherwise.
       */


      parseFormattedDate(displayValue) {
        const allowedFormats = this.allowedDateFormats;
        const n = allowedFormats.length;
        let i = 0,
            value = null;

        do {
          value = normalizeFormattedDate(displayValue, allowedFormats[i]);
          i++;
        } while (value === null && i < n);

        return value;
      }

    }

    LightningDatePicker.delegatesFocus = true;

    lwc.registerDecorators(LightningDatePicker, {
      publicProps: {
        label: {
          config: 0
        },
        name: {
          config: 0
        },
        max: {
          config: 0
        },
        min: {
          config: 0
        },
        placeholder: {
          config: 0
        },
        autocomplete: {
          config: 0
        },
        messageWhenValueMissing: {
          config: 0
        },
        messageWhenBadInput: {
          config: 3
        },
        messageWhenRangeOverflow: {
          config: 3
        },
        messageWhenRangeUnderflow: {
          config: 3
        },
        ariaLabel: {
          config: 3
        },
        ariaLabelledByElement: {
          config: 3
        },
        ariaControlsElement: {
          config: 3
        },
        ariaDescribedByElements: {
          config: 3
        },
        value: {
          config: 3
        },
        disabled: {
          config: 3
        },
        readOnly: {
          config: 3
        },
        required: {
          config: 3
        },
        fieldLevelHelp: {
          config: 3
        },
        variant: {
          config: 3
        },
        dateStyle: {
          config: 3
        }
      },
      publicMethods: ["focus", "blur", "showHelpMessage", "hasBadInput"],
      track: {
        _disabled: 1,
        _readonly: 1,
        _required: 1,
        _value: 1,
        _calendarVisible: 1,
        _displayValue: 1,
        _errorMessage: 1,
        _fieldLevelHelp: 1,
        _variant: 1
      },
      fields: ["_ariaLabelledBy", "_ariaControls", "_ariaDescribedBy"]
    });

    var _lightningDatepicker = lwc.registerComponent(LightningDatePicker, {
      tmpl: _tmpl$i
    });

    function tmpl$k($api, $cmp, $slotset, $ctx) {
      const {
        t: api_text,
        h: api_element,
        d: api_dynamic,
        c: api_custom_element,
        b: api_bind,
        gid: api_scoped_id
      } = $api;
      const {
        _m0,
        _m1,
        _m2,
        _m3,
        _m4,
        _m5,
        _m6
      } = $ctx;
      return [api_element("label", {
        className: $cmp.computedLabelClass,
        key: 1
      }, [$cmp.required ? api_element("abbr", {
        classMap: {
          "slds-required": true
        },
        attrs: {
          "title": $cmp.i18n.required
        },
        key: 0
      }, [api_text("*")]) : null, api_dynamic($cmp.label)]), $cmp.fieldLevelHelp ? api_custom_element("lightning-helptext", _lightningHelptext, {
        props: {
          "content": $cmp.fieldLevelHelp
        },
        key: 2
      }, []) : null, api_element("div", {
        classMap: {
          "slds-form-element__control": true
        },
        key: 4
      }, [api_custom_element("lightning-base-combobox", _lightningBaseCombobox, {
        props: {
          "dropdownHeight": "small",
          "name": $cmp.name,
          "variant": "lookup",
          "placeholder": $cmp.placeholder,
          "disabled": $cmp.disabled,
          "readOnly": $cmp.readOnly,
          "items": $cmp.items,
          "inputText": $cmp.displayValue,
          "inputIconName": "utility:clock",
          "inputLabel": $cmp.ariaLabel,
          "inputControlsElement": $cmp.ariaControlsElement,
          "inputLabelledByElement": $cmp.ariaLabelledByElement,
          "dropdownAlignment": "auto"
        },
        key: 3,
        on: {
          "ready": _m0 || ($ctx._m0 = api_bind($cmp.handleReady)),
          "textchange": _m1 || ($ctx._m1 = api_bind($cmp.handleInputChange)),
          "textinput": _m2 || ($ctx._m2 = api_bind($cmp.handleTextInput)),
          "dropdownopenrequest": _m3 || ($ctx._m3 = api_bind($cmp.handleDropdownOpenRequest)),
          "focus": _m4 || ($ctx._m4 = api_bind($cmp.handleFocus)),
          "blur": _m5 || ($ctx._m5 = api_bind($cmp.handleBlur)),
          "select": _m6 || ($ctx._m6 = api_bind($cmp.handleTimeSelect))
        }
      }, [])]), $cmp._errorMessage ? api_element("div", {
        classMap: {
          "slds-form-element__help": true
        },
        attrs: {
          "id": api_scoped_id("error-message"),
          "data-error-message": true,
          "aria-live": "assertive"
        },
        key: 5
      }, [api_dynamic($cmp._errorMessage)]) : null];
    }

    var _tmpl$j = lwc.registerTemplate(tmpl$k);
    tmpl$k.stylesheets = [];
    tmpl$k.stylesheetTokens = {
      hostAttribute: "lightning-timepicker_timepicker-host",
      shadowAttribute: "lightning-timepicker_timepicker"
    };

    var shortTimeFormat = 'h:mm a';

    /* returns the closes time in the list that should be highlighted in case the value is not in the list. E.g.
    - if value is 16:18 and the list has 15 minute intervals, returns 16:30
    */

    function getTimeToHighlight(value, step) {
      const selectedTime = parseTime(value);

      if (!selectedTime) {
        return null;
      }

      selectedTime.setSeconds(0, 0);
      let closestHour = selectedTime.getHours();
      let closestMinute = selectedTime.getMinutes();
      const mod = closestMinute % step;
      const quotient = Math.floor(closestMinute / step);

      if (mod !== 0) {
        const multiplier = mod < step / 2 ? quotient : quotient + 1;
        closestMinute = multiplier * step;

        if (closestMinute >= 60) {
          if (closestHour === 23) {
            closestMinute -= step;
          } else {
            closestMinute = 0;
            closestHour++;
          }
        }

        selectedTime.setHours(closestHour);
        selectedTime.setMinutes(closestMinute);
      }

      return getISOTimeString(selectedTime);
    }

    const i18n$9 = {
      invalidDate: labelInvalidDate,
      rangeOverflow: labelRangeOverflow$1,
      rangeUnderflow: labelRangeUnderflow$1,
      required: labelRequired
    };
    const STEP = 15; // in minutes

    const TIME_STYLE = {
      SHORT: 'short',
      MEDIUM: 'medium',
      LONG: 'long'
    };

    class LightningTimePicker extends lwc.LightningElement {
      constructor(...args) {
        super(...args);
        this._disabled = false;
        this._required = false;
        this._displayValue = null;
        this._value = null;
        this._min = void 0;
        this._max = void 0;
        this._items = [];
        this._fieldLevelHelp = void 0;
        this._variant = 'lookup';
        this._mainInputId = void 0;
        this._errorMessage = void 0;
        this._readonly = true;
        this._describedByElements = [];
        this.label = void 0;
        this.name = void 0;
        this.placeholder = '';
        this.ariaLabelledByElement = void 0;
        this.ariaControlsElement = void 0;
        this.ariaLabel = void 0;
        this.messageWhenValueMissing = void 0;
        this._ariaDescribedByElements = void 0;
      }

      get messageWhenBadInput() {
        return this._messageWhenBadInput || formatLabel(i18n$9.invalidDate, this.timeFormat);
      }

      set messageWhenBadInput(message) {
        this._messageWhenBadInput = message;
      }

      get messageWhenRangeOverflow() {
        // using isoValue since the manually entered time could have seconds/milliseconds and the locale format generally doesn't have this precision
        return this._messageWhenRangeOverflow || formatLabel(i18n$9.rangeOverflow, normalizeISOTime(this.max, this.timeFormat).isoValue);
      }

      set messageWhenRangeOverflow(message) {
        this._messageWhenRangeOverflow = message;
      }

      get messageWhenRangeUnderflow() {
        return this._messageWhenRangeUnderflow || formatLabel(i18n$9.rangeUnderflow, normalizeISOTime(this.min, this.timeFormat).isoValue);
      }

      set messageWhenRangeUnderflow(message) {
        this._messageWhenRangeUnderflow = message;
      }

      set ariaDescribedByElements(el) {
        if (Array.isArray(el)) {
          this._ariaDescribedByElements = el;
        } else {
          this.ariaDescribedByElements = [el];
        }
      }

      get ariaDescribedByElements() {
        return this._ariaDescribedByElements;
      }

      get value() {
        return this._value;
      }

      set value(newValue) {
        const normalizedValue = removeTimeZoneSuffix(newValue);
        const normalizedTime = normalizeISOTime(normalizedValue, this.timeFormat);
        this._value = normalizedTime.isoValue;
        this._displayValue = normalizedTime.displayValue;
      }

      get disabled() {
        return this._disabled;
      }

      set disabled(value) {
        this._disabled = normalizeBoolean(value);
      }

      get readOnly() {
        return this._readonly;
      }

      set readOnly(value) {
        this._readonly = normalizeBoolean(value);

        if (this._readonly) {
          this._variant = VARIANT.STANDARD;
        }
      }

      get required() {
        return this._required;
      }

      set required(value) {
        this._required = normalizeBoolean(value);
      }

      hasBadInput() {
        return !!this._displayValue && this._value === null;
      }

      showHelpMessage(message) {
        if (!message) {
          this.classList.remove('slds-has-error');
          this._errorMessage = '';
        } else {
          this.classList.add('slds-has-error');
          this._errorMessage = message;
        }
      }

      set fieldLevelHelp(value) {
        this._fieldLevelHelp = value;
      }

      get fieldLevelHelp() {
        return this._fieldLevelHelp;
      }

      get variant() {
        return this._variant || VARIANT.STANDARD;
      }

      set variant(value) {
        this._variant = normalizeVariant$1(value);
      }

      get max() {
        return this._max;
      }

      set max(newValue) {
        this._max = newValue;

        if (this.connected) {
          this.rebuildAndUpdateTimeList();
        }
      }

      get min() {
        return this._min;
      }

      set min(newValue) {
        this._min = newValue;

        if (this.connected) {
          this.rebuildAndUpdateTimeList();
        }
      }
      /**
       * Sets focus on the input element.
       */


      focus() {
        if (this.connected) {
          this.getCombobox().focus();
        }
      }
      /**
       * Removes keyboard focus from the input element.
       */


      blur() {
        if (this.connected) {
          this.getCombobox().blur();
        }
      }

      get timeStyle() {
        return this._timeStyle;
      }

      set timeStyle(value) {
        this._timeStyle = normalizeString(value, {
          fallbackValue: TIME_STYLE.SHORT,
          validValues: [TIME_STYLE.SHORT, TIME_STYLE.MEDIUM, TIME_STYLE.LONG]
        });
        this.timeFormat = this.getTimeFormatFromStyle(this._timeStyle);
        const normalizedDate = normalizeISOTime(this._value, this.timeFormat);
        this._displayValue = normalizedDate.displayValue;
      }

      connectedCallback() {
        this.connected = true;
      }

      disconnectedCallback() {
        this.connected = false;
      }

      synchronizeA11y() {
        const label = this.template.querySelector('label');
        const comboBox = this.template.querySelector('lightning-base-combobox');
        let describedByElements = [];

        if (this._ariaDescribedByElements) {
          describedByElements = describedByElements.concat(this._ariaDescribedByElements);
        }

        const errorMessage = this.template.querySelector('[data-error-message]');

        if (errorMessage) {
          describedByElements.push(errorMessage);
        }

        comboBox.inputDescribedByElements = describedByElements;
        synchronizeAttrs(label, {
          for: this._mainInputId
        });
      }

      renderedCallback() {
        this.synchronizeA11y();
      }

      get displayValue() {
        return this._displayValue;
      }

      get items() {
        return this._items;
      }

      get i18n() {
        return i18n$9;
      }

      get isLabelHidden() {
        return this.variant === VARIANT.LABEL_HIDDEN;
      }

      get computedLabelClass() {
        return classSet('slds-form-element__label').add({
          'slds-assistive-text': this.isLabelHidden
        }).toString();
      }

      handleReady(e) {
        this._mainInputId = e.detail.id;
      }

      buildTimeList() {
        // We should always display the options in the short style since m/l will add an extra :00 to the options.
        const optionsTimeFormat = shortTimeFormat;
        const timeList = [];
        const minTime = parseTime(removeTimeZoneSuffix(this.min));
        const minHour = minTime ? minTime.getHours() : 0;
        const maxTime = parseTime(removeTimeZoneSuffix(this.max));
        const maxHour = maxTime ? maxTime.getHours() + 1 : 24;
        const date = new Date();

        for (let hour = minHour; hour < maxHour; hour++) {
          for (let minutes = 0; minutes < 60; minutes += STEP) {
            date.setHours(hour, minutes);
            date.setSeconds(0, 0);

            if (this.isBeforeMinTime(date, minTime)) {
              continue; // eslint-disable-line no-continue
            }

            if (this.isAfterMaxTime(date, maxTime)) {
              break;
            } // @todo: should we always display it short in the combobox given that it makes no sense?


            timeList.push({
              type: 'option-inline',
              text: this.format(date, optionsTimeFormat),
              value: this.format(date)
            });
          }
        }

        return timeList;
      }

      get timeList() {
        if (!this._timeList) {
          this._timeList = this.buildTimeList();
        }

        if (!this._value) {
          return this._timeList;
        }

        const timeToHighlight = getTimeToHighlight(this._value, STEP);

        const timeList = this._timeList.map(item => {
          const itemCopy = Object.assign({}, item);

          if (item.value === this._value) {
            itemCopy.iconName = 'utility:check';
          }

          if (item.value === timeToHighlight) {
            itemCopy.highlight = true;
          }

          return itemCopy;
        });

        return timeList;
      }

      rebuildAndUpdateTimeList() {
        // forcing the time list to be rebuilt
        this._timeList = null;
        this._items = this.timeList;
      }

      get timeFormat() {
        if (!this._timeFormat) {
          this._timeFormat = this.getTimeFormatFromStyle();
        }

        return this._timeFormat;
      }

      set timeFormat(value) {
        this._timeFormat = value;
      }

      getCombobox() {
        return this.template.querySelector('lightning-base-combobox');
      }

      handleFocus() {
        this.dispatchEvent(new CustomEvent('focus'));
      }

      handleBlur() {
        this.dispatchEvent(new CustomEvent('blur'));
      }

      handleInputChange(event) {
        event.preventDefault();
        event.stopPropagation(); // keeping the display value in sync with the element's value

        this._displayValue = event.detail.text;
        this._value = this.parseFormattedTime(this._displayValue);
        this._items = this.timeList;
        this.dispatchChangeEvent();
      }

      handleTextInput(event) {
        event.preventDefault();
        event.stopPropagation(); // keeping the display value in sync with the element's value

        this._displayValue = event.detail.text;
      }

      handleTimeSelect(event) {
        event.stopPropagation(); // for some reason this event is fired without detail from grouped-combobox

        if (!event.detail) {
          return;
        }

        this._value = event.detail.value;
        this._displayValue = normalizeISOTime(this._value, this.timeFormat).displayValue;
        this._items = this.timeList;
        this.dispatchChangeEvent();
      }

      handleDropdownOpenRequest() {
        this._items = this.timeList;
      }

      dispatchChangeEvent() {
        this.dispatchEvent(new CustomEvent('change', {
          composed: true,
          bubbles: true,
          detail: {
            value: this._value
          }
        }));
      }

      format(date, formatString) {
        if (formatString) {
          return formatTime(date, formatString);
        }

        return getISOTimeString(date);
      }

      isBeforeMinTime(date, minTime) {
        const minDate = minTime || parseTime(removeTimeZoneSuffix(this.min));
        return minDate ? isBefore(date, minDate, 'minute') : false;
      }

      isAfterMaxTime(date, maxTime) {
        const maxDate = maxTime || parseTime(removeTimeZoneSuffix(this.max));
        return maxDate ? isAfter(date, maxDate, 'minute') : false;
      }

      getTimeFormatFromStyle(timeStyle) {
        let timeFormat;

        switch (timeStyle) {
          case TIME_STYLE.MEDIUM:
          case TIME_STYLE.LONG:
            timeFormat = mediumTimeFormat;
            break;

          default:
            timeFormat = shortTimeFormat;
            break;
        }

        return timeFormat;
      }

      get allowedTimeFormats() {
        // the locale.timeFormat is the medium format. Locale dont supports a large
        // time format at the moment.
        return [mediumTimeFormat, shortTimeFormat];
      }
      /**
       * Parses the input time and sets the timeFormat used to parse the displayValue
       * if it is a valid time.
       *
       * @param {String} displayValue - The input date.
       * @return {null | string} - A normalized formatted time if displayValue is valid. null otherwise.
       */


      parseFormattedTime(displayValue) {
        const allowedFormats = this.allowedTimeFormats;
        const n = allowedFormats.length;
        let i = 0,
            value = null;

        do {
          value = normalizeFormattedTime(displayValue, allowedFormats[i]);
          i++;
        } while (value === null && i < n);

        if (value !== null) {
          this.timeFormat = allowedFormats[i - 1];
        }

        return value;
      }

    }

    LightningTimePicker.delegatesFocus = true;

    lwc.registerDecorators(LightningTimePicker, {
      publicProps: {
        label: {
          config: 0
        },
        name: {
          config: 0
        },
        placeholder: {
          config: 0
        },
        ariaLabelledByElement: {
          config: 0
        },
        ariaControlsElement: {
          config: 0
        },
        ariaLabel: {
          config: 0
        },
        messageWhenValueMissing: {
          config: 0
        },
        messageWhenBadInput: {
          config: 3
        },
        messageWhenRangeOverflow: {
          config: 3
        },
        messageWhenRangeUnderflow: {
          config: 3
        },
        ariaDescribedByElements: {
          config: 3
        },
        value: {
          config: 3
        },
        disabled: {
          config: 3
        },
        readOnly: {
          config: 3
        },
        required: {
          config: 3
        },
        fieldLevelHelp: {
          config: 3
        },
        variant: {
          config: 3
        },
        max: {
          config: 3
        },
        min: {
          config: 3
        },
        timeStyle: {
          config: 3
        }
      },
      publicMethods: ["hasBadInput", "showHelpMessage", "focus", "blur"],
      track: {
        _disabled: 1,
        _required: 1,
        _displayValue: 1,
        _value: 1,
        _min: 1,
        _max: 1,
        _items: 1,
        _fieldLevelHelp: 1,
        _variant: 1,
        _mainInputId: 1,
        _errorMessage: 1,
        _readonly: 1,
        _describedByElements: 1
      },
      fields: ["_ariaDescribedByElements"]
    });

    var _lightningTimepicker = lwc.registerComponent(LightningTimePicker, {
      tmpl: _tmpl$j
    });

    function tmpl$l($api, $cmp, $slotset, $ctx) {
      const {
        t: api_text,
        h: api_element,
        d: api_dynamic,
        c: api_custom_element,
        b: api_bind,
        gid: api_scoped_id
      } = $api;
      const {
        _m0,
        _m1,
        _m2,
        _m3,
        _m4,
        _m5
      } = $ctx;
      return [api_element("div", {
        classMap: {
          "slds-form": true,
          "slds-form_compound": true
        },
        attrs: {
          "tabindex": "-1"
        },
        key: 10
      }, [api_element("fieldset", {
        classMap: {
          "slds-form-element": true
        },
        key: 9
      }, [api_element("legend", {
        className: $cmp.computedLabelClass,
        key: 1
      }, [$cmp.required ? api_element("abbr", {
        classMap: {
          "slds-required": true
        },
        attrs: {
          "title": $cmp.i18n.required
        },
        key: 0
      }, [api_text("*")]) : null, api_dynamic($cmp.label)]), $cmp.fieldLevelHelp ? api_custom_element("lightning-helptext", _lightningHelptext, {
        props: {
          "content": $cmp.fieldLevelHelp
        },
        key: 2
      }, []) : null, api_element("div", {
        classMap: {
          "slds-form-element__control": true
        },
        key: 7
      }, [api_element("div", {
        classMap: {
          "slds-form-element__group": true
        },
        key: 6
      }, [api_element("div", {
        classMap: {
          "slds-form-element__row": true
        },
        key: 5
      }, [api_custom_element("lightning-datepicker", _lightningDatepicker, {
        classMap: {
          "slds-form-element": true
        },
        props: {
          "min": $cmp.dateMin,
          "max": $cmp.dateMax,
          "label": $cmp.i18n.date,
          "name": $cmp.name,
          "variant": $cmp.variant,
          "placeholder": $cmp.placeholder,
          "readOnly": $cmp.readOnly,
          "disabled": $cmp.disabled,
          "autocomplete": $cmp.autocomplete,
          "dateStyle": $cmp.dateStyle
        },
        key: 3,
        on: {
          "focus": _m0 || ($ctx._m0 = api_bind($cmp.handleDatepickerFocus)),
          "blur": _m1 || ($ctx._m1 = api_bind($cmp.handleDatepickerBlur)),
          "change": _m2 || ($ctx._m2 = api_bind($cmp.handleDateChange))
        }
      }, []), api_custom_element("lightning-timepicker", _lightningTimepicker, {
        classMap: {
          "slds-form-element": true
        },
        props: {
          "label": $cmp.i18n.time,
          "name": $cmp.name,
          "variant": $cmp.variant,
          "timeStyle": $cmp.timeStyle,
          "placeholder": $cmp.placeholder,
          "readOnly": $cmp.readOnly,
          "disabled": $cmp.disabled
        },
        key: 4,
        on: {
          "focus": _m3 || ($ctx._m3 = api_bind($cmp.handleTimepickerFocus)),
          "blur": _m4 || ($ctx._m4 = api_bind($cmp.handleTimepickerBlur)),
          "change": _m5 || ($ctx._m5 = api_bind($cmp.handleTimeChange))
        }
      }, [])])])]), $cmp.customErrorMessage ? api_element("div", {
        classMap: {
          "slds-form-element__help": true
        },
        attrs: {
          "data-error-message": true,
          "id": api_scoped_id("errormessage"),
          "aria-live": "assertive"
        },
        key: 8
      }, [api_dynamic($cmp.customErrorMessage)]) : null])])];
    }

    var _tmpl$k = lwc.registerTemplate(tmpl$l);
    tmpl$l.stylesheets = [];
    tmpl$l.stylesheetTokens = {
      hostAttribute: "lightning-datetimepicker_datetimepicker-host",
      shadowAttribute: "lightning-datetimepicker_datetimepicker"
    };

    var labelDate = 'Date';

    var labelTime = 'Time';

    const i18n$a = {
      date: labelDate,
      rangeOverflow: labelRangeOverflow$1,
      rangeUnderflow: labelRangeUnderflow$1,
      required: labelRequired,
      time: labelTime
    };

    class LightningDateTimePicker extends lwc.LightningElement {
      // getters and setters necessary to trigger sync
      set timeAriaControls(val) {
        this._timeAriaControls = val;
        this.synchronizeA11y();
      }

      get timeAriaControls() {
        return this._timeAriaControls;
      }

      set timeAriaLabelledBy(val) {
        this._timeAriaLabelledBy = val;
        this.synchronizeA11y();
      }

      get timeAriaLabelledBy() {
        return this._timeAriaLabelledBy;
      }

      set timeAriaDescribedBy(val) {
        this._timeAriaDescribedBy = val;
        this.synchronizeA11y();
      }

      get timeAriaDescribedBy() {
        return this._timeAriaDescribedBy;
      }

      get messageWhenBadInput() {
        if (this._messageWhenBadInput) {
          return this._messageWhenBadInput;
        } else if (this.hasBadDateInput) {
          return this.getDatepicker().messageWhenBadInput;
        } else if (this.hasBadTimeInput) {
          return this.getTimepicker().messageWhenBadInput;
        }

        return null;
      }

      set messageWhenBadInput(message) {
        this._messageWhenBadInput = message;
      }

      get messageWhenRangeOverflow() {
        return this._messageWhenRangeOverflow || formatLabel(i18n$a.rangeOverflow, this.formattedMax);
      }

      set messageWhenRangeOverflow(message) {
        this._messageWhenRangeOverflow = message;
      }

      get messageWhenRangeUnderflow() {
        return this._messageWhenRangeUnderflow || formatLabel(i18n$a.rangeUnderflow, this.formattedMin);
      }

      set messageWhenRangeUnderflow(message) {
        this._messageWhenRangeUnderflow = message;
      }

      get max() {
        return this.maxValue;
      }

      set max(newValue) {
        this.maxValue = newValue;
        this.calculateFormattedMaxValue();
      }

      get min() {
        return this.minValue;
      }

      set min(newValue) {
        this.minValue = newValue;
        this.calculateFormattedMinValue();
      }

      get value() {
        return this._value;
      }

      set value(newValue) {
        if (this.connected) {
          this.setDateAndTimeValues(newValue);
        } else {
          // we set the values in connectedCallback to make sure timezone is available.
          this._initialValue = newValue;
        }
      }

      get timezone() {
        return this._timezone;
      }

      set timezone(newValue) {
        this._timezone = newValue;

        if (this.connected) {
          this.updateValuesForTimezone();
        }
      }

      get disabled() {
        return this._disabled;
      }

      set disabled(value) {
        this._disabled = normalizeBoolean(value);
      }

      get readOnly() {
        return this._readonly;
      }

      set readOnly(value) {
        this._readonly = normalizeBoolean(value);
      }

      get required() {
        return this._required;
      }

      set required(value) {
        this._required = normalizeBoolean(value);
      }

      set fieldLevelHelp(value) {
        this._fieldLevelHelp = value;
      }

      get fieldLevelHelp() {
        return this._fieldLevelHelp;
      }

      get variant() {
        return this._variant || VARIANT.STANDARD;
      }

      set variant(value) {
        this._variant = normalizeVariant$1(value);
      }
      /**
       * Sets focus on the date input element.
       */


      focus() {
        if (this.connected) {
          this.getDatepicker().focus();
        }
      }
      /**
       * Removes keyboard focus from the input elements.
       */


      blur() {
        if (this.connected) {
          this.getDatepicker().blur();
          this.getTimepicker().blur();
        }
      }

      hasBadInput() {
        return this.connected && (this.hasBadDateInput || this.hasBadTimeInput);
      }

      get hasBadDateInput() {
        return this.getDatepicker().hasBadInput();
      }

      get hasBadTimeInput() {
        const timeBadInput = this.getTimepicker().hasBadInput();
        const timeMissing = this.required && this._dateValue && !this._timeValue;
        return timeMissing || timeBadInput;
      }

      showHelpMessage(message) {
        if (!this.connected) {
          return;
        }

        if (!message) {
          this.clearHelpMessage();
          return;
        }

        if (this.hasBadDateInput && !this._messageWhenBadInput) {
          this.clearHelpMessage();
          this.getDatepicker().showHelpMessage(message);
          return;
        }

        if (this.hasBadTimeInput && !this._messageWhenBadInput) {
          this.clearHelpMessage();
          this.getTimepicker().showHelpMessage(message);
          return;
        }

        this.classList.add('slds-has-error');
        this._customErrorMessage = message;
      }

      clearHelpMessage() {
        this.classList.remove('slds-has-error');
        this._customErrorMessage = '';
        this.getDatepicker().showHelpMessage('');
        this.getTimepicker().showHelpMessage('');
      }

      get isLabelHidden() {
        return this.variant === VARIANT.LABEL_HIDDEN;
      }

      get computedLabelClass() {
        return classSet('slds-form-element__legend slds-form-element__label').add({
          'slds-assistive-text': this.isLabelHidden
        }).toString();
      }

      get i18n() {
        return i18n$a;
      }

      get customErrorMessage() {
        return this._customErrorMessage;
      }

      get dateMin() {
        return this._dateMin;
      }

      get dateMax() {
        return this._dateMax;
      }

      get errorMessageElementId() {
        return getRealDOMId(this.template.querySelector('[data-error-message]'));
      }

      get computedDateAriaDescribedBy() {
        const ariaValues = [];

        if (this.customErrorMessage) {
          ariaValues.push(this.errorMessageElementId);
        }

        if (this.dateAriaDescribedBy) {
          ariaValues.push(this.dateAriaDescribedBy);
        }

        return normalizeAriaAttribute(ariaValues);
      }

      get computedTimeAriaDescribedBy() {
        const ariaValues = [];

        if (this.customErrorMessage) {
          ariaValues.push(this.errorMessageElementId);
        }

        if (this.timeAriaDescribedBy) {
          ariaValues.push(this.timeAriaDescribedBy);
        }

        return normalizeAriaAttribute(ariaValues);
      }

      constructor() {
        super();
        this._disabled = false;
        this._readonly = false;
        this._required = false;
        this._fieldLevelHelp = void 0;
        this._variant = void 0;
        this._value = null;
        this._timezone = null;
        this._customErrorMessage = '';
        this._dateMin = void 0;
        this._dateMax = void 0;
        this.label = void 0;
        this.name = void 0;
        this.placeholder = '';
        this.dateStyle = void 0;
        this.timeStyle = void 0;
        this.timeAriaLabel = void 0;
        this.autocomplete = void 0;
        this.dateAriaControls = void 0;
        this.dateAriaLabel = void 0;
        this.dateAriaLabelledBy = void 0;
        this.dateAriaDescribedBy = void 0;
        this.messageWhenValueMissing = void 0;
        this.uniqueId = generateUniqueId();
      }

      synchronizeA11y() {
        const datepicker = this.template.querySelector('lightning-datepicker');
        const timepicker = this.template.querySelector('lightning-timepicker');

        if (datepicker) {
          synchronizeAttrs(datepicker, {
            ariaLabelledByElement: this.dateAriaLabelledBy,
            ariaDescribedByElements: this.computedDateAriaDescribedBy,
            ariaControlsElement: this.dateAriaControls,
            'aria-label': this.dateAriaLabel
          });
        }

        if (timepicker) {
          synchronizeAttrs(timepicker, {
            ariaLabelledByElement: this.timeAriaLabelledBy,
            ariaDescribedByElements: this.computedTimeAriaDescribedBy,
            ariaControlsElement: this.timeAriaControls,
            'aria-label': this.timeAriaLabel
          });
        }
      }

      connectedCallback() {
        this.classList.add('slds-form_compound');
        this.connected = true; // we set the initial values here in order to make sure timezone is available.

        this.updateValuesForTimezone(this._initialValue);
        this.interactingState = new InteractingState({
          debounceInteraction: true
        });
        this.interactingState.onenter(() => {
          this.dispatchEvent(new CustomEvent('focus'));
        });
        this.interactingState.onleave(() => {
          this.dispatchEvent(new CustomEvent('blur'));
        });
      }

      renderedCallback() {
        this.synchronizeA11y();
      }

      disconnectedCallback() {
        this.connected = false;
      }

      getTimepicker() {
        return this.template.querySelector('lightning-timepicker');
      }

      getDatepicker() {
        return this.template.querySelector('lightning-datepicker');
      }

      handleDatepickerFocus() {
        this._dateFocus = true;
        this.interactingState.enter();
      }

      handleTimepickerFocus() {
        this._timeFocus = true;
        this.interactingState.enter();
      }

      handleDatepickerBlur() {
        this._dateFocus = false; // timepicker fires focus before datepicker fires blur

        if (!this._timeFocus) {
          this.interactingState.leave();
        }
      }

      handleTimepickerBlur() {
        this._timeFocus = false; // datepicker fires focus before timepicker fires blur

        if (!this._dateFocus) {
          this.interactingState.leave();
        }
      }

      handleDateChange(event) {
        event.stopPropagation();

        if (!event.detail) {
          return;
        }

        this._dateValue = event.detail.value;

        if (this._dateValue) {
          this._timeValue = this._timeValue || getCurrentTime(this.timezone);
          this.setTimepickerValue(this._timeValue);
        }

        this.updateValue();
      }

      handleTimeChange(event) {
        event.stopPropagation();

        if (!event.detail) {
          return;
        }

        this._timeValue = event.detail.value;
        this.updateValue();
      }

      updateValue() {
        const dateValue = this._dateValue;
        const timeValue = this._timeValue;

        if (dateValue && timeValue) {
          const dateTimeString = dateValue + TIME_SEPARATOR + timeValue;
          this._value = normalizeFormattedDateTime(dateTimeString, this.timezone);
          this.dispatchChangeEvent();
        } else if (!dateValue) {
          this._value = null;
          this.dispatchChangeEvent();
        }
      }

      dispatchChangeEvent() {
        this.dispatchEvent(new CustomEvent('change', {
          composed: true,
          bubbles: true,
          detail: {
            value: this._value
          }
        }));
      }

      updateValuesForTimezone(datetimeValue) {
        this.setDateAndTimeValues(datetimeValue || this._value);
        this.calculateFormattedMinValue();
        this.calculateFormattedMaxValue();
      }

      setDateAndTimeValues(value) {
        const normalizedValue = normalizeISODateTime(value, this.timezone).isoValue;
        const isDateOnly = normalizedValue && value.indexOf(TIME_SEPARATOR) < 0;

        if (isDateOnly) {
          this._dateValue = value;
          this._value = this._dateValue;
          this.setDatepickerValue(value);
          return;
        }

        const dateAndTime = this.separateDateTime(normalizedValue);
        this._dateValue = dateAndTime && dateAndTime[0];
        this._timeValue = dateAndTime && dateAndTime[1];
        this._value = value;
        this.setDatepickerValue(this._dateValue);
        this.setTimepickerValue(this._timeValue);
      }

      setDatepickerValue(value) {
        const datepicker = this.getDatepicker();

        if (datepicker) {
          datepicker.value = value;
        }
      }

      setTimepickerValue(value) {
        const timepicker = this.getTimepicker();

        if (timepicker) {
          timepicker.value = value;
        }
      }

      calculateFormattedMinValue() {
        if (!this.min) {
          return;
        }

        const normalizedDate = normalizeISODateTime(this.min, this.timezone);
        this._dateMin = this.separateDateTime(normalizedDate.isoValue)[0];
        this.formattedMin = normalizedDate.displayValue;
      }

      calculateFormattedMaxValue() {
        if (!this.max) {
          return;
        }

        const normalizedDate = normalizeISODateTime(this.max, this.timezone);
        this._dateMax = this.separateDateTime(normalizedDate.isoValue)[0];
        this.formattedMax = normalizedDate.displayValue;
      }

      separateDateTime(isoString) {
        return typeof isoString === 'string' ? isoString.split(TIME_SEPARATOR) : null;
      }

    }

    LightningDateTimePicker.delegatesFocus = true;

    lwc.registerDecorators(LightningDateTimePicker, {
      publicProps: {
        label: {
          config: 0
        },
        name: {
          config: 0
        },
        placeholder: {
          config: 0
        },
        dateStyle: {
          config: 0
        },
        timeStyle: {
          config: 0
        },
        timeAriaLabel: {
          config: 0
        },
        autocomplete: {
          config: 0
        },
        timeAriaControls: {
          config: 3
        },
        timeAriaLabelledBy: {
          config: 3
        },
        timeAriaDescribedBy: {
          config: 3
        },
        dateAriaControls: {
          config: 0
        },
        dateAriaLabel: {
          config: 0
        },
        dateAriaLabelledBy: {
          config: 0
        },
        dateAriaDescribedBy: {
          config: 0
        },
        messageWhenValueMissing: {
          config: 0
        },
        messageWhenBadInput: {
          config: 3
        },
        messageWhenRangeOverflow: {
          config: 3
        },
        messageWhenRangeUnderflow: {
          config: 3
        },
        max: {
          config: 3
        },
        min: {
          config: 3
        },
        value: {
          config: 3
        },
        timezone: {
          config: 3
        },
        disabled: {
          config: 3
        },
        readOnly: {
          config: 3
        },
        required: {
          config: 3
        },
        fieldLevelHelp: {
          config: 3
        },
        variant: {
          config: 3
        }
      },
      publicMethods: ["focus", "blur", "hasBadInput", "showHelpMessage"],
      track: {
        _disabled: 1,
        _readonly: 1,
        _required: 1,
        _fieldLevelHelp: 1,
        _variant: 1,
        _value: 1,
        _timezone: 1,
        _customErrorMessage: 1,
        _dateMin: 1,
        _dateMax: 1
      }
    });

    var _lightningDatetimepicker = lwc.registerComponent(LightningDateTimePicker, {
      tmpl: _tmpl$k
    });

    function tmpl$m($api, $cmp, $slotset, $ctx) {
      const {
        h: api_element,
        t: api_text,
        d: api_dynamic,
        gid: api_scoped_id,
        c: api_custom_element,
        b: api_bind
      } = $api;
      const {
        _m0,
        _m1,
        _m2,
        _m3,
        _m4,
        _m5,
        _m6,
        _m7,
        _m8,
        _m9,
        _m10,
        _m11,
        _m12,
        _m13,
        _m14,
        _m15,
        _m16,
        _m17,
        _m18,
        _m19,
        _m20,
        _m21,
        _m22,
        _m23,
        _m24,
        _m25,
        _m26,
        _m27,
        _m28,
        _m29,
        _m30,
        _m31,
        _m32,
        _m33,
        _m34,
        _m35,
        _m36,
        _m37,
        _m38,
        _m39
      } = $ctx;
      return [api_element("span", {
        classMap: {
          "slds-assistive-text": true
        },
        attrs: {
          "data-aria": true
        },
        key: 0
      }, []), $cmp.isTypeSimple ? api_element("label", {
        className: $cmp.computedLabelClass,
        attrs: {
          "for": `${api_scoped_id("input")}`
        },
        key: 2
      }, [$cmp.required ? api_element("abbr", {
        classMap: {
          "slds-required": true
        },
        attrs: {
          "title": $cmp.i18n.required
        },
        key: 1
      }, [api_text("*")]) : null, api_dynamic($cmp.label)]) : null, $cmp.isTypeSimple ? $cmp.fieldLevelHelp ? api_custom_element("lightning-helptext", _lightningHelptext, {
        props: {
          "content": $cmp.fieldLevelHelp
        },
        key: 3
      }, []) : null : null, $cmp.isTypeSimple ? api_element("div", {
        className: $cmp.computedFormElementClass,
        key: 14
      }, [api_element("input", {
        classMap: {
          "slds-input": true
        },
        attrs: {
          "type": $cmp._internalType,
          "id": api_scoped_id("input"),
          "aria-label": $cmp.computedAriaLabel,
          "accesskey": $cmp.accesskey,
          "autocomplete": $cmp.autocomplete,
          "max": $cmp.normalizedMax,
          "min": $cmp.normalizedMin,
          "inputmode": $cmp._inputMode,
          "step": $cmp.step,
          "maxlength": $cmp.maxLength,
          "minlength": $cmp.minLength,
          "pattern": $cmp.pattern,
          "placeholder": $cmp.placeholder,
          "name": $cmp.name
        },
        props: {
          "required": $cmp.required,
          "readOnly": $cmp.readOnly,
          "disabled": $cmp.disabled
        },
        key: 4,
        on: {
          "blur": _m0 || ($ctx._m0 = api_bind($cmp.handleBlur)),
          "focus": _m1 || ($ctx._m1 = api_bind($cmp.handleFocus)),
          "change": _m2 || ($ctx._m2 = api_bind($cmp.handleChange)),
          "input": _m3 || ($ctx._m3 = api_bind($cmp.handleInput)),
          "keydown": _m4 || ($ctx._m4 = api_bind($cmp.handleKeyDown))
        }
      }, []), $cmp.isTypeSearch ? api_custom_element("lightning-primitive-icon", _lightningPrimitiveIcon, {
        props: {
          "iconName": "utility:search",
          "variant": "bare",
          "svgClass": "slds-input__icon slds-input__icon_left slds-icon-text-default"
        },
        key: 5
      }, []) : null, $cmp.isTypeSearch ? api_element("div", {
        classMap: {
          "slds-input__icon-group": true,
          "slds-input__icon-group_right": true
        },
        key: 13
      }, [$cmp.isLoading ? api_element("div", {
        classMap: {
          "slds-spinner": true,
          "slds-spinner_brand": true,
          "slds-spinner_x-small": true,
          "slds-input__spinner": true
        },
        attrs: {
          "role": "status"
        },
        key: 9
      }, [api_element("span", {
        classMap: {
          "slds-assistive-text": true
        },
        key: 6
      }, [api_dynamic($cmp.i18n.loading)]), api_element("div", {
        classMap: {
          "slds-spinner__dot-a": true
        },
        key: 7
      }, []), api_element("div", {
        classMap: {
          "slds-spinner__dot-b": true
        },
        key: 8
      }, [])]) : null, $cmp._showClearButton ? api_element("button", {
        classMap: {
          "slds-input__icon": true,
          "slds-input__icon_right": true,
          "slds-button": true,
          "slds-button_icon": true
        },
        attrs: {
          "data-element-id": "searchClear"
        },
        key: 12,
        on: {
          "blur": _m5 || ($ctx._m5 = api_bind($cmp.handleBlur)),
          "click": _m6 || ($ctx._m6 = api_bind($cmp._clearAndSetFocusOnInput))
        }
      }, [api_custom_element("lightning-primitive-icon", _lightningPrimitiveIcon, {
        props: {
          "iconName": "utility:clear",
          "variant": "bare",
          "svgClass": "slds-button__icon"
        },
        key: 10
      }, []), api_element("span", {
        classMap: {
          "slds-assistive-text": true
        },
        key: 11
      }, [api_dynamic($cmp.i18n.clear)])]) : null]) : null]) : null, $cmp.isTypeToggle ? api_element("div", {
        classMap: {
          "slds-form-element__control": true
        },
        key: 23
      }, [api_element("label", {
        classMap: {
          "slds-checkbox_toggle": true,
          "slds-grid": true
        },
        attrs: {
          "for": `${api_scoped_id("checkbox-toggle")}`
        },
        key: 22
      }, [$cmp.required ? api_element("abbr", {
        classMap: {
          "slds-required": true
        },
        attrs: {
          "title": $cmp.i18n.required
        },
        key: 15
      }, [api_text("*")]) : null, api_element("span", {
        className: $cmp.computedLabelClass,
        key: 16
      }, [api_dynamic($cmp.label)]), api_element("input", {
        attrs: {
          "type": "checkbox",
          "id": api_scoped_id("checkbox-toggle"),
          "aria-label": $cmp.computedAriaLabel,
          "accesskey": $cmp.accesskey,
          "name": $cmp.name
        },
        props: {
          "required": $cmp.required,
          "readOnly": $cmp.readOnly,
          "disabled": $cmp.disabled
        },
        key: 17,
        on: {
          "blur": _m7 || ($ctx._m7 = api_bind($cmp.handleBlur)),
          "focus": _m8 || ($ctx._m8 = api_bind($cmp.handleFocus)),
          "change": _m9 || ($ctx._m9 = api_bind($cmp.handleChange))
        }
      }, []), api_element("span", {
        classMap: {
          "slds-checkbox_faux_container": true
        },
        attrs: {
          "id": api_scoped_id("toggle-description"),
          "data-toggle-description": true,
          "aria-live": "assertive"
        },
        key: 21
      }, [api_element("span", {
        classMap: {
          "slds-checkbox_faux": true
        },
        key: 18
      }, []), api_element("span", {
        classMap: {
          "slds-checkbox_on": true
        },
        key: 19
      }, [api_dynamic($cmp.messageToggleActive)]), api_element("span", {
        classMap: {
          "slds-checkbox_off": true
        },
        key: 20
      }, [api_dynamic($cmp.messageToggleInactive)])])])]) : null, $cmp.isTypeCheckbox ? !$cmp.isStandardVariant ? api_element("label", {
        classMap: {
          "slds-checkbox__label": true
        },
        attrs: {
          "for": `${api_scoped_id("checkbox")}`
        },
        key: 26
      }, [$cmp.required ? api_element("abbr", {
        classMap: {
          "slds-required": true
        },
        attrs: {
          "title": $cmp.i18n.required
        },
        key: 24
      }, [api_text("*")]) : null, api_element("span", {
        className: $cmp.computedLabelClass,
        key: 25
      }, [api_dynamic($cmp.label)])]) : null : null, $cmp.isTypeCheckbox ? !$cmp.isStandardVariant ? $cmp.fieldLevelHelp ? api_custom_element("lightning-helptext", _lightningHelptext, {
        props: {
          "content": $cmp.fieldLevelHelp
        },
        key: 27
      }, []) : null : null : null, $cmp.isTypeCheckbox ? api_element("div", {
        className: $cmp.computedFormElementClass,
        key: 36
      }, [api_element("span", {
        className: $cmp.computedCheckboxClass,
        key: 35
      }, [$cmp.isStandardVariant ? $cmp.required ? api_element("abbr", {
        classMap: {
          "slds-required": true
        },
        attrs: {
          "title": $cmp.i18n.required
        },
        key: 28
      }, [api_text("*")]) : null : null, api_element("input", {
        attrs: {
          "type": "checkbox",
          "id": api_scoped_id("checkbox"),
          "aria-label": $cmp.computedAriaLabel,
          "accesskey": $cmp.accesskey,
          "name": $cmp.name
        },
        props: {
          "required": $cmp.required,
          "readOnly": $cmp.readOnly,
          "disabled": $cmp.disabled
        },
        key: 29,
        on: {
          "blur": _m10 || ($ctx._m10 = api_bind($cmp.handleBlur)),
          "focus": _m11 || ($ctx._m11 = api_bind($cmp.handleFocus)),
          "change": _m12 || ($ctx._m12 = api_bind($cmp.handleChange))
        }
      }, []), !$cmp.isStandardVariant ? api_element("span", {
        classMap: {
          "slds-checkbox_faux": true
        },
        key: 30
      }, []) : null, $cmp.isStandardVariant ? api_element("label", {
        classMap: {
          "slds-checkbox__label": true
        },
        attrs: {
          "for": `${api_scoped_id("checkbox")}`
        },
        key: 33
      }, [api_element("span", {
        classMap: {
          "slds-checkbox_faux": true
        },
        key: 31
      }, []), api_element("span", {
        className: $cmp.computedLabelClass,
        key: 32
      }, [api_dynamic($cmp.label)])]) : null, $cmp.isStandardVariant ? $cmp.fieldLevelHelp ? api_custom_element("lightning-helptext", _lightningHelptext, {
        props: {
          "content": $cmp.fieldLevelHelp
        },
        key: 34
      }, []) : null : null])]) : null, $cmp.isTypeCheckboxButton ? api_element("div", {
        classMap: {
          "slds-checkbox_add-button": true
        },
        key: 40
      }, [api_element("input", {
        classMap: {
          "slds-assistive-text": true
        },
        attrs: {
          "type": "checkbox",
          "id": api_scoped_id("checkbox-button"),
          "aria-label": $cmp.computedAriaLabel,
          "accesskey": $cmp.accesskey,
          "name": $cmp.name
        },
        props: {
          "required": $cmp.required,
          "readOnly": $cmp.readOnly,
          "disabled": $cmp.disabled
        },
        key: 37,
        on: {
          "blur": _m13 || ($ctx._m13 = api_bind($cmp.handleBlur)),
          "focus": _m14 || ($ctx._m14 = api_bind($cmp.handleFocus)),
          "change": _m15 || ($ctx._m15 = api_bind($cmp.handleChange))
        }
      }, []), api_element("label", {
        classMap: {
          "slds-checkbox_faux": true
        },
        attrs: {
          "for": `${api_scoped_id("checkbox-button")}`
        },
        key: 39
      }, [api_element("span", {
        classMap: {
          "slds-assistive-text": true
        },
        key: 38
      }, [api_dynamic($cmp.label)])])]) : null, $cmp.isTypeRadio ? api_element("div", {
        classMap: {
          "slds-form-element__control": true
        },
        key: 46
      }, [api_element("span", {
        classMap: {
          "slds-radio": true
        },
        key: 45
      }, [api_element("input", {
        attrs: {
          "type": "radio",
          "id": api_scoped_id("radio"),
          "accesskey": $cmp.accesskey,
          "name": $cmp.name
        },
        props: {
          "required": $cmp.required,
          "readOnly": $cmp.readOnly,
          "disabled": $cmp.disabled
        },
        key: 41,
        on: {
          "blur": _m16 || ($ctx._m16 = api_bind($cmp.handleBlur)),
          "focus": _m17 || ($ctx._m17 = api_bind($cmp.handleFocus)),
          "change": _m18 || ($ctx._m18 = api_bind($cmp.handleChange))
        }
      }, []), api_element("label", {
        classMap: {
          "slds-radio__label": true
        },
        attrs: {
          "for": `${api_scoped_id("radio")}`
        },
        key: 44
      }, [api_element("span", {
        classMap: {
          "slds-radio_faux": true
        },
        key: 42
      }, []), api_element("span", {
        className: $cmp.computedLabelClass,
        key: 43
      }, [api_dynamic($cmp.label)])])])]) : null, $cmp.isTypeFile ? api_element("span", {
        className: $cmp.computedLabelClass,
        attrs: {
          "id": api_scoped_id("form-label"),
          "data-form-label": true
        },
        key: 48
      }, [$cmp.required ? api_element("abbr", {
        classMap: {
          "slds-required": true
        },
        attrs: {
          "title": $cmp.i18n.required
        },
        key: 47
      }, [api_text("*")]) : null, api_dynamic($cmp.label)]) : null, $cmp.isTypeFile ? api_element("div", {
        classMap: {
          "slds-form-element__control": true
        },
        key: 56
      }, [api_element("div", {
        classMap: {
          "slds-file-selector": true,
          "slds-file-selector_files": true
        },
        key: 55,
        on: {
          "drop": _m23 || ($ctx._m23 = api_bind($cmp.handleDropFiles))
        }
      }, [api_custom_element("lightning-primitive-file-droppable-zone", _lightningPrimitiveFileDroppableZone, {
        props: {
          "multiple": $cmp.multiple,
          "disabled": $cmp.disabled
        },
        key: 54
      }, [api_element("input", {
        classMap: {
          "slds-file-selector__input": true,
          "slds-assistive-text": true
        },
        attrs: {
          "type": "file",
          "id": api_scoped_id("input-file"),
          "aria-label": $cmp.computedAriaLabel,
          "accesskey": $cmp.accesskey,
          "accept": $cmp.accept,
          "name": $cmp.name
        },
        props: {
          "multiple": $cmp.multiple,
          "required": $cmp.required,
          "readOnly": $cmp.readOnly,
          "disabled": $cmp.disabled
        },
        key: 49,
        on: {
          "blur": _m19 || ($ctx._m19 = api_bind($cmp.handleBlur)),
          "click": _m20 || ($ctx._m20 = api_bind($cmp.handleFileClick)),
          "focus": _m21 || ($ctx._m21 = api_bind($cmp.handleFocus)),
          "change": _m22 || ($ctx._m22 = api_bind($cmp.handleChange))
        }
      }, []), api_element("label", {
        classMap: {
          "slds-file-selector__body": true
        },
        attrs: {
          "id": api_scoped_id("file-selector-label"),
          "data-file-selector-label": true,
          "for": `${api_scoped_id("input-file")}`
        },
        key: 53
      }, [api_element("span", {
        classMap: {
          "slds-file-selector__button": true,
          "slds-button": true,
          "slds-button_neutral": true
        },
        key: 51
      }, [api_custom_element("lightning-primitive-icon", _lightningPrimitiveIcon, {
        props: {
          "iconName": "utility:upload",
          "variant": "bare",
          "svgClass": "slds-button__icon slds-button__icon_left"
        },
        key: 50
      }, []), api_dynamic($cmp.i18n.inputFileButtonLabel)]), api_element("span", {
        classMap: {
          "slds-file-selector__text": true,
          "slds-medium-show": true
        },
        key: 52
      }, [api_dynamic($cmp.i18n.inputFileBodyText)])])])])]) : null, $cmp.isTypeColor ? api_element("div", {
        classMap: {
          "slds-color-picker": true
        },
        key: 65
      }, [api_element("div", {
        classMap: {
          "slds-form-element": true,
          "slds-color-picker__summary": true
        },
        key: 64
      }, [api_element("label", {
        className: $cmp.computedColorLabelClass,
        attrs: {
          "for": `${api_scoped_id("color")}`
        },
        key: 58
      }, [$cmp.required ? api_element("abbr", {
        classMap: {
          "slds-required": true
        },
        attrs: {
          "title": $cmp.i18n.required
        },
        key: 57
      }, [api_text("*")]) : null, api_dynamic($cmp.label)]), api_element("div", {
        classMap: {
          "slds-form-element__control": true
        },
        key: 62
      }, [api_custom_element("lightning-primitive-colorpicker-button", _lightningPrimitiveColorpickerButton, {
        props: {
          "value": $cmp.value,
          "disabled": $cmp.disabled
        },
        key: 59,
        on: {
          "blur": _m24 || ($ctx._m24 = api_bind($cmp.handleBlur)),
          "focus": _m25 || ($ctx._m25 = api_bind($cmp.handleFocus)),
          "change": _m26 || ($ctx._m26 = api_bind($cmp.handleColorChange))
        }
      }, []), api_element("div", {
        classMap: {
          "slds-color-picker__summary-input": true
        },
        key: 61
      }, [api_element("input", {
        classMap: {
          "slds-input": true,
          "slds-m-right_x-small": true
        },
        attrs: {
          "type": "text",
          "id": api_scoped_id("color"),
          "name": $cmp.name,
          "autocomplete": $cmp.autocomplete,
          "accesskey": $cmp.accesskey,
          "aria-label": $cmp.computedAriaLabel,
          "minlength": "4",
          "maxlength": "7",
          "placeholder": $cmp.placeholder,
          "pattern": $cmp.pattern
        },
        props: {
          "disabled": $cmp.disabled
        },
        key: 60,
        on: {
          "blur": _m27 || ($ctx._m27 = api_bind($cmp.handleBlur)),
          "focus": _m28 || ($ctx._m28 = api_bind($cmp.handleFocus)),
          "change": _m29 || ($ctx._m29 = api_bind($cmp.handleChange)),
          "input": _m30 || ($ctx._m30 = api_bind($cmp.handleInput))
        }
      }, [])])]), $cmp.fieldLevelHelp ? api_custom_element("lightning-helptext", _lightningHelptext, {
        props: {
          "content": $cmp.fieldLevelHelp
        },
        key: 63
      }, []) : null])]) : null, $cmp.isTypeDesktopDate ? api_custom_element("lightning-datepicker", _lightningDatepicker, {
        props: {
          "max": $cmp.max,
          "min": $cmp.min,
          "label": $cmp.label,
          "name": $cmp.name,
          "variant": $cmp.variant,
          "ariaLabel": $cmp.ariaLabel,
          "dateStyle": $cmp.dateStyle,
          "placeholder": $cmp.placeholder,
          "required": $cmp.required,
          "readOnly": $cmp.readOnly,
          "fieldLevelHelp": $cmp.fieldLevelHelp,
          "autocomplete": $cmp.autocomplete,
          "messageWhenBadInput": $cmp.messageWhenBadInput,
          "messageWhenValueMissing": $cmp.messageWhenValueMissing,
          "messageWhenRangeOverflow": $cmp.messageWhenRangeOverflow,
          "messageWhenRangeUnderflow": $cmp.messageWhenRangeUnderflow,
          "disabled": $cmp.disabled
        },
        key: 66,
        on: {
          "change": _m31 || ($ctx._m31 = api_bind($cmp.handleChange)),
          "blur": _m32 || ($ctx._m32 = api_bind($cmp.handleBlur)),
          "focus": _m33 || ($ctx._m33 = api_bind($cmp.handleFocus))
        }
      }, []) : null, $cmp.isTypeDesktopTime ? api_custom_element("lightning-timepicker", _lightningTimepicker, {
        props: {
          "max": $cmp.max,
          "min": $cmp.min,
          "label": $cmp.label,
          "name": $cmp.name,
          "ariaLabel": $cmp.ariaLabel,
          "variant": $cmp.variant,
          "timeStyle": $cmp.timeStyle,
          "placeholder": $cmp.placeholder,
          "required": $cmp.required,
          "readOnly": $cmp.readOnly,
          "fieldLevelHelp": $cmp.fieldLevelHelp,
          "messageWhenBadInput": $cmp.messageWhenBadInput,
          "messageWhenValueMissing": $cmp.messageWhenValueMissing,
          "messageWhenRangeOverflow": $cmp.messageWhenRangeOverflow,
          "messageWhenRangeUnderflow": $cmp.messageWhenRangeUnderflow,
          "disabled": $cmp.disabled
        },
        key: 67,
        on: {
          "change": _m34 || ($ctx._m34 = api_bind($cmp.handleChange)),
          "blur": _m35 || ($ctx._m35 = api_bind($cmp.handleBlur)),
          "focus": _m36 || ($ctx._m36 = api_bind($cmp.handleFocus))
        }
      }, []) : null, $cmp.isTypeDesktopDateTime ? api_custom_element("lightning-datetimepicker", _lightningDatetimepicker, {
        props: {
          "dateAriaControls": $cmp.dateAriaControls,
          "dateAriaLabel": $cmp.dateAriaLabel,
          "dateAriaLabelledBy": $cmp.dateAriaLabelledBy,
          "dateAriaDescribedBy": $cmp.dateAriaDescribedBy,
          "dateStyle": $cmp.dateStyle,
          "timeStyle": $cmp.timeStyle,
          "timeAriaControls": $cmp.timeAriaControls,
          "timeAriaLabel": $cmp.timeAriaLabel,
          "timeAriaLabelledBy": $cmp.timeAriaLabelledBy,
          "timeAriaDescribedBy": $cmp.timeAriaDescribedBy,
          "max": $cmp.max,
          "min": $cmp.min,
          "timezone": $cmp.timezone,
          "label": $cmp.label,
          "name": $cmp.name,
          "variant": $cmp.variant,
          "placeholder": $cmp.placeholder,
          "required": $cmp.required,
          "readOnly": $cmp.readOnly,
          "fieldLevelHelp": $cmp.fieldLevelHelp,
          "autocomplete": $cmp.autocomplete,
          "messageWhenBadInput": $cmp.messageWhenBadInput,
          "messageWhenValueMissing": $cmp.messageWhenValueMissing,
          "messageWhenRangeOverflow": $cmp.messageWhenRangeOverflow,
          "messageWhenRangeUnderflow": $cmp.messageWhenRangeUnderflow,
          "disabled": $cmp.disabled
        },
        key: 68,
        on: {
          "change": _m37 || ($ctx._m37 = api_bind($cmp.handleChange)),
          "blur": _m38 || ($ctx._m38 = api_bind($cmp.handleBlur)),
          "focus": _m39 || ($ctx._m39 = api_bind($cmp.handleFocus))
        }
      }, []) : null, $cmp._helpMessage ? api_element("div", {
        classMap: {
          "slds-form-element__help": true
        },
        attrs: {
          "id": api_scoped_id("help-message"),
          "data-help-message": true,
          "role": "alert"
        },
        key: 69
      }, [api_dynamic($cmp._helpMessage)]) : null];
    }

    var _tmpl$l = lwc.registerTemplate(tmpl$m);
    tmpl$m.stylesheets = [];

    if (_implicitStylesheets$4) {
      tmpl$m.stylesheets.push.apply(tmpl$m.stylesheets, _implicitStylesheets$4);
    }
    tmpl$m.stylesheetTokens = {
      hostAttribute: "lightning-input_input-host",
      shadowAttribute: "lightning-input_input"
    };

    var labelInputFileBodyText = 'Or drop files';

    var labelInputFileButtonLabel = 'Upload Files';

    var labelMessageToggleActive = 'Active';

    var labelMessageToggleInactive = 'Inactive';

    var labelClearInput = 'Clear';

    var labelLoadingIndicator = 'Loading';

    var labelNumberIncrementCounter = 'Increase number';

    var labelNumberDecrementCounter = 'Decrease number';

    var userTimeZone = 'America/Los_Angeles';

    var formFactor = 'Large';

    function normalizeInput(value) {
      if (typeof value === 'number' || typeof value === 'string') {
        return String(value);
      }

      return '';
    }

    function normalizeDate(value) {
      return normalizeISODate(value).isoValue || '';
    } // Converts value to the user's timezone and formats it in a way that will be accepted by the input

    function normalizeUTCDateTime(value, timezone) {
      return normalizeISODateTime(value, timezone).isoValue || '';
    }
    function normalizeTime(value) {
      return normalizeISOTime(value).isoValue || '';
    } // parses the input value and converts it back to UTC from the user's timezone

    function normalizeDateTimeToUTC(value, timezone) {
      return normalizeFormattedDateTime(value, timezone) || '';
    }

    var groupingSeparator = ',';

    var decimalSeparator = '.';

    const VALID_NUMBER_CHARACTERS_EXPRESSION = new RegExp( // eslint-disable-next-line no-useless-escape
    '^[-+0-9kKmMeE.,\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9' + '\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF' + '\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF' + '\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9' + '\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9' + '\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89' + '\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49' + '\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909' + '\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9' + ']$');
    const SHORTCUT_FACTORS = {
      k: 3,
      m: 6
    };
    function toIsoDecimal(numberAsString) {
      const result = transformLocalizedNumberToIsoDecimal(numberAsString);

      if (isNaN(result)) {
        return '';
      }

      return result;
    }
    function isValidNumber(numberAsString) {
      return !isNaN(transformLocalizedNumberToIsoDecimal(numberAsString));
    }
    function fromIsoDecimal(numberAsString) {
      return toLocalizedDigits(numberAsString.replace('.', decimalSeparator));
    } // TODO: Too many options, simplify

    function increaseNumberByStep({
      value,
      increment,
      step,
      fractionDigits
    }) {
      const startingValue = value === '' || value == null ? '0' : value;
      const stepAsFloat = parseFloat(step);
      let result;

      if (isNaN(stepAsFloat)) {
        result = parseFloat(startingValue) + increment;
      } else {
        // ideally we'd round the value to the closest correct step, so that if say the step is '2', and the
        // current value is '1' it would increment to '2' instead of '3', since the former would be the valid
        // number given the step constraint, however this would significantly complicate the code, keeping
        // it simple for now.
        const increaseBy = increment * stepAsFloat;
        result = parseFloat(startingValue) + increaseBy;
      }

      return result.toFixed(fractionDigits);
    }
    function calculateFractionDigitsFromStep(step) {
      let calculatedFractionDigits;

      if (step) {
        const stepAsString = String(step).toLowerCase();

        if (stepAsString !== 'any') {
          // lowering the case because we're checking for exponent format as well
          let fractionDigits = 0;

          if (stepAsString.indexOf('.') >= 0 && stepAsString.indexOf('e') < 0) {
            const fractionalPart = stepAsString.split('.')[1]; // we're parsing to account for cases where the step is
            // '1.0', or '1.000', etc.

            if (parseInt(fractionalPart, 10) > 0) {
              fractionDigits = fractionalPart.length;
            }
          } else if (stepAsString.indexOf('e-') > 0) {
            // exponent form eg. 1.5e-5
            const splitOnExponent = stepAsString.split('e-');
            const fractionalPart = splitOnExponent[0].split('.')[1];
            const exponentPart = splitOnExponent[1];
            const fractionalPartLength = fractionalPart ? fractionalPart.length : 0;
            fractionDigits = parseInt(exponentPart, 10) + fractionalPartLength;
          }

          calculatedFractionDigits = fractionDigits;
        }
      }

      return calculatedFractionDigits;
    }
    function formatNumber(numberAsString, options) {
      if (isEmptyString(numberAsString)) {
        return '';
      }

      let formattedValue = numberAsString;
      let inputValue = numberAsString; // set formatter style & default options

      const formatStyle = options.style;
      const formatOptions = {
        style: formatStyle
      };
      formatOptions.minimumFractionDigits = options.minimumFractionDigits;
      formatOptions.maximumFractionDigits = options.maximumFractionDigits;

      if (formatStyle === 'percent-fixed') {
        // percent-fixed just uses percent format and divides the value by 100
        // before passing to the library, this is to deal with the
        // fact that percentages in salesforce are 0-100, not 0-1
        formatOptions.style = 'percent';
        const inputValueAsString = inputValue.toString();
        const normalisedNumberInPercent = parseFloat(inputValue) / 100; // If the number contains fraction digits and is not in an exponent format

        if (inputValueAsString.indexOf('.') > 0 && inputValueAsString.indexOf('e') < 0) {
          // Depending on the input number, division by 100 may lead to rounding errors
          // (e.g 0.785 / 100 is 0.007850000000000001), so we need to round back
          // to the correct precision, that is - existing number of fractional digits
          // plus extra 2 for division by 100.
          inputValue = normalisedNumberInPercent.toFixed(inputValueAsString.split('.')[1].length + 2);
        } else {
          inputValue = normalisedNumberInPercent;
        }
      }

      try {
        formattedValue = numberFormat$1(formatOptions).format(inputValue) || '';
      } catch (ignore) {// ignore any errors
      }

      return formattedValue;
    } // Exporting only to test, separators are only overridden in the tests

    function transformLocalizedNumberToIsoDecimal(numberAsString, separators) {
      if (numberAsString == null || numberAsString.length === 0) {
        return '';
      }

      const decimalSymbol = separators ? separators.decimalSeparator : decimalSeparator;
      const groupingSymbol = separators ? separators.groupSeparator : groupingSeparator; // remove the grouping separator

      let result = numberAsString.split(groupingSymbol).join('');

      if (decimalSymbol !== '.') {
        // replace the local decimal separator with a
        result = result.replace(decimalSymbol, '.');
      }

      return expandShortcuts(addLeadingZeroIfNeeded(fromLocalizedDigits(result)));
    }
    function isValidNumberCharacter(character) {
      return VALID_NUMBER_CHARACTERS_EXPRESSION.test(character);
    }
    function normalizeNumber(value) {
      if (value === undefined || value === null || isNaN(value)) {
        return '';
      }

      return String(value);
    }
    function hasValidNumberShortcut(value) {
      const result = value.toLowerCase().trim();
      const hasMoreThanOneK = result.indexOf('k') !== result.lastIndexOf('k');
      const hasMoreThanOneM = result.indexOf('m') !== result.lastIndexOf('m');
      const hasBothKAndM = result.indexOf('k') > 0 && result.indexOf('m') > 0;

      if (hasMoreThanOneK && hasMoreThanOneM || hasBothKAndM) {
        return false;
      }

      const endsWithK = result.endsWith('k');
      const endsWithM = result.endsWith('m'); // has 'm' or 'k' and more than just them (ie. result of 'm' or 'k' are not valid.

      return (endsWithK || endsWithM) && result.length > 1;
    } // Exported for testing only

    function expandShortcuts(isoValue) {
      if (!hasValidNumberShortcut(isoValue)) {
        return isoValue;
      }

      let result = isoValue.toLowerCase().trim();
      const shortcut = result.charAt(result.length - 1); // remove the suffix

      result = result.substring(0, result.length - 1);

      if (isNaN(result)) {
        return isoValue;
      }

      const parts = result.split('.');
      let fractionDigits = 0;
      const hasDecimalPart = parts.length > 1;

      if (hasDecimalPart) {
        fractionDigits = parts[1].length;
      }

      const exponent = SHORTCUT_FACTORS[shortcut]; // since multiplication may result in loss of precision on javascript's part,
      // we're calculating here the number of fraction digits needed and formatting
      // the number at that

      const newFractionDigits = Math.max(0, fractionDigits - exponent);
      return parseFloat(result * Math.pow(10, exponent)).toFixed(newFractionDigits);
    }

    function addLeadingZeroIfNeeded(result) {
      // If the number starts with +. OR  -. OR . ; insert a 0 before the decimal separator.
      // eg. -.2 -> -0.2
      const decimalSeparatorLocation = result.indexOf('.');

      if (decimalSeparatorLocation === 0 || decimalSeparatorLocation === 1) {
        const firstCharacter = result.charAt(0);

        if (firstCharacter === '+' || firstCharacter === '-' || firstCharacter === '.') {
          result = result.substring(0, decimalSeparatorLocation) + '0' + result.substring(decimalSeparatorLocation);
        }
      }

      return result;
    }

    const i18n$b = {
      a11yTriggerText: labelA11yTriggerText,
      inputFileBodyText: labelInputFileBodyText,
      inputFileButtonLabel: labelInputFileButtonLabel,
      messageToggleActive: labelMessageToggleActive,
      messageToggleInactive: labelMessageToggleInactive,
      numberIncrementCounter: labelNumberIncrementCounter,
      numberDecrementCounter: labelNumberDecrementCounter,
      required: labelRequired,
      clear: labelClearInput,
      loading: labelLoadingIndicator
    };
    const ARIA_CONTROLS$3 = 'aria-controls';
    const ARIA_LABEL$2 = 'aria-label';
    const ARIA_LABELEDBY = 'aria-labelledby';
    const ARIA_DESCRIBEDBY$4 = 'aria-describedby';
    /*
    * This component supports the regular native input types, with the addition of toggle, checkbox-button and color.
    * Furthermore the file type supports a droppable zone, search has a clear button, number has formatting.
    * Input changes (native oninput event) triggers an onchange event,
    *     the native even is stopped, the dispatched custom event has a value that points to the state of the component
    *     in case of files it's the files uploaded (via droppable zone or through the upload button),
    *     checked for radio and checkbox, checkbox-button, and just straight input's value for everything else
    *
    *
    * _Toggle_ (always has an aria-describedby, on error has an additional one, default label text for active and inactive
    * states)
    * _File_ (as it has a droppable zone, the validity returned would have to be valid - unless a custom error message was
    *    passed)
    * _Search_ (it has the clear button and the icon)
    * _Number_ (formatting when not in focus, when in focus shows raw value)
    *
    * */

    const VALID_NUMBER_FORMATTERS = ['decimal', 'percent', 'percent-fixed', 'currency'];
    const DEFAULT_COLOR$1 = '#000000';
    const DEFAULT_FORMATTER = VALID_NUMBER_FORMATTERS[0];
    /**
     * Returns an aria string with all the non-autolinked values removed
     * @param {String} values space sperated list of ids
     * @returns {String} The aria values with the non-auto linked ones removed
     */

    function filterNonAutoLink(values) {
      const ariaValues = values && values.split(/\s+/);
      return ariaValues && ariaValues.filter(value => {
        return !!value.match(/^auto-link/);
      }).join(' ');
    }
    /**
     * Represents interactive controls that accept user input depending on the type attribute.
     */


    class LightningInput extends lwc.LightningElement {
      /**
       * Text that is displayed when the field is empty, to prompt the user for a valid entry. Use this attribute with date, email, number, password, search, tel, text, time, and url input types only.
       * @type {string}
       *
       */

      /**
       * Specifies the name of an input element.
       * @type {string}
       *
       */

      /**
       * Text label for the input.
       * @type {string}
       * @required
       *
       */

      /**
       * Error message to be displayed when a bad input is detected. The badInput error can be returned for invalid input for any input type.
       * @type {string}
       *
       */

      /**
       * Error message to be displayed when a pattern mismatch is detected. The patternMismatch error can be returned when you specify a pattern for email, password, search, tel, text, or url input types.
       * @type {string}
       *
       */

      /**
       * Error message to be displayed when a range overflow is detected. The rangeOverflow error can be returned when you specify a max value for number or range input types.
       * @type {string}
       *
       */

      /**
       * Error message to be displayed when a range underflow is detected. The rangeUnderflow error can be returned when you specify a min value for number or range input types.
       * @type {string}
       *
       */

      /**
       * Error message to be displayed when a step mismatch is detected. The stepMismatch error can be returned when you specify a step value for number and range input types.
       * @type {string}
       *
       */

      /**
       * Error message to be displayed when the value is too short. The tooShort error can be returned when you specify a min-length value for email, password, search, tel, text, and url input types.
       * @type {string}
       *
       */

      /**
       * Error message to be displayed when the value is too long. The tooLong error can be returned when you specify a max-length value for email, password, search, tel, text, and url input types.
       * @type {string}
       *
       */

      /**
       * Error message to be displayed when a type mismatch is detected. The typeMismatch error can be returned for the email and url input types.
       * @type {string}
       *
       */

      /**
       * Error message to be displayed when the value is missing. The valueMissing error can be returned when you specify the required attribute for any input type.
       * @type {string}
       *
       */

      /**
       * Text shown for the active state of a toggle. The default is "Active".
       * @type {string}
       */

      /**
       * Text shown for the inactive state of a toggle. The default is "Inactive".
       * @type {string}
       */

      /**
       * Describes the input to assistive technologies.
       * @type {string}
       */

      /**
       * Controls auto-filling of the field. Use this attribute with
       * email, search, tel, text, and url input types only. Set the attribute to pass
       * through autocomplete values to be interpreted by the browser.
       * @type {string}
       */

      /**
       * The display style of the date when type='date' or type='datetime'. Valid values are
       * short, medium (default), and long. The format of each style is specific to the locale.
       * On mobile devices this attribute has no effect.
       * @type {string}
       * @default medium
       */

      /**
       * The display style of the time when type='time' or type='datetime'. Valid values are
       * short (default), medium, and long. Currently, medium and long styles look the same.
       * On mobile devices this attribute has no effect.
       * @type {string}
       * @default short
       *
       */

      /**
       * Describes the date input to assistive technologies when type='datetime'. On mobile devices,
       * this label is merged with aria-label and time-aria-label to describe the native date time input.
       * @type {string}
       *
       */
      constructor() {
        super();
        this.placeholder = void 0;
        this.name = void 0;
        this.label = void 0;
        this.messageWhenBadInput = void 0;
        this.messageWhenPatternMismatch = void 0;
        this.messageWhenRangeOverflow = void 0;
        this.messageWhenRangeUnderflow = void 0;
        this.messageWhenStepMismatch = void 0;
        this.messageWhenTooShort = void 0;
        this.messageWhenTooLong = void 0;
        this.messageWhenTypeMismatch = void 0;
        this.messageWhenValueMissing = void 0;
        this.messageToggleActive = i18n$b.messageToggleActive;
        this.messageToggleInactive = i18n$b.messageToggleInactive;
        this.ariaLabel = void 0;
        this.autocomplete = void 0;
        this.dateStyle = void 0;
        this.timeStyle = void 0;
        this.dateAriaLabel = void 0;
        this._timeAriaDescribedBy = void 0;
        this._timeAriaLabelledBy = void 0;
        this._timeAriaControls = void 0;
        this._dateAriaControls = void 0;
        this._dateAriaDescribedBy = void 0;
        this._dateAriaLabelledBy = void 0;
        this._value = '';
        this._type = 'text';
        this._pattern = void 0;
        this._max = void 0;
        this._min = void 0;
        this._step = void 0;
        this._disabled = false;
        this._readOnly = false;
        this._required = false;
        this._checked = false;
        this._isLoading = false;
        this._multiple = false;
        this._timezone = false;
        this._helpMessage = null;
        this._isColorPickerPanelOpen = false;
        this._fieldLevelHelp = void 0;
        this._accesskey = void 0;
        this._maxLength = void 0;
        this._minLength = void 0;
        this._accept = void 0;
        this._variant = void 0;
        this._numberRawValue = '';
        this._formatter = DEFAULT_FORMATTER;
        this._showRawNumber = false;
        this._initialValueSet = false;
        this._files = null;
        this._rendered = void 0;
        this.ariaObserver = new ContentMutation(this); // Native Shadow Root will return [native code].
        // Our synthetic method will return the function source.

        this.isNative = this.template.querySelector.toString().match(/\[native code\]/);
      }

      connectedCallback() {
        this.classList.add('slds-form-element');

        this._updateClassList();

        this._validateRequiredAttributes();

        this.interactingState = new InteractingState();
        this.interactingState.onleave(() => this.reportValidity());

        if (this.isTypeNumber) {
          this._updateNumberValue(this._value);
        }
      }

      disconnectedCallback() {
        this._rendered = false;
        this._initialValueSet = false;
        this._cachedInputElement = undefined;
      }

      renderedCallback() {
        if (!this._initialValueSet && this._inputElement) {
          this._rendered = true;

          if (this.isTypeNumber) {
            this._numberRawValue = fromIsoDecimal(this._value);
          }

          this._setInputValue(this._displayedValue);

          if (this.isTypeCheckable) {
            this._inputElement.checked = this._checked;
          }

          this._initialValueSet = true;
        }

        this.ariaObserver.sync();

        this._synchronizeA11y();
      }
      /**
       * Reserved for internal use.
       * @type {number}
       *
       */


      get formatFractionDigits() {
        return this._formatFractionDigits;
      }

      set formatFractionDigits(value) {
        this._formatFractionDigits = value;

        if (this._rendered && this.isTypeNumber) {
          this._setInputValue(this._displayedValue);
        }
      }
      /**
       * A space-separated list of element IDs whose presence or content is controlled by the
       * time input when type='datetime'. On mobile devices, this is merged with aria-controls
       * and date-aria-controls to describe the native date time input.
       * @type {string}
       */


      get timeAriaControls() {
        return this._timeAriaControls;
      }

      set timeAriaControls(references) {
        this._timeAriaControls = references;
        this.ariaObserver.connectLiveIdRef(references, reference => {
          this._timeAriaControls = reference;
        });
      }
      /**
       * A space-separated list of element IDs that provide labels for the date input when type='datetime'.
       * On mobile devices, this is merged with aria-labelled-by and time-aria-labelled-by to describe
       * the native date time input.
       * @type {string}
       */


      get dateAriaLabelledBy() {
        return this._dateAriaLabelledBy;
      }

      set dateAriaLabelledBy(references) {
        this._dateAriaLabelledBy = references;
        this.ariaObserver.connectLiveIdRef(references, reference => {
          this._dateAriaLabelledBy = reference;
        });
      }
      /**
       * A space-separated list of element IDs that provide labels for the time input when type='datetime'.
       * On mobile devices, this is merged with aria-labelled-by and date-aria-labelled-by to describe
       * the native date time input.
       * @type {string}
       *
       */


      get timeAriaLabelledBy() {
        return this._timeAriaLabelledBy;
      }

      set timeAriaLabelledBy(references) {
        this._timeAriaLabelledBy = references;
        this.ariaObserver.connectLiveIdRef(references, reference => {
          this._timeAriaLabelledBy = reference;
        });
      }
      /**
       * A space-separated list of element IDs that provide descriptive labels for the time input when
       * type='datetime'. On mobile devices, this is merged with aria-described-by and date-aria-described-by
       * to describe the native date time input.
       *  @type {string}
       *
       */


      get timeAriaDescribedBy() {
        return this._timeAriaDescribedBy;
      }

      set timeAriaDescribedBy(references) {
        this._timeAriaDescribedBy = references;
        this.ariaObserver.connectLiveIdRef(references, reference => {
          this._timeAriaDescribedBy = reference;
        });
      }
      /**
       * A space-separated list of element IDs whose presence or content is controlled by the
       * date input when type='datetime'. On mobile devices, this is merged with aria-controls
       * and time-aria-controls to describe the native date time input.
       * @type {string}
       *
       */


      get dateAriaControls() {
        return this._dateAriaControls;
      }

      set dateAriaControls(references) {
        this._dateAriaControls = references;
        this.ariaObserver.connectLiveIdRef(references, reference => {
          this._dateAriaControls = reference;
        });
      }
      /**
       * A space-separated list of element IDs that provide descriptive labels for the date input when
       * type='datetime'. On mobile devices, this is merged with aria-described-by and time-aria-described-by
       * to describe the native date time input.
       * @type {string}
       */


      get dateAriaDescribedBy() {
        return this._dateAriaDescribedBy;
      }

      set dateAriaDescribedBy(references) {
        this._dateAriaDescribedBy = references;
        this.ariaObserver.connectLiveIdRef(references, reference => {
          this._dateAriaDescribedBy = reference;
        });
      }
      /**
       * A space-separated list of element IDs whose presence or content is controlled by the input.
       * @type {string}
       */


      get ariaControls() {
        return this._ariaControls;
      }

      set ariaControls(references) {
        this._ariaControls = references;
        this.ariaObserver.link('input', 'aria-controls', references, '[data-aria]');
      }
      /**
       * A space-separated list of element IDs that provide labels for the input.
       * @type {string}
       */


      get ariaLabelledBy() {
        // native version returns the auto linked value
        if (this.isNative) {
          const ariaValues = this.template.querySelector('input').getAttribute('aria-labelledby');
          return filterNonAutoLink(ariaValues);
        }

        return this._ariaLabelledBy;
      }

      set ariaLabelledBy(references) {
        this._ariaLabelledBy = references;
        this.ariaObserver.link('input', 'aria-labelledby', references, '[data-aria]');
      }
      /**
       * A space-separated list of element IDs that provide descriptive labels for the input.
       * @type {string}
       */


      get ariaDescribedBy() {
        if (this.isNative) {
          // in native case return the linked value
          const ariaValues = this.template.querySelector('input').getAttribute('aria-describedby');
          return filterNonAutoLink(ariaValues);
        }

        return this._ariaDescribedBy;
      }

      set ariaDescribedBy(references) {
        this._ariaDescribedBy = references;
        this.ariaObserver.link('input', 'aria-describedby', references, '[data-aria]');
      }
      /**
       * String value with the formatter to be used for number input. Valid values include
       * decimal, percent, percent-fixed, and currency.
       * @type {string}
       */


      get formatter() {
        return this._formatter;
      }

      set formatter(value) {
        this._formatter = normalizeString(value, {
          fallbackValue: DEFAULT_FORMATTER,
          validValues: VALID_NUMBER_FORMATTERS
        });

        this._updateInputDisplayValueIfTypeNumber();
      }
      /**
       * The type of the input. This value defaults to text.
       * @type {string}
       * @default text
       */


      get type() {
        return this._type;
      }

      set type(value) {
        const normalizedValue = normalizeString(value);
        this._type = normalizedValue === 'datetime' ? 'datetime-local' : normalizedValue;

        this._validateType(normalizedValue);

        this._inputElementRefreshNeeded = true;

        if (this._rendered) {
          // The type is being changed after render, which means the input element may be different (eg. changing
          // from text to 'checkbox', so we need to set the initial value again
          this._initialValueSet = false;

          if (this.isTypeNumber) {
            // If the type has changed, we need to re-parse the value as a number
            this._updateNumberValue(this._value);
          }
        }

        this._updateProxyInputAttributes(['type', 'value', 'max', 'min', 'required', 'pattern']);
      }
      /**
       * For the search type only. If present, a spinner is displayed to indicate that data is loading.
       * @type {boolean}
       * @default false
       */


      get isLoading() {
        return this._isLoading;
      }

      set isLoading(value) {
        this._isLoading = normalizeBoolean(value);
      }
      /**
       * Specifies the regular expression that the input's value is checked against.
       * This attribute is supported for email, password, search, tel, text, and url types.
       * @type {string}
       *
       */


      get pattern() {
        if (this.isTypeColor) {
          return '^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$';
        }

        return this._pattern;
      }

      set pattern(value) {
        this._pattern = value;

        this._updateProxyInputAttributes('pattern');
      }
      /**
       * The maximum number of characters allowed in the field.
       * Use this attribute with email, password, search, tel, text, and url input types only.
       * @type {number}
       */


      get maxLength() {
        return this._maxLength;
      }

      set maxLength(value) {
        this._maxLength = value;

        this._updateProxyInputAttributes('maxlength');
      }
      /**
       * Specifies the types of files that the server accepts. Use this attribute with file input type only.
       * @type {string}
       */


      get accept() {
        return this._accept;
      }

      set accept(value) {
        this._accept = value;

        this._updateProxyInputAttributes('accept');
      }
      /**
       * The minimum number of characters allowed in the field.
       * Use this attribute with email, password, search, tel, text, and url input types only.
       * @type {number}
       */


      get minLength() {
        return this._minLength;
      }

      set minLength(value) {
        this._minLength = value;

        this._updateProxyInputAttributes('minlength');
      } // number and date/time

      /**
       * The maximum acceptable value for the input.  Use this attribute with number,
       * range, date, time, and datetime input types only. For number and range type, the max value is a
       * decimal number. For the date, time, and datetime types, the max value must use a valid string for the type.
       * @type {decimal|string}
       */


      get max() {
        return this._max;
      }

      set max(value) {
        this._max = value;

        this._updateProxyInputAttributes('max');
      }
      /**
       * The minimum acceptable value for the input. Use this attribute with number,
       * range, date, time, and datetime input types only. For number and range types, the min value
       * is a decimal number. For the date, time, and datetime types, the min value must use a valid string for the type.
       * @type {decimal|string}
       */


      get min() {
        return this._min;
      }

      set min(value) {
        this._min = value;

        this._updateProxyInputAttributes('min');
      }
      /**
       * Granularity of the value, specified as a positive floating point number.
       * Use this attribute with number and range input types only.
       * Use 'any' when granularity is not a concern. This value defaults to 1.
       * @type {decimal|string}
       * @default 1
       */


      get step() {
        // This should be reconsidered as it in effect disabled any step support for datetime/time types on mobile
        if (this.isTypeDateTime || this.isTypeTime) {
          return 'any';
        } // It should probably default to '1' instead, but this means that we'd be explicitly passing step='1' to the
        // native input


        return this._step;
      }

      set step(value) {
        if (typeof value === 'string' && value.toLowerCase() === 'any') {
          this._step = 'any';
        } else {
          this._step = isUndefinedOrNull(value) || isNaN(value) ? undefined : String(value);
        }

        this._updateProxyInputAttributes('step');

        this._updateInputDisplayValueIfTypeNumber();
      }
      /**
       * If present, the checkbox is selected.
       * @type {boolean}
       * @default false
       */


      get checked() {
        // checkable inputs can be part of a named group, in that case there won't be a change event thrown and so
        // the internal tracking _checked would be out of sync with the actual input value.
        if (this.isTypeCheckable && this._initialValueSet) {
          return this._inputElement.checked;
        }

        return this._checked;
      }

      set checked(value) {
        this._checked = normalizeBoolean(value);

        this._updateProxyInputAttributes('checked');

        if (this._rendered) {
          this._inputElement.checked = this._checked;
        }
      }
      /**
       * Specifies that a user can enter more than one value. Use this attribute with file and email input types only.
       * @type {boolean}
       * @default false
       */


      get multiple() {
        return this._multiple;
      }

      set multiple(value) {
        this._multiple = normalizeBoolean(value);

        this._updateProxyInputAttributes('multiple');
      }
      /**
       * Specifies the value of an input element.
       * @type {object}
       */


      get value() {
        return this._value;
      }

      set value(value) {
        const previousValue = this._value;
        this._value = normalizeInput(value);

        if (this._rendered && this.isTypeNumber) {
          this._value = normalizeNumber(value); // the extra check for whether the value has changed is done for cases
          // when the same value is set back in a change handler, this is to avoid
          // the raw number from changing formatting under the user
          // (eg. if the user typed 1,000 we want to preserve that formatting as the user
          // types the value)

          if (this.validity.badInput || this._value !== previousValue) {
            this._updateNumberValue(value);
          }
        }

        this._updateProxyInputAttributes('value'); // Setting value of a type='file' isn't allowed


        if (!this.isTypeFile) {
          // Again, due to the interop layer we need to check whether the value being set
          // is different, otherwise we're duplicating the sets on the input, which result
          // in different bugs like Japanese IME duplication of characters in Safari (likely a browser bug) or
          // character position re-set in IE11.
          if (this._rendered && this._inputElement.value !== this._displayedValue) {
            this._setInputValue(this._displayedValue);
          }
        }
      }
      /**
       * The variant changes the appearance of an input field.
       * Accepted variants include standard, label-inline, label-hidden, and label-stacked.
       * This value defaults to standard, which displays the label above the field.
       * Use label-hidden to hide the label but make it available to assistive technology.
       * Use label-inline to horizontally align the label and input field.
       * Use label-stacked to place the label above the input field.
       * @type {string}
       * @default standard
       */


      get variant() {
        return this._variant || VARIANT.STANDARD;
      }

      set variant(value) {
        this._variant = normalizeVariant$1(value);

        this._updateClassList();
      }
      /**
       * If present, the input field is disabled and users cannot interact with it.
       * @type {boolean}
       * @default false
       */


      get disabled() {
        return this._disabled;
      }

      set disabled(value) {
        this._disabled = normalizeBoolean(value);

        this._updateProxyInputAttributes('disabled');
      }
      /**
       * If present, the input field is read-only and cannot be edited by users.
       * @type {boolean}
       * @default false
       */


      get readOnly() {
        return this._readOnly;
      }

      set readOnly(value) {
        this._readOnly = normalizeBoolean(value);

        this._updateProxyInputAttributes('readonly');
      }
      /**
       * If present, the input field must be filled out before the form is submitted.
       * @type {boolean}
       * @default false
       */


      get required() {
        return this._required;
      }

      set required(value) {
        this._required = normalizeBoolean(value);

        this._updateProxyInputAttributes('required');
      }
      /**
       * Specifies the time zone used when type='datetime' only. This value defaults to the user's Salesforce time zone setting.
       * @type {string}
       *
       */


      get timezone() {
        return this._timezone || userTimeZone;
      }

      set timezone(value) {
        this._timezone = value; // mobile date/time normalization of value/max/min depends on timezone, so we need to update here as well

        this._updateProxyInputAttributes(['value', 'max', 'min']);
      }
      /**
       * Help text detailing the purpose and function of the input.
       * This attribute isn't supported for file, toggle, and checkbox-button types.
       * @type {string}
       *
       */


      get fieldLevelHelp() {
        return this._fieldLevelHelp;
      }

      set fieldLevelHelp(value) {
        this._fieldLevelHelp = value;
      }
      /**
       * Specifies a shortcut key to activate or focus an element.
       * @type {string}
       *
       */


      get accessKey() {
        return this._accesskey;
      }

      set accessKey(newValue) {
        this._accesskey = newValue;
      }
      /**
       * A FileList that contains selected files. Use this attribute with the file input type only.
       * @type {object}
       *
       */


      get files() {
        if (this.isTypeFile) {
          return this._files;
        }

        return null;
      }
      /**
       * Represents the validity states that an element can be in, with respect to constraint validation.
       * @type {object}
       *
       */


      get validity() {
        return this._constraint.validity;
      }
      /**
       * Checks if the input is valid.
       * @returns {boolean} Indicates whether the element meets all constraint validations.
       */


      checkValidity() {
        return this._constraint.checkValidity();
      }
      /**
       * Sets a custom error message to be displayed when a form is submitted.
       * @param {string} message - The string that describes the error. If message is an empty string, the error message is reset.
       */


      setCustomValidity(message) {
        this._constraint.setCustomValidity(message);
      }
      /**
       * Displays the error messages and returns false if the input is invalid.
       * If the input is valid, reportValidity() clears displayed error messages and returns true.
       * @returns {boolean} - The validity status of the input fields.
       */


      reportValidity() {
        return this._constraint.reportValidity(message => {
          if (this._rendered && !this.isNativeInput) {
            this._inputElement.showHelpMessage(message);
          } else {
            this._helpMessage = message;
          }
        });
      }
      /**
       * Displays error messages on invalid fields.
       * An invalid field fails at least one constraint validation and returns false when checkValidity() is called.
       */


      showHelpMessageIfInvalid() {
        this.reportValidity();
      }
      /**
       * Sets focus on the input element.
       */


      focus() {
        if (this._rendered) {
          this._inputElement.focus();
        }
      }
      /**
       * Removes keyboard focus from the input element.
       */


      blur() {
        if (this._rendered) {
          this._inputElement.blur();
        }
      }

      get isNativeInput() {
        return !(this.isTypeDesktopDate || this.isTypeDesktopDateTime || this.isTypeDesktopTime);
      }

      get computedAriaControls() {
        const ariaValues = []; // merge all date & time arias on mobile since it's displayed as a single field

        if (this.isTypeMobileDateTime) {
          ariaValues.push(this.dateAriaControls);
          ariaValues.push(this.timeAriaControls);
        }

        if (this.ariaControls) {
          ariaValues.push(this.ariaControls);
        }

        return normalizeAriaAttribute(ariaValues);
      }

      get computedAriaLabel() {
        const ariaValues = []; // merge all date & time arias on mobile since it's displayed as a single field

        if (this.isTypeMobileDateTime) {
          ariaValues.push(this.dateAriaLabel);
          ariaValues.push(this.timeAriaLabel);
        }

        if (this.ariaLabel) {
          ariaValues.push(this.ariaLabel);
        }

        return normalizeAriaAttribute(ariaValues);
      }

      get computedAriaLabelledBy() {
        const ariaValues = [];

        if (this.isTypeFile) {
          ariaValues.push(this.computedUniqueFileElementLabelledById);
        } // merge all date & time arias on mobile since it's displayed as a single field


        if (this.isTypeMobileDateTime) {
          ariaValues.push(this.dateAriaLabelledBy);
          ariaValues.push(this.timeAriaLabelledBy);
        }

        if (this.ariaLabelledBy) {
          ariaValues.push(this.ariaLabelledBy);
        }

        return normalizeAriaAttribute(ariaValues);
      }

      get computedAriaDescribedBy() {
        const ariaValues = [];

        if (this._helpMessage) {
          ariaValues.push(this.computedUniqueHelpElementId);
        } // The toggle type is described by a secondary element


        if (this.isTypeToggle) {
          ariaValues.push(this.computedUniqueToggleElementDescribedById);
        } // merge all date & time arias on mobile since it's displayed as a single field


        if (this.isTypeMobileDateTime) {
          ariaValues.push(this.dateAriaDescribedBy);
          ariaValues.push(this.timeAriaDescribedBy);
        }

        if (this.ariaDescribedBy) {
          ariaValues.push(this.ariaDescribedBy);
        }

        return normalizeAriaAttribute(ariaValues);
      }

      get isLabelHidden() {
        return this.variant === VARIANT.LABEL_HIDDEN;
      }

      get isLabelStacked() {
        return this.variant === VARIANT.LABEL_STACKED;
      }

      get accesskey() {
        return this._accesskey;
      }

      get colorInputElementValue() {
        return this.validity.valid && this.value ? this.value : DEFAULT_COLOR$1;
      }

      get colorInputStyle() {
        return `background: ${this.value || '#5679C0'};`;
      }

      get computedUniqueHelpElementId() {
        return getRealDOMId(this.template.querySelector('[data-help-message]'));
      }

      get computedUniqueToggleElementDescribedById() {
        if (this.isTypeToggle) {
          const toggle = this.template.querySelector('[data-toggle-description]');
          return getRealDOMId(toggle);
        }

        return null;
      }

      get computedUniqueFormLabelId() {
        if (this.isTypeFile) {
          const formLabel = this.template.querySelector('[data-form-label]');
          return getRealDOMId(formLabel);
        }

        return null;
      }

      get computedUniqueFileSelectorLabelId() {
        if (this.isTypeFile) {
          const fileBodyLabel = this.template.querySelector('[data-file-selector-label]');
          return getRealDOMId(fileBodyLabel);
        }

        return null;
      }

      get computedUniqueFileElementLabelledById() {
        if (this.isTypeFile) {
          const labelIds = [this.computedUniqueFormLabelId, this.computedUniqueFileSelectorLabelId];
          return labelIds.join(' ');
        }

        return null;
      }

      get computedFormElementClass() {
        const classes = classSet('slds-form-element__control slds-grow');

        if (this.isTypeSearch) {
          classes.add('slds-input-has-icon slds-input-has-icon_left-right');
        }

        return classes.toString();
      }

      get i18n() {
        return i18n$b;
      }

      get computedLabelClass() {
        const classnames = classSet('slds-form-element__label');

        if (this.isTypeCheckable || this.isTypeFile) ; else if (this.isTypeToggle) {
          classnames.add('slds-m-bottom_none');
        } else {
          classnames.add('slds-no-flex');
        }

        return classnames.add({
          'slds-assistive-text': this.isLabelHidden
        }).toString();
      }

      get computedNumberClass() {
        return classSet('slds-input').add({
          'slds-is-disabled': this.disabled
        }).toString();
      }

      get computedColorLabelClass() {
        return classSet('slds-form-element__label slds-color-picker__summary-label').add({
          'slds-assistive-text': this.isLabelHidden
        }).toString();
      }

      get computedCheckboxClass() {
        return classSet('slds-checkbox').add({
          'slds-checkbox_standalone': !this.isStandardVariant
        }).toString();
      }

      get normalizedMax() {
        return this._normalizeDateTimeString(this.max);
      }

      get normalizedMin() {
        return this._normalizeDateTimeString(this.min);
      }

      get isTypeNumber() {
        return this.type === 'number';
      }

      get isTypeCheckable() {
        return this.isTypeCheckbox || this.isTypeCheckboxButton || this.isTypeRadio || this.isTypeToggle;
      }

      get isTypeSearch() {
        return this.type === 'search';
      }

      get isTypeToggle() {
        return this.type === 'toggle';
      }

      get isTypeText() {
        return this.type === 'text';
      }

      get isTypeCheckbox() {
        return this.type === 'checkbox';
      }

      get isTypeRadio() {
        return this.type === 'radio';
      }

      get isTypeCheckboxButton() {
        return this.type === 'checkbox-button';
      }

      get isTypeFile() {
        return this.type === 'file';
      }

      get isTypeColor() {
        return this.type === 'color';
      }

      get isTypeDate() {
        return this.type === 'date';
      }

      get isTypeDateTime() {
        return this.type === 'datetime' || this.type === 'datetime-local';
      }

      get isTypeTime() {
        return this.type === 'time';
      }

      get isTypeMobileDate() {
        return this.isTypeDate && !this._isDesktopBrowser();
      }

      get isTypeDesktopDate() {
        return this.isTypeDate && this._isDesktopBrowser();
      }

      get isTypeMobileDateTime() {
        return this.isTypeDateTime && !this._isDesktopBrowser();
      }

      get isTypeDesktopDateTime() {
        return this.isTypeDateTime && this._isDesktopBrowser();
      }

      get isTypeMobileTime() {
        return this.isTypeTime && !this._isDesktopBrowser();
      }

      get isTypeDesktopTime() {
        return this.isTypeTime && this._isDesktopBrowser();
      }

      get isTypeSimple() {
        return !this.isTypeCheckbox && !this.isTypeCheckboxButton && !this.isTypeToggle && !this.isTypeRadio && !this.isTypeFile && !this.isTypeColor && !this.isTypeDesktopDate && !this.isTypeDesktopDateTime && !this.isTypeDesktopTime;
      }

      get _inputElement() {
        if (!this._cachedInputElement || this._inputElementRefreshNeeded) {
          this._inputDragonDecorated = false;
          let inputElement;

          if (this.isTypeDesktopDate) {
            inputElement = this.template.querySelector('lightning-datepicker');
          } else if (this.isTypeDesktopDateTime) {
            inputElement = this.template.querySelector('lightning-datetimepicker');
          } else if (this.isTypeDesktopTime) {
            inputElement = this.template.querySelector('lightning-timepicker');
          } else {
            inputElement = this.template.querySelector('input');
            this._inputDragonDecorated = true;
            decorateInputForDragon(inputElement);
          }

          this._inputElementRefreshNeeded = false;
          this._cachedInputElement = inputElement;
        }

        return this._cachedInputElement;
      }

      get _inputTypeForValidity() {
        let inputType = 'text';

        if (this.isTypeSimple) {
          if (this.isTypeNumber) {
            inputType = 'number';
          } else {
            inputType = this.type;
          }
        } else if (this.isTypeCheckable) {
          inputType = this.isTypeRadio ? 'radio' : 'checkbox';
        } else if (this.isTypeFile) {
          inputType = 'file';
        } else if (this.isTypeDateTime) {
          inputType = 'datetime-local';
        } else if (this.isTypeTime) {
          inputType = 'time';
        } else if (this.isTypeDate) {
          inputType = 'date';
        }

        return inputType;
      }

      get _displayedValue() {
        if (this.isTypeNumber) {
          // If the number is not valid (bad input, step mismatch, etc.) show the raw number as
          // well, otherwise the formatted value ends up being 'NaN' which makes it hard to
          // see mistakes
          if (this._showRawNumber || !this.validity.valid) {
            if (hasValidNumberShortcut(this._numberRawValue) && isValidNumber(this._numberRawValue)) {
              this._numberRawValue = fromIsoDecimal(this._value);
            }

            return this._numberRawValue;
          }

          return formatNumber(this._value, this._buildFormatNumberOptions(this.formatter));
        }

        if (this.isTypeMobileDate || this.isTypeMobileDateTime || this.isTypeMobileTime) {
          return this._normalizeDateTimeString(this._value);
        }

        return this._value;
      }

      get _internalType() {
        if (this.isTypeNumber) {
          return 'text';
        }

        return this._type;
      }

      get isStandardVariant() {
        return this.variant === VARIANT.STANDARD || this.variant === VARIANT.LABEL_HIDDEN;
      }

      get _showClearButton() {
        return this.isTypeSearch && isNotUndefinedOrNull(this._value) && this._value !== '';
      }

      get _ignoreRequired() {
        // If uploading via the drop zone or via the input directly, we should
        // ignore the required flag as a file has been uploaded
        return this.isTypeFile && this._required && (this.fileUploadedViaDroppableZone || this._files && this._files.length > 0);
      }

      get _inputMode() {
        if (this.isTypeNumber) {
          return 'decimal';
        }

        return null;
      }

      get _constraint() {
        if (!this._constraintApi) {
          const overrides = {
            badInput: () => {
              if (!this._rendered) {
                return false;
              }

              if (this.isTypeNumber) {
                return !isValidNumber(this._numberRawValue);
              }

              if (!this.isNativeInput) {
                return this._inputElement.hasBadInput();
              }

              return this._inputElement.validity.badInput;
            },
            tooLong: () => // since type=number is type=text in the dom when not in focus
            // we should always return false as maxlength doesn't apply
            this.isNativeInput && !this.isTypeNumber && this._rendered && this._inputElement.validity.tooLong,
            tooShort: () => // since type=number is type=text in the dom when not in focus
            // we should always return false as minlength doesn't apply
            this.isNativeInput && !this.isTypeNumber && this._rendered && this._inputElement.validity.tooShort,
            patternMismatch: () => this.isNativeInput && this._rendered && this._inputElement.validity.patternMismatch
          }; // FF, IE and Safari don't support type datetime-local,
          // IE and Safari don't support type date or time
          // we need to defer to the base component to check rangeOverflow/rangeUnderflow.
          // Due to the custom override, changing the type to or from datetime/time would affect the validation

          if (this.isTypeDesktopDateTime || this.isTypeDesktopTime || this.isTypeDesktopDate) {
            overrides.rangeOverflow = () => {
              // input type='time' is timezone agnostic, so we should remove the timezone designator before comparison
              const max = this.isTypeDesktopTime ? normalizeTime(this.max) : this.max;
              return isAfter(this.value, max);
            };

            overrides.rangeUnderflow = () => {
              // input type='time' is timezone agnostic, so we should remove the timezone designator before comparison
              const min = this.isTypeDesktopTime ? normalizeTime(this.min) : this.min;
              return isBefore(this.value, min);
            };

            overrides.stepMismatch = () => false;
          }

          if (this.isIE11) {
            overrides.stepMismatch = () => false;
          }

          this._constraintApi = new FieldConstraintApiWithProxyInput(() => {
            // The date/time components display their own errors and have custom messages for badInput and rangeOverflow/Underflow.
            if (!this.isNativeInput) {
              return this._inputElement;
            }

            return this;
          }, overrides);
          this._constraintApiProxyInputUpdater = this._constraint.setInputAttributes({
            type: () => this._inputTypeForValidity,
            // We need to normalize value so that it's consumable by the proxy input (otherwise the value
            // will be invalid for the native input)
            value: () => this._normalizeDateTimeString(this.value),
            checked: () => this.checked,
            maxlength: () => this.maxLength,
            minlength: () => this.minLength,
            // 'pattern' depends on type
            pattern: () => this.pattern,
            // 'max' and 'min' depend on type and timezone
            max: () => this.normalizedMax,
            min: () => this.normalizedMin,
            step: () => this.step,
            accept: () => this.accept,
            multiple: () => this.multiple,
            disabled: () => this.disabled,
            readonly: () => this.readOnly,
            // depends on type and whether an upload has been made
            required: () => this.required && !this._ignoreRequired
          });
        }

        return this._constraintApi;
      }

      handleFileClick() {
        this._setInputValue(null);

        this._updateValueAndValidityAttribute(null);
      }

      handleDropFiles(event) {
        // drop doesn't trigger focus nor blur, so set state to interacting
        // and auto leave when there's no more action
        this.interactingState.interacting();
        this.fileUploadedViaDroppableZone = true;
        this._files = event.dataTransfer && event.dataTransfer.files;

        this._updateProxyInputAttributes('required');

        this._dispatchChangeEventWithDetail({
          files: this._files
        });
      }

      handleFocus() {
        this.interactingState.enter();

        if (this.isTypeColor) {
          this._isColorPickerPanelOpen = false;
        }

        if (this._rendered && this.isTypeNumber) {
          this._showRawNumber = true;
          this._inputElement.value = this._displayedValue; // W-6176985: IE11 input when set value, will move cursor to beginning.
          // This fix is only for input type=number on IE11, and force the cursor to the end.

          if (isIE11) {
            const length = this._inputElement.value.length;
            this._inputElement.selectionStart = length;
            this._inputElement.selectionEnd = length;
          }
        }

        this.dispatchEvent(new CustomEvent('focus'));
      }

      handleBlur(event) {
        this.interactingState.leave();

        if (this._rendered && this.isTypeNumber) {
          this._showRawNumber = false;

          this._setInputValue(this._displayedValue);
        }

        if (!event.relatedTarget || !this.template.contains(event.relatedTarget)) {
          this.dispatchEvent(new CustomEvent('blur'));
        }
      }

      handleChange(event) {
        event.stopPropagation();

        this._dispatchCommitEvent();

        if (this.isTypeSimple && this.value === event.target.value) {
          return;
        }

        this._dispatchChangeEvent();
      }

      handleInput(event) {
        event.stopPropagation();

        if (this.isTypeNumber) {
          // for invalid numbers the value might stay the same as the user
          // changed the invalid input, so we need to update the raw value
          this._numberRawValue = this._inputElement.value;
        }

        if (this.isTypeSimple && this.value === event.target.value) {
          return;
        }

        this._dispatchChangeEvent();
      }

      handleKeyDown(event) {
        if (this.isTypeNumber) {
          // we're letting "Shift" through to prevent capital letters, other special symbols for type="number"
          const hasMetaOrCtrlModifier = event.metaKey || event.ctrlKey; // need to check that event.key is valid for "autofill" cases

          if (!hasMetaOrCtrlModifier && !this.readOnly && event.key) {
            const key = normalizeKeyValue(event.key);

            if (key.length === 1 && !isValidNumberCharacter(key)) {
              event.preventDefault();
            }

            if (key === 'ArrowUp') {
              event.preventDefault();

              this._numberStepUpAndDispatchEvents(1);
            } else if (key === 'ArrowDown') {
              event.preventDefault();

              this._numberStepUpAndDispatchEvents(-1);
            }
          }
        }
      }

      handleColorChange(event) {
        const selectedColor = event.detail.color;

        if (selectedColor !== this._inputElement.value) {
          this._setInputValue(selectedColor);

          this._updateValueAndValidityAttribute(selectedColor);

          this.focus();

          this._dispatchChangeEventWithDetail({
            value: selectedColor
          });

          this._dispatchCommitEvent();
        }

        this.template.querySelector('lightning-primitive-colorpicker-button').focus();
      }

      _clearAndSetFocusOnInput(event) {
        // TODO: Discuss this, it seems the wrong thing to do.
        // button is removed from template, but
        // event still is propagated, For example, captured by panel,
        // then cause panel think is clicked outside.
        event.stopPropagation();
        this.interactingState.enter();

        this._setInputValue('');

        this._updateValueAndValidityAttribute('');

        this._inputElement.focus();

        this._dispatchChangeEventWithDetail({
          value: this._value
        });

        this._dispatchCommitEvent();
      }

      _dispatchCommitEvent() {
        this.dispatchEvent(new CustomEvent('commit'));
      }

      _dispatchChangeEventWithDetail(detail) {
        this.dispatchEvent(new CustomEvent('change', {
          composed: true,
          bubbles: true,
          detail
        }));
      }

      _validateType(type) {
        assert(type !== 'hidden', `<lightning-input> The type attribute value "hidden" is invalid. Use a regular <input type="hidden"> instead.`);
        assert(type !== 'submit' && type !== 'reset' && type !== 'image' && type !== 'button', `<lightning-input> The type attribute value "${type}" is invalid. Use <lightning:button> instead.`);

        if (this.isTypeRadio) {
          assert(!this.required, `<lightning-input> The required attribute is not supported on radio inputs directly. It should be implemented at the radio group level.`);
        }
      }

      _validateRequiredAttributes() {
        const {
          label
        } = this;
        assert(typeof label === 'string' && label.length, `<lightning-input> The required label attribute value "${label}" is invalid.`);
      }

      _setInputValue(value) {
        if (this._inputDragonDecorated) {
          // The underlying input has been modified to dispatch an 'input' event when a direct value set
          // is used to allow for Dragon Natural Speaking (which sets the value directly on the inputs instead
          // dispatching an input event against the input). Since we're in a programatic set here (ie. set
          // not resulting from a direct user interaction) we want a default setter behaviour that doesn't
          // dispatch any events.
          setDecoratedDragonInputValueWithoutEvent(this._inputElement, value);
        } else {
          this._inputElement.value = value;
        }
      }

      _dispatchChangeEvent() {
        this.interactingState.enter();
        const detail = {};

        if (this.isTypeCheckable) {
          this._updateCheckedAndValidityAttribute(this._inputElement.checked);

          detail.checked = this._checked;
        } else if (this.isTypeFile) {
          this._files = this._inputElement.files; // LWC does not proxy dom elements any more. So there is no need to call lwc.unwrap here anymore

          detail.files = this._files;

          this._updateProxyInputAttributes('required');
        }

        if (!this.isTypeCheckable) {
          if (this.isTypeNumber) {
            this._numberRawValue = this._inputElement.value;
            detail.value = toIsoDecimal(this._inputElement.value);
          } else {
            detail.value = this._inputElement.value;
          }

          if (this.isTypeMobileDateTime) {
            detail.value = normalizeDateTimeToUTC(detail.value, this.timezone);
          } else if (this.isTypeMobileTime) {
            detail.value = normalizeTime(detail.value);
          }

          this._updateValueAndValidityAttribute(detail.value);
        }

        this._dispatchChangeEventWithDetail(detail);
      }

      _isDesktopBrowser() {
        return formFactor === 'Large';
      }

      _updateValueAndValidityAttribute(value) {
        this._value = value;

        this._updateProxyInputAttributes('value');
      }

      _updateCheckedAndValidityAttribute(value) {
        this._checked = value;

        this._updateProxyInputAttributes('checked');
      }

      _updateProxyInputAttributes(attributes) {
        if (this._constraintApiProxyInputUpdater) {
          this._constraintApiProxyInputUpdater(attributes);
        }
      }

      _updateInputDisplayValueIfTypeNumber() {
        // Displayed value depends on the format number, so if we're not showing the raw
        // number we should update the value
        if (this._rendered && this.isTypeNumber && !this._showRawNumber && this._inputElement) {
          this._setInputValue(this._displayedValue);
        }
      }
      /**
       * Increases (if increment is positive, decreases otherwise) the number value of the input by the increment
       * multiple of the given 'step'. Additionally dispatches the 'change' and 'commit' events.
       *
       * @param {Number} increment A multiple of the step to increase, when step is 'any',
       * the step is assumed to be 1.
       * @private
       */


      _numberStepUpAndDispatchEvents(increment) {
        if (this._readOnly || this._disabled) {
          return;
        }

        this._value = increaseNumberByStep({
          value: this._value,
          step: this.step,
          increment,
          fractionDigits: this._buildFormatNumberOptions(this.formatter).minimumFractionDigits
        }); // Raw value is the value the user entered (we preserve a user's input),
        // since we're generating a new value we're overriding it

        this._numberRawValue = fromIsoDecimal(this._value);

        this._setInputValue(this._displayedValue);

        this._dispatchChangeEvent();

        this._dispatchCommitEvent();
      }

      _updateClassList() {
        classListMutation(this.classList, {
          'slds-form-element_stacked': this.variant === VARIANT.LABEL_STACKED,
          'slds-form-element_horizontal': this.variant === VARIANT.LABEL_INLINE
        });
      }

      _updateNumberValue(value) {
        const newValue = normalizeNumber(value);
        this._value = newValue;
        this._numberRawValue = fromIsoDecimal(newValue);
      }

      _buildFormatNumberOptions(formatter) {
        const options = {
          style: formatter
        }; // Use the min/max fraction digits from the formatFractionDigits provided by the user if available.
        // Otherwise, use the number of digits calculated from step

        if (this._formatFractionDigits !== undefined) {
          options.minimumFractionDigits = this._formatFractionDigits;
          options.maximumFractionDigits = this._formatFractionDigits;
        } else {
          let digitsFromStep = calculateFractionDigitsFromStep(this._step); // if formatting percentages, when calculating digits from step, take into
          // consideration that the formatted number is effectively multiplied by 10^2, ie. 0.1 is 10%
          // so we need to subtract 2 digits;

          if (formatter === 'percent' && typeof digitsFromStep === 'number') {
            digitsFromStep -= 2;

            if (digitsFromStep < 0) {
              digitsFromStep = 0;
            }
          }

          options.minimumFractionDigits = digitsFromStep;
          options.maximumFractionDigits = digitsFromStep;
        }

        return options;
      }

      _normalizeDateTimeString(value) {
        let result = value;

        if (this.isTypeDate) {
          result = normalizeDate(value);
        } else if (this.isTypeTime) {
          result = normalizeTime(value);
        } else if (this.isTypeDateTime) {
          result = normalizeUTCDateTime(value, this.timezone);
        }

        return result;
      }

      _synchronizeA11y() {
        const input = this.template.querySelector('input');
        const datepicker = this.template.querySelector('lightning-datepicker');
        const timepicker = this.template.querySelector('lightning-timepicker');

        if (input) {
          synchronizeAttrs(input, {
            [ARIA_LABELEDBY]: this.computedAriaLabelledBy,
            [ARIA_DESCRIBEDBY$4]: this.computedAriaDescribedBy,
            [ARIA_CONTROLS$3]: this.computedAriaControls,
            [ARIA_LABEL$2]: this.computedAriaLabel
          });
        } else if (datepicker) {
          synchronizeAttrs(datepicker, {
            ariaLabelledByElement: this.ariaLabelledBy,
            ariaDescribedByElements: this.ariaDescribedBy,
            ariaControlsElement: this.ariaControls,
            [ARIA_LABEL$2]: this.computedAriaLabel
          });
        } else if (timepicker) {
          synchronizeAttrs(timepicker, {
            ariaLabelledByElement: this.ariaLabelledBy,
            ariaDescribedByElements: this.ariaDescribedBy,
            ariaControlsElement: this.ariaControls,
            [ARIA_LABEL$2]: this.computedAriaLabel
          });
        }
      }

    }

    LightningInput.delegatesFocus = true;

    lwc.registerDecorators(LightningInput, {
      publicProps: {
        placeholder: {
          config: 0
        },
        name: {
          config: 0
        },
        label: {
          config: 0
        },
        messageWhenBadInput: {
          config: 0
        },
        messageWhenPatternMismatch: {
          config: 0
        },
        messageWhenRangeOverflow: {
          config: 0
        },
        messageWhenRangeUnderflow: {
          config: 0
        },
        messageWhenStepMismatch: {
          config: 0
        },
        messageWhenTooShort: {
          config: 0
        },
        messageWhenTooLong: {
          config: 0
        },
        messageWhenTypeMismatch: {
          config: 0
        },
        messageWhenValueMissing: {
          config: 0
        },
        messageToggleActive: {
          config: 0
        },
        messageToggleInactive: {
          config: 0
        },
        ariaLabel: {
          config: 0
        },
        autocomplete: {
          config: 0
        },
        dateStyle: {
          config: 0
        },
        timeStyle: {
          config: 0
        },
        dateAriaLabel: {
          config: 0
        },
        formatFractionDigits: {
          config: 3
        },
        timeAriaControls: {
          config: 3
        },
        dateAriaLabelledBy: {
          config: 3
        },
        timeAriaLabelledBy: {
          config: 3
        },
        timeAriaDescribedBy: {
          config: 3
        },
        dateAriaControls: {
          config: 3
        },
        dateAriaDescribedBy: {
          config: 3
        },
        ariaControls: {
          config: 3
        },
        ariaLabelledBy: {
          config: 3
        },
        ariaDescribedBy: {
          config: 3
        },
        formatter: {
          config: 3
        },
        type: {
          config: 3
        },
        isLoading: {
          config: 3
        },
        pattern: {
          config: 3
        },
        maxLength: {
          config: 3
        },
        accept: {
          config: 3
        },
        minLength: {
          config: 3
        },
        max: {
          config: 3
        },
        min: {
          config: 3
        },
        step: {
          config: 3
        },
        checked: {
          config: 3
        },
        multiple: {
          config: 3
        },
        value: {
          config: 3
        },
        variant: {
          config: 3
        },
        disabled: {
          config: 3
        },
        readOnly: {
          config: 3
        },
        required: {
          config: 3
        },
        timezone: {
          config: 3
        },
        fieldLevelHelp: {
          config: 3
        },
        accessKey: {
          config: 3
        },
        files: {
          config: 1
        },
        validity: {
          config: 1
        }
      },
      publicMethods: ["checkValidity", "setCustomValidity", "reportValidity", "showHelpMessageIfInvalid", "focus", "blur"],
      track: {
        _timeAriaDescribedBy: 1,
        _timeAriaLabelledBy: 1,
        _timeAriaControls: 1,
        _dateAriaControls: 1,
        _dateAriaDescribedBy: 1,
        _dateAriaLabelledBy: 1,
        _value: 1,
        _type: 1,
        _pattern: 1,
        _max: 1,
        _min: 1,
        _step: 1,
        _disabled: 1,
        _readOnly: 1,
        _required: 1,
        _checked: 1,
        _isLoading: 1,
        _multiple: 1,
        _timezone: 1,
        _helpMessage: 1,
        _isColorPickerPanelOpen: 1,
        _fieldLevelHelp: 1,
        _accesskey: 1,
        _maxLength: 1,
        _minLength: 1,
        _accept: 1,
        _variant: 1,
        _numberRawValue: 1
      },
      fields: ["_formatter", "_showRawNumber", "_initialValueSet", "_files", "_rendered"]
    });

    var _lightningInput = lwc.registerComponent(LightningInput, {
      tmpl: _tmpl$l
    });
    LightningInput.interopMap = {
      exposeNativeEvent: {
        change: true,
        focus: true,
        blur: true
      }
    };

    function tmpl$n($api, $cmp, $slotset, $ctx) {
      const {
        c: api_custom_element,
        d: api_dynamic,
        b: api_bind,
        h: api_element
      } = $api;
      const {
        _m0,
        _m1
      } = $ctx;
      return [api_element("button", {
        className: $cmp.computedButtonClass,
        attrs: {
          "name": $cmp.name,
          "accesskey": $cmp.computedAccessKey,
          "title": $cmp.computedTitle,
          "type": $cmp.normalizedType,
          "value": $cmp.value,
          "aria-label": $cmp.computedAriaLabel,
          "aria-expanded": $cmp.computedAriaExpanded,
          "aria-live": $cmp.computedAriaLive,
          "aria-atomic": $cmp.computedAriaAtomic
        },
        props: {
          "disabled": $cmp.disabled
        },
        key: 2,
        on: {
          "focus": _m0 || ($ctx._m0 = api_bind($cmp.handleButtonFocus)),
          "blur": _m1 || ($ctx._m1 = api_bind($cmp.handleButtonBlur))
        }
      }, [$cmp.showIconLeft ? api_custom_element("lightning-primitive-icon", _lightningPrimitiveIcon, {
        props: {
          "iconName": $cmp.iconName,
          "svgClass": $cmp.computedIconClass,
          "variant": "bare"
        },
        key: 0
      }, []) : null, api_dynamic($cmp.label), $cmp.showIconRight ? api_custom_element("lightning-primitive-icon", _lightningPrimitiveIcon, {
        props: {
          "iconName": $cmp.iconName,
          "svgClass": $cmp.computedIconClass,
          "variant": "bare"
        },
        key: 1
      }, []) : null])];
    }

    var _tmpl$m = lwc.registerTemplate(tmpl$n);
    tmpl$n.stylesheets = [];
    tmpl$n.stylesheetTokens = {
      hostAttribute: "lightning-button_button-host",
      shadowAttribute: "lightning-button_button"
    };

    /**
     * A clickable element used to perform an action.
     */

    class LightningButton extends LightningPrimitiveButton$1 {
      constructor(...args) {
        super(...args);
        this.name = void 0;
        this.value = void 0;
        this.label = void 0;
        this.variant = 'neutral';
        this.iconName = void 0;
        this.iconPosition = 'left';
        this.type = 'button';
        this.title = null;
        this._order = null;
      }

      render() {
        return _tmpl$m;
      }

      get computedButtonClass() {
        return classSet('slds-button').add({
          'slds-button_neutral': this.normalizedVariant === 'neutral',
          'slds-button_brand': this.normalizedVariant === 'brand',
          'slds-button_outline-brand': this.normalizedVariant === 'brand-outline',
          'slds-button_destructive': this.normalizedVariant === 'destructive',
          'slds-button_text-destructive': this.normalizedVariant === 'destructive-text',
          'slds-button_inverse': this.normalizedVariant === 'inverse',
          'slds-button_success': this.normalizedVariant === 'success',
          'slds-button_first': this._order === 'first',
          'slds-button_middle': this._order === 'middle',
          'slds-button_last': this._order === 'last'
        }).toString();
      }

      get computedTitle() {
        return this.title;
      }

      get normalizedVariant() {
        return normalizeString(this.variant, {
          fallbackValue: 'neutral',
          validValues: ['base', 'neutral', 'brand', 'brand-outline', 'destructive', 'destructive-text', 'inverse', 'success']
        });
      }

      get normalizedType() {
        return normalizeString(this.type, {
          fallbackValue: 'button',
          validValues: ['button', 'reset', 'submit']
        });
      }

      get normalizedIconPosition() {
        return normalizeString(this.iconPosition, {
          fallbackValue: 'left',
          validValues: ['left', 'right']
        });
      }

      get showIconLeft() {
        return this.iconName && this.normalizedIconPosition === 'left';
      }

      get showIconRight() {
        return this.iconName && this.normalizedIconPosition === 'right';
      }

      get computedIconClass() {
        return classSet('slds-button__icon').add({
          'slds-button__icon_left': this.normalizedIconPosition === 'left',
          'slds-button__icon_right': this.normalizedIconPosition === 'right'
        }).toString();
      }

      handleButtonFocus() {
        this.dispatchEvent(new CustomEvent('focus'));
      }

      handleButtonBlur() {
        this.dispatchEvent(new CustomEvent('blur'));
      }
      /**
       * Sets focus on the button.
       */


      focus() {
        if (this._connected) {
          this.template.querySelector('button').focus();
        }
      }
      /**
       * Clicks the button.
       */


      click() {
        if (this._connected) {
          this.template.querySelector('button').click();
        }
      }
      /**
       * {Function} setOrder - Sets the order value of the button when in the context of a button-group or other ordered component
       * @param {String} order -  The order string (first, middle, last)
       */


      setOrder(order) {
        this._order = order;
      }
      /**
       * Once we are connected, we fire a register event so the button-group (or other) component can register
       * the buttons.
       */


      connectedCallback() {
        this._connected = true;
        const privatebuttonregister = new CustomEvent('privatebuttonregister', {
          bubbles: true,
          detail: {
            callbacks: {
              setOrder: this.setOrder.bind(this),
              setDeRegistrationCallback: deRegistrationCallback => {
                this._deRegistrationCallback = deRegistrationCallback;
              }
            }
          }
        });
        this.dispatchEvent(privatebuttonregister);
      }

      disconnectedCallback() {
        this._connected = false;

        if (this._deRegistrationCallback) {
          this._deRegistrationCallback();
        }
      }

    }

    LightningButton.delegatesFocus = true;

    lwc.registerDecorators(LightningButton, {
      publicProps: {
        name: {
          config: 0
        },
        value: {
          config: 0
        },
        label: {
          config: 0
        },
        variant: {
          config: 0
        },
        iconName: {
          config: 0
        },
        iconPosition: {
          config: 0
        },
        type: {
          config: 0
        }
      },
      publicMethods: ["focus", "click"],
      track: {
        title: 1,
        _order: 1
      }
    });

    var _lightningButton = lwc.registerComponent(LightningButton, {
      tmpl: _tmpl$m
    });
    LightningButton.interopMap = {
      exposeNativeEvent: {
        click: true,
        focus: true,
        blur: true
      }
    };

    function tmpl$o($api, $cmp, $slotset, $ctx) {
      const {
        d: api_dynamic,
        gid: api_scoped_id,
        h: api_element,
        c: api_custom_element,
        b: api_bind,
        k: api_key,
        i: api_iterator,
        f: api_flatten
      } = $api;
      const {
        _m0,
        _m1,
        _m2,
        _m3,
        _m4,
        _m5,
        _m6,
        _m7,
        _m8,
        _m9,
        _m10,
        _m11,
        _m12,
        _m13,
        _m14,
        _m15,
        _m16
      } = $ctx;
      return [$cmp.renderLabel ? api_element("span", {
        className: $cmp.computedLabelClass,
        attrs: {
          "id": api_scoped_id("label"),
          "data-label": true
        },
        key: 0
      }, [api_dynamic($cmp.computedLabel)]) : null, api_element("div", {
        classMap: {
          "slds-rich-text-editor": true,
          "slds-grid": true,
          "slds-grid_vertical": true,
          "slds-nowrap": true
        },
        key: 28,
        on: {
          "click": _m10 || ($ctx._m10 = api_bind($cmp.activateEditor))
        }
      }, [$cmp.isBottomToolbar ? api_element("div", {
        classMap: {
          "slds-rich-text-editor__textarea": true,
          "slds-grid": true,
          "editor": true
        },
        key: 1
      }, []) : null, $cmp.isBottomToolbar ? $cmp.quillNotReady ? api_element("div", {
        classMap: {
          "slds-rich-text-editor__textarea": true,
          "slds-grid": true
        },
        key: 4
      }, [api_element("div", {
        classMap: {
          "slds-rich-text-area__content": true,
          "slds-grow": true,
          "slds-text-color-weak": true,
          "standin": true
        },
        key: 3,
        on: {
          "click": _m0 || ($ctx._m0 = api_bind($cmp.handleStandInClick))
        }
      }, [api_custom_element("lightning-formatted-rich-text", _lightningFormattedRichText, {
        props: {
          "value": $cmp.value,
          "disableLinkify": true
        },
        key: 2
      }, [])])]) : null : null, $cmp.isBottomToolbar ? !$cmp.valid ? api_element("div", {
        classMap: {
          "slds-form-element__help": true,
          "slds-p-around_small": true
        },
        attrs: {
          "id": api_scoped_id("error-message"),
          "data-error-message": true
        },
        key: 5
      }, [api_dynamic($cmp.errorMessage)]) : null : null, api_element("div", {
        classMap: {
          "slds-rich-text-editor__toolbar": true,
          "slds-shrink-none": true
        },
        attrs: {
          "role": "toolbar",
          "aria-label": $cmp.toolbarAriaLabel
        },
        key: 21,
        on: {
          "keydown": _m8 || ($ctx._m8 = api_bind($cmp.navigateToolbar))
        }
      }, api_flatten([$cmp.isFontMenusVisible ? api_element("div", {
        classMap: {
          "slds-grid": true,
          "slds-wrap": true
        },
        attrs: {
          "role": "group",
          "aria-label": $cmp.i18n.formatFont
        },
        key: 14
      }, [$cmp.isDesktop ? api_element("div", {
        classMap: {
          "slds-rich-text-editor__select": true
        },
        key: 7
      }, [api_custom_element("lightning-combobox", _lightningCombobox, {
        props: {
          "value": $cmp.selectedFontValue,
          "variant": "label-hidden",
          "label": $cmp.i18n.font,
          "options": $cmp.fontMenus.fontList,
          "disabled": $cmp.disabled,
          "dropdownAlignment": "auto"
        },
        key: 6,
        on: {
          "focus": _m1 || ($ctx._m1 = api_bind($cmp.activateEditor)),
          "change": _m2 || ($ctx._m2 = api_bind($cmp.selectFont))
        }
      }, [])]) : null, $cmp.isDesktop ? api_element("div", {
        classMap: {
          "slds-rich-text-editor__select": true,
          "slds-size_xx-small": true
        },
        key: 9
      }, [api_custom_element("lightning-combobox", _lightningCombobox, {
        props: {
          "value": $cmp.selectedSizeValue,
          "variant": "label-hidden",
          "label": $cmp.i18n.fontSize,
          "options": $cmp.fontMenus.sizeList,
          "disabled": $cmp.disabled,
          "dropdownAlignment": "auto"
        },
        key: 8,
        on: {
          "focus": _m3 || ($ctx._m3 = api_bind($cmp.activateEditor)),
          "change": _m4 || ($ctx._m4 = api_bind($cmp.selectSize))
        }
      }, [])]) : null, !$cmp.isDesktop ? api_element("div", {
        classMap: {
          "slds-rich-text-editor__select": true,
          "slds-size_x-small": true
        },
        key: 11
      }, [api_custom_element("lightning-primitive-select", _lightningPrimitiveSelect, {
        props: {
          "value": $cmp.selectedFontValue,
          "variant": "label-hidden",
          "label": $cmp.i18n.font,
          "options": $cmp.fontMenus.fontList,
          "disabled": $cmp.disabled
        },
        key: 10,
        on: {
          "change": _m5 || ($ctx._m5 = api_bind($cmp.selectFont))
        }
      }, [])]) : null, !$cmp.isDesktop ? api_element("div", {
        classMap: {
          "slds-rich-text-editor__select": true,
          "slds-size_xx-small": true
        },
        key: 13
      }, [api_custom_element("lightning-primitive-select", _lightningPrimitiveSelect, {
        props: {
          "value": $cmp.selectedSizeValue,
          "variant": "label-hidden",
          "label": $cmp.i18n.fontSize,
          "options": $cmp.fontMenus.sizeList,
          "disabled": $cmp.disabled
        },
        key: 12,
        on: {
          "change": _m6 || ($ctx._m6 = api_bind($cmp.selectSize))
        }
      }, [])]) : null]) : null, $cmp.isColorpickerVisible ? api_custom_element("lightning-primitive-colorpicker-button", _lightningPrimitiveColorpickerButton, {
        props: {
          "disabled": $cmp.disabled,
          "value": $cmp.selectedTextColorValue
        },
        key: 15,
        on: {
          "change": _m7 || ($ctx._m7 = api_bind($cmp.handleColorUpdate))
        }
      }, []) : null, api_iterator($cmp.computedCategories, function (category) {
        return api_element("ul", {
          classMap: {
            "slds-button-group-list": true
          },
          attrs: {
            "aria-label": category.label
          },
          key: api_key(20, category.label)
        }, api_iterator(category.buttons, function (button) {
          return api_element("li", {
            key: api_key(19, button.key)
          }, [api_element("button", {
            className: button.computedClass,
            attrs: {
              "type": "button",
              "value": button.value,
              "title": button.label,
              "data-format": button.format,
              "aria-pressed": "false"
            },
            key: 18
          }, [api_custom_element("lightning-primitive-icon", _lightningPrimitiveIcon, {
            props: {
              "iconName": button.iconName,
              "svgClass": "slds-button__icon",
              "variant": "bare"
            },
            key: 16
          }, []), api_element("span", {
            classMap: {
              "slds-assistive-text": true
            },
            key: 17
          }, [api_dynamic(button.label)])])]);
        }));
      })])), !$cmp.isBottomToolbar ? api_element("div", {
        classMap: {
          "slds-rich-text-editor__textarea": true,
          "slds-grid": true,
          "editor": true
        },
        key: 22
      }, []) : null, !$cmp.isBottomToolbar ? $cmp.quillNotReady ? api_element("div", {
        classMap: {
          "slds-rich-text-editor__textarea": true,
          "slds-grid": true
        },
        key: 26
      }, [api_element("div", {
        classMap: {
          "slds-rich-text-area__content": true,
          "slds-grow": true,
          "slds-text-color-weak": true,
          "standin": true
        },
        key: 25,
        on: {
          "click": _m9 || ($ctx._m9 = api_bind($cmp.handleStandInClick))
        }
      }, [!$cmp.shouldShowPlaceholder ? api_custom_element("lightning-formatted-rich-text", _lightningFormattedRichText, {
        props: {
          "value": $cmp.value,
          "disableLinkify": true
        },
        key: 23
      }, []) : null, $cmp.shouldShowPlaceholder ? api_element("p", {
        classMap: {
          "input-rich-text-placeholder": true
        },
        key: 24
      }, [api_dynamic($cmp.placeholder)]) : null])]) : null : null, !$cmp.isBottomToolbar ? !$cmp.valid ? api_element("div", {
        classMap: {
          "slds-form-element__help": true,
          "slds-p-around_small": true
        },
        attrs: {
          "id": api_scoped_id("error-message-bottom"),
          "data-error-message": true
        },
        key: 27
      }, [api_dynamic($cmp.errorMessage)]) : null : null]), $cmp.linkPanelOpen ? api_element("div", {
        classMap: {
          "slds-popover": true,
          "slds-popover__body": true
        },
        key: 33,
        on: {
          "focusout": _m15 || ($ctx._m15 = api_bind($cmp.handleLinkPanelFocusOut)),
          "focusin": _m16 || ($ctx._m16 = api_bind($cmp.handleLinkPanelFocusIn))
        }
      }, [api_custom_element("lightning-input", _lightningInput, {
        classMap: {
          "link-input": true
        },
        props: {
          "name": "link-input",
          "value": $cmp.showLinkValue,
          "label": $cmp.i18n.linkInput
        },
        key: 29,
        on: {
          "change": _m11 || ($ctx._m11 = api_bind($cmp.handleLinkValueChange)),
          "keydown": _m12 || ($ctx._m12 = api_bind($cmp.linkKeyboardPress))
        }
      }, []), api_element("div", {
        classMap: {
          "slds-m-top_small": true
        },
        key: 32
      }, [api_custom_element("lightning-button", _lightningButton, {
        props: {
          "variant": "brand",
          "label": $cmp.i18n.linkSave
        },
        key: 30,
        on: {
          "click": _m13 || ($ctx._m13 = api_bind($cmp.saveLink))
        }
      }, []), api_custom_element("lightning-button", _lightningButton, {
        styleMap: {
          "marginLeft": ".25rem"
        },
        props: {
          "variant": "bare",
          "label": $cmp.i18n.linkCancel
        },
        key: 31,
        on: {
          "click": _m14 || ($ctx._m14 = api_bind($cmp.cancelLink))
        }
      }, [])])]) : null];
    }

    var _tmpl$n = lwc.registerTemplate(tmpl$o);
    tmpl$o.stylesheets = [];

    if (_implicitStylesheets) {
      tmpl$o.stylesheets.push.apply(tmpl$o.stylesheets, _implicitStylesheets);
    }
    tmpl$o.stylesheetTokens = {
      hostAttribute: "lightning-inputRichText_inputRichText-host",
      shadowAttribute: "lightning-inputRichText_inputRichText"
    };

    var labelAlignText = 'Align text';

    var labelBold = 'Bold';

    var labelBullet = 'Bulleted list';

    var labelCenterAlign = 'Center align text';

    var labelComposeText = 'Compose text';

    var labelFont = 'Font';

    var labelFontSize = 'Font Size';

    var labelFormatBackground = 'Format background and text color';

    var labelFormatBody = 'Format body';

    var labelFormatFont = 'Format font family and size';

    var labelFormatText = 'Format text';

    var labelIndent = 'Indent';

    var labelInsertContent = 'Insert content';

    var labelItalic = 'Italic';

    var labelLeftAlign = 'Left align text';

    var labelLink = 'Link';

    var labelImage = 'Image';

    var labelLinkCancel = 'Cancel';

    var labelLinkInput = 'Link URL';

    var labelLinkSave = 'Save';

    var labelNumber = 'Numbered list';

    var labelOutdent = 'Outdent';

    var labelRemoveFormatting = 'Remove formatting';

    var labelRightAlign = 'Right align text';

    var labelStrike = 'Strikethrough';

    var labelUnderline = 'Underline';

    /*
     * Copyright (C) 2016 salesforce.com, inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *         http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*
    Quill

    Copyright (c) 2014, Jason Chen
    Copyright (c) 2013, salesforce.com
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

    1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

    3. Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
    IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
    TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
    PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    */
    var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function unwrapExports(x) {
      return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn, module) {
      return module = {
        exports: {}
      }, fn(module, module.exports), module.exports;
    }

    var quill = createCommonjsModule(function (module, exports) {
      (function webpackUniversalModuleDefinition(root, factory) {
        module.exports = factory();
      })(typeof self !== 'undefined' ? self : commonjsGlobal, function () {
        return function (modules) {
          var installedModules = {};

          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }

            var module = installedModules[moduleId] = {
              i: moduleId,
              l: false,
              exports: {}
            };
            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            module.l = true;
            return module.exports;
          }

          __webpack_require__.m = modules;
          __webpack_require__.c = installedModules;

          __webpack_require__.d = function (exports, name, getter) {
            if (!__webpack_require__.o(exports, name)) {
              Object.defineProperty(exports, name, {
                configurable: false,
                enumerable: true,
                get: getter
              });
            }
          };

          __webpack_require__.n = function (module) {
            var getter = module && module.__esModule ? function getDefault() {
              return module['default'];
            } : function getModuleExports() {
              return module;
            };

            __webpack_require__.d(getter, 'a', getter);

            return getter;
          };

          __webpack_require__.o = function (object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };

          __webpack_require__.p = "";
          return __webpack_require__(__webpack_require__.s = 109);
        }([function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var container_1 = __webpack_require__(17);

          var format_1 = __webpack_require__(18);

          var leaf_1 = __webpack_require__(19);

          var scroll_1 = __webpack_require__(45);

          var inline_1 = __webpack_require__(46);

          var block_1 = __webpack_require__(47);

          var embed_1 = __webpack_require__(48);

          var text_1 = __webpack_require__(49);

          var attributor_1 = __webpack_require__(12);

          var class_1 = __webpack_require__(32);

          var style_1 = __webpack_require__(33);

          var store_1 = __webpack_require__(31);

          var Registry = __webpack_require__(1);

          var Parchment = {
            Scope: Registry.Scope,
            create: Registry.create,
            find: Registry.find,
            query: Registry.query,
            register: Registry.register,
            Container: container_1.default,
            Format: format_1.default,
            Leaf: leaf_1.default,
            Embed: embed_1.default,
            Scroll: scroll_1.default,
            Block: block_1.default,
            Inline: inline_1.default,
            Text: text_1.default,
            Attributor: {
              Attribute: attributor_1.default,
              Class: class_1.default,
              Style: style_1.default,
              Store: store_1.default
            }
          };
          exports.default = Parchment;
        }, function (module, exports, __webpack_require__) {
          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var ParchmentError = function (_super) {
            __extends(ParchmentError, _super);

            function ParchmentError(message) {
              var _this = this;

              message = '[Parchment] ' + message;
              _this = _super.call(this, message) || this;
              _this.message = message;
              _this.name = _this.constructor.name;
              return _this;
            }

            return ParchmentError;
          }(Error);

          exports.ParchmentError = ParchmentError;
          var attributes = {};
          var classes = {};
          var tags = {};
          var types = {};
          exports.DATA_KEY = '__blot';
          var Scope;

          (function (Scope) {
            Scope[Scope["TYPE"] = 3] = "TYPE";
            Scope[Scope["LEVEL"] = 12] = "LEVEL";
            Scope[Scope["ATTRIBUTE"] = 13] = "ATTRIBUTE";
            Scope[Scope["BLOT"] = 14] = "BLOT";
            Scope[Scope["INLINE"] = 7] = "INLINE";
            Scope[Scope["BLOCK"] = 11] = "BLOCK";
            Scope[Scope["BLOCK_BLOT"] = 10] = "BLOCK_BLOT";
            Scope[Scope["INLINE_BLOT"] = 6] = "INLINE_BLOT";
            Scope[Scope["BLOCK_ATTRIBUTE"] = 9] = "BLOCK_ATTRIBUTE";
            Scope[Scope["INLINE_ATTRIBUTE"] = 5] = "INLINE_ATTRIBUTE";
            Scope[Scope["ANY"] = 15] = "ANY";
          })(Scope = exports.Scope || (exports.Scope = {}));

          function create(input, value) {
            var match = query(input);

            if (match == null) {
              throw new ParchmentError("Unable to create " + input + " blot");
            }

            var BlotClass = match;
            var node = input instanceof Node || input['nodeType'] === Node.TEXT_NODE ? input : BlotClass.create(value);
            return new BlotClass(node, value);
          }

          exports.create = create;

          function find(node, bubble) {
            if (bubble === void 0) {
              bubble = false;
            }

            if (node == null) return null;
            if (node[exports.DATA_KEY] != null) return node[exports.DATA_KEY].blot;
            if (bubble) return find(node.parentNode, bubble);
            return null;
          }

          exports.find = find;

          function query(query, scope) {
            if (scope === void 0) {
              scope = Scope.ANY;
            }

            var match;

            if (typeof query === 'string') {
              match = types[query] || attributes[query];
            } else if (query instanceof Text || query['nodeType'] === Node.TEXT_NODE) {
              match = types['text'];
            } else if (typeof query === 'number') {
              if (query & Scope.LEVEL & Scope.BLOCK) {
                match = types['block'];
              } else if (query & Scope.LEVEL & Scope.INLINE) {
                match = types['inline'];
              }
            } else if (query instanceof HTMLElement) {
              var names = (query.getAttribute('class') || '').split(/\s+/);

              for (var i in names) {
                match = classes[names[i]];
                if (match) break;
              }

              match = match || tags[query.tagName];
            }

            if (match == null) return null;
            if (scope & Scope.LEVEL & match.scope && scope & Scope.TYPE & match.scope) return match;
            return null;
          }

          exports.query = query;

          function register() {
            var Definitions = [];

            for (var _i = 0; _i < arguments.length; _i++) {
              Definitions[_i] = arguments[_i];
            }

            if (Definitions.length > 1) {
              return Definitions.map(function (d) {
                return register(d);
              });
            }

            var Definition = Definitions[0];

            if (typeof Definition.blotName !== 'string' && typeof Definition.attrName !== 'string') {
              throw new ParchmentError('Invalid definition');
            } else if (Definition.blotName === 'abstract') {
              throw new ParchmentError('Cannot register abstract class');
            }

            types[Definition.blotName || Definition.attrName] = Definition;

            if (typeof Definition.keyName === 'string') {
              attributes[Definition.keyName] = Definition;
            } else {
              if (Definition.className != null) {
                classes[Definition.className] = Definition;
              }

              if (Definition.tagName != null) {
                if (Array.isArray(Definition.tagName)) {
                  Definition.tagName = Definition.tagName.map(function (tagName) {
                    return tagName.toUpperCase();
                  });
                } else {
                  Definition.tagName = Definition.tagName.toUpperCase();
                }

                var tagNames = Array.isArray(Definition.tagName) ? Definition.tagName : [Definition.tagName];
                tagNames.forEach(function (tag) {
                  if (tags[tag] == null || Definition.className == null) {
                    tags[tag] = Definition;
                  }
                });
              }
            }

            return Definition;
          }

          exports.register = register;
        }, function (module, exports, __webpack_require__) {
          var diff = __webpack_require__(51);

          var equal = __webpack_require__(11);

          var extend = __webpack_require__(3);

          var op = __webpack_require__(20);

          var NULL_CHARACTER = String.fromCharCode(0);

          var Delta = function (ops) {
            if (Array.isArray(ops)) {
              this.ops = ops;
            } else if (ops != null && Array.isArray(ops.ops)) {
              this.ops = ops.ops;
            } else {
              this.ops = [];
            }
          };

          Delta.prototype.insert = function (text, attributes) {
            var newOp = {};
            if (text.length === 0) return this;
            newOp.insert = text;

            if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {
              newOp.attributes = attributes;
            }

            return this.push(newOp);
          };

          Delta.prototype['delete'] = function (length) {
            if (length <= 0) return this;
            return this.push({
              'delete': length
            });
          };

          Delta.prototype.retain = function (length, attributes) {
            if (length <= 0) return this;
            var newOp = {
              retain: length
            };

            if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {
              newOp.attributes = attributes;
            }

            return this.push(newOp);
          };

          Delta.prototype.push = function (newOp) {
            var index = this.ops.length;
            var lastOp = this.ops[index - 1];
            newOp = extend(true, {}, newOp);

            if (typeof lastOp === 'object') {
              if (typeof newOp['delete'] === 'number' && typeof lastOp['delete'] === 'number') {
                this.ops[index - 1] = {
                  'delete': lastOp['delete'] + newOp['delete']
                };
                return this;
              }

              if (typeof lastOp['delete'] === 'number' && newOp.insert != null) {
                index -= 1;
                lastOp = this.ops[index - 1];

                if (typeof lastOp !== 'object') {
                  this.ops.unshift(newOp);
                  return this;
                }
              }

              if (equal(newOp.attributes, lastOp.attributes)) {
                if (typeof newOp.insert === 'string' && typeof lastOp.insert === 'string') {
                  this.ops[index - 1] = {
                    insert: lastOp.insert + newOp.insert
                  };
                  if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes;
                  return this;
                } else if (typeof newOp.retain === 'number' && typeof lastOp.retain === 'number') {
                  this.ops[index - 1] = {
                    retain: lastOp.retain + newOp.retain
                  };
                  if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes;
                  return this;
                }
              }
            }

            if (index === this.ops.length) {
              this.ops.push(newOp);
            } else {
              this.ops.splice(index, 0, newOp);
            }

            return this;
          };

          Delta.prototype.chop = function () {
            var lastOp = this.ops[this.ops.length - 1];

            if (lastOp && lastOp.retain && !lastOp.attributes) {
              this.ops.pop();
            }

            return this;
          };

          Delta.prototype.filter = function (predicate) {
            return this.ops.filter(predicate);
          };

          Delta.prototype.forEach = function (predicate) {
            this.ops.forEach(predicate);
          };

          Delta.prototype.map = function (predicate) {
            return this.ops.map(predicate);
          };

          Delta.prototype.partition = function (predicate) {
            var passed = [],
                failed = [];
            this.forEach(function (op) {
              var target = predicate(op) ? passed : failed;
              target.push(op);
            });
            return [passed, failed];
          };

          Delta.prototype.reduce = function (predicate, initial) {
            return this.ops.reduce(predicate, initial);
          };

          Delta.prototype.changeLength = function () {
            return this.reduce(function (length, elem) {
              if (elem.insert) {
                return length + op.length(elem);
              } else if (elem.delete) {
                return length - elem.delete;
              }

              return length;
            }, 0);
          };

          Delta.prototype.length = function () {
            return this.reduce(function (length, elem) {
              return length + op.length(elem);
            }, 0);
          };

          Delta.prototype.slice = function (start, end) {
            start = start || 0;
            if (typeof end !== 'number') end = Infinity;
            var ops = [];
            var iter = op.iterator(this.ops);
            var index = 0;

            while (index < end && iter.hasNext()) {
              var nextOp;

              if (index < start) {
                nextOp = iter.next(start - index);
              } else {
                nextOp = iter.next(end - index);
                ops.push(nextOp);
              }

              index += op.length(nextOp);
            }

            return new Delta(ops);
          };

          Delta.prototype.compose = function (other) {
            var thisIter = op.iterator(this.ops);
            var otherIter = op.iterator(other.ops);
            var ops = [];
            var firstOther = otherIter.peek();

            if (firstOther != null && typeof firstOther.retain === 'number' && firstOther.attributes == null) {
              var firstLeft = firstOther.retain;

              while (thisIter.peekType() === 'insert' && thisIter.peekLength() <= firstLeft) {
                firstLeft -= thisIter.peekLength();
                ops.push(thisIter.next());
              }

              if (firstOther.retain - firstLeft > 0) {
                otherIter.next(firstOther.retain - firstLeft);
              }
            }

            var delta = new Delta(ops);

            while (thisIter.hasNext() || otherIter.hasNext()) {
              if (otherIter.peekType() === 'insert') {
                delta.push(otherIter.next());
              } else if (thisIter.peekType() === 'delete') {
                delta.push(thisIter.next());
              } else {
                var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
                var thisOp = thisIter.next(length);
                var otherOp = otherIter.next(length);

                if (typeof otherOp.retain === 'number') {
                  var newOp = {};

                  if (typeof thisOp.retain === 'number') {
                    newOp.retain = length;
                  } else {
                    newOp.insert = thisOp.insert;
                  }

                  var attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');
                  if (attributes) newOp.attributes = attributes;
                  delta.push(newOp);

                  if (!otherIter.hasNext() && equal(delta.ops[delta.ops.length - 1], newOp)) {
                    var rest = new Delta(thisIter.rest());
                    return delta.concat(rest).chop();
                  }
                } else if (typeof otherOp['delete'] === 'number' && typeof thisOp.retain === 'number') {
                  delta.push(otherOp);
                }
              }
            }

            return delta.chop();
          };

          Delta.prototype.concat = function (other) {
            var delta = new Delta(this.ops.slice());

            if (other.ops.length > 0) {
              delta.push(other.ops[0]);
              delta.ops = delta.ops.concat(other.ops.slice(1));
            }

            return delta;
          };

          Delta.prototype.diff = function (other, index) {
            if (this.ops === other.ops) {
              return new Delta();
            }

            var strings = [this, other].map(function (delta) {
              return delta.map(function (op) {
                if (op.insert != null) {
                  return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;
                }

                var prep = delta === other ? 'on' : 'with';
                throw new Error('diff() called ' + prep + ' non-document');
              }).join('');
            });
            var delta = new Delta();
            var diffResult = diff(strings[0], strings[1], index);
            var thisIter = op.iterator(this.ops);
            var otherIter = op.iterator(other.ops);
            diffResult.forEach(function (component) {
              var length = component[1].length;

              while (length > 0) {
                var opLength = 0;

                switch (component[0]) {
                  case diff.INSERT:
                    opLength = Math.min(otherIter.peekLength(), length);
                    delta.push(otherIter.next(opLength));
                    break;

                  case diff.DELETE:
                    opLength = Math.min(length, thisIter.peekLength());
                    thisIter.next(opLength);
                    delta['delete'](opLength);
                    break;

                  case diff.EQUAL:
                    opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
                    var thisOp = thisIter.next(opLength);
                    var otherOp = otherIter.next(opLength);

                    if (equal(thisOp.insert, otherOp.insert)) {
                      delta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));
                    } else {
                      delta.push(otherOp)['delete'](opLength);
                    }

                    break;
                }

                length -= opLength;
              }
            });
            return delta.chop();
          };

          Delta.prototype.eachLine = function (predicate, newline) {
            newline = newline || '\n';
            var iter = op.iterator(this.ops);
            var line = new Delta();
            var i = 0;

            while (iter.hasNext()) {
              if (iter.peekType() !== 'insert') return;
              var thisOp = iter.peek();
              var start = op.length(thisOp) - iter.peekLength();
              var index = typeof thisOp.insert === 'string' ? thisOp.insert.indexOf(newline, start) - start : -1;

              if (index < 0) {
                line.push(iter.next());
              } else if (index > 0) {
                line.push(iter.next(index));
              } else {
                if (predicate(line, iter.next(1).attributes || {}, i) === false) {
                  return;
                }

                i += 1;
                line = new Delta();
              }
            }

            if (line.length() > 0) {
              predicate(line, {}, i);
            }
          };

          Delta.prototype.transform = function (other, priority) {
            priority = !!priority;

            if (typeof other === 'number') {
              return this.transformPosition(other, priority);
            }

            var thisIter = op.iterator(this.ops);
            var otherIter = op.iterator(other.ops);
            var delta = new Delta();

            while (thisIter.hasNext() || otherIter.hasNext()) {
              if (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {
                delta.retain(op.length(thisIter.next()));
              } else if (otherIter.peekType() === 'insert') {
                delta.push(otherIter.next());
              } else {
                var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
                var thisOp = thisIter.next(length);
                var otherOp = otherIter.next(length);

                if (thisOp['delete']) {
                  continue;
                } else if (otherOp['delete']) {
                  delta.push(otherOp);
                } else {
                  delta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));
                }
              }
            }

            return delta.chop();
          };

          Delta.prototype.transformPosition = function (index, priority) {
            priority = !!priority;
            var thisIter = op.iterator(this.ops);
            var offset = 0;

            while (thisIter.hasNext() && offset <= index) {
              var length = thisIter.peekLength();
              var nextType = thisIter.peekType();
              thisIter.next();

              if (nextType === 'delete') {
                index -= Math.min(length, index - offset);
                continue;
              } else if (nextType === 'insert' && (offset < index || !priority)) {
                index += length;
              }

              offset += length;
            }

            return index;
          };

          module.exports = Delta;
        }, function (module, exports) {
          var hasOwn = Object.prototype.hasOwnProperty;
          var toStr = Object.prototype.toString;
          var defineProperty = Object.defineProperty;
          var gOPD = Object.getOwnPropertyDescriptor;

          var isArray = function isArray(arr) {
            if (typeof Array.isArray === 'function') {
              return Array.isArray(arr);
            }

            return toStr.call(arr) === '[object Array]';
          };

          var isPlainObject = function isPlainObject(obj) {
            if (!obj || toStr.call(obj) !== '[object Object]') {
              return false;
            }

            var hasOwnConstructor = hasOwn.call(obj, 'constructor');
            var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');

            if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
              return false;
            }

            var key;

            for (key in obj) {}

            return typeof key === 'undefined' || hasOwn.call(obj, key);
          };

          var setProperty = function setProperty(target, options) {
            if (defineProperty && options.name === '__proto__') {
              defineProperty(target, options.name, {
                enumerable: true,
                configurable: true,
                value: options.newValue,
                writable: true
              });
            } else {
              target[options.name] = options.newValue;
            }
          };

          var getProperty = function getProperty(obj, name) {
            if (name === '__proto__') {
              if (!hasOwn.call(obj, name)) {
                return void 0;
              } else if (gOPD) {
                return gOPD(obj, name).value;
              }
            }

            return obj[name];
          };

          module.exports = function extend() {
            var options, name, src, copy, copyIsArray, clone;
            var target = arguments[0];
            var i = 1;
            var length = arguments.length;
            var deep = false;

            if (typeof target === 'boolean') {
              deep = target;
              target = arguments[1] || {};
              i = 2;
            }

            if (target == null || typeof target !== 'object' && typeof target !== 'function') {
              target = {};
            }

            for (; i < length; ++i) {
              options = arguments[i];

              if (options != null) {
                for (name in options) {
                  src = getProperty(target, name);
                  copy = getProperty(options, name);

                  if (target !== copy) {
                    if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
                      if (copyIsArray) {
                        copyIsArray = false;
                        clone = src && isArray(src) ? src : [];
                      } else {
                        clone = src && isPlainObject(src) ? src : {};
                      }

                      setProperty(target, {
                        name: name,
                        newValue: extend(deep, clone, copy)
                      });
                    } else if (typeof copy !== 'undefined') {
                      setProperty(target, {
                        name: name,
                        newValue: copy
                      });
                    }
                  }
                }
              }
            }

            return target;
          };
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = exports.BlockEmbed = exports.bubbleFormats = undefined;

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _extend = __webpack_require__(3);

          var _extend2 = _interopRequireDefault(_extend);

          var _quillDelta = __webpack_require__(2);

          var _quillDelta2 = _interopRequireDefault(_quillDelta);

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _break = __webpack_require__(16);

          var _break2 = _interopRequireDefault(_break);

          var _inline = __webpack_require__(6);

          var _inline2 = _interopRequireDefault(_inline);

          var _text = __webpack_require__(7);

          var _text2 = _interopRequireDefault(_text);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var NEWLINE_LENGTH = 1;

          var BlockEmbed = function (_Parchment$Embed) {
            _inherits(BlockEmbed, _Parchment$Embed);

            function BlockEmbed() {
              _classCallCheck(this, BlockEmbed);

              return _possibleConstructorReturn(this, (BlockEmbed.__proto__ || Object.getPrototypeOf(BlockEmbed)).apply(this, arguments));
            }

            _createClass(BlockEmbed, [{
              key: 'attach',
              value: function attach() {
                _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'attach', this).call(this);

                this.attributes = new _parchment2.default.Attributor.Store(this.domNode);
              }
            }, {
              key: 'delta',
              value: function delta() {
                return new _quillDelta2.default().insert(this.value(), (0, _extend2.default)(this.formats(), this.attributes.values()));
              }
            }, {
              key: 'format',
              value: function format(name, value) {
                var attribute = _parchment2.default.query(name, _parchment2.default.Scope.BLOCK_ATTRIBUTE);

                if (attribute != null) {
                  this.attributes.attribute(attribute, value);
                }
              }
            }, {
              key: 'formatAt',
              value: function formatAt(index, length, name, value) {
                this.format(name, value);
              }
            }, {
              key: 'insertAt',
              value: function insertAt(index, value, def) {
                if (typeof value === 'string' && value.endsWith('\n')) {
                  var block = _parchment2.default.create(Block.blotName);

                  this.parent.insertBefore(block, index === 0 ? this : this.next);
                  block.insertAt(0, value.slice(0, -1));
                } else {
                  _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'insertAt', this).call(this, index, value, def);
                }
              }
            }]);

            return BlockEmbed;
          }(_parchment2.default.Embed);

          BlockEmbed.scope = _parchment2.default.Scope.BLOCK_BLOT;

          var Block = function (_Parchment$Block) {
            _inherits(Block, _Parchment$Block);

            function Block(domNode) {
              _classCallCheck(this, Block);

              var _this2 = _possibleConstructorReturn(this, (Block.__proto__ || Object.getPrototypeOf(Block)).call(this, domNode));

              _this2.cache = {};
              return _this2;
            }

            _createClass(Block, [{
              key: 'delta',
              value: function delta() {
                if (this.cache.delta == null) {
                  this.cache.delta = this.descendants(_parchment2.default.Leaf).reduce(function (delta, leaf) {
                    if (leaf.length() === 0) {
                      return delta;
                    } else {
                      return delta.insert(leaf.value(), bubbleFormats(leaf));
                    }
                  }, new _quillDelta2.default()).insert('\n', bubbleFormats(this));
                }

                return this.cache.delta;
              }
            }, {
              key: 'deleteAt',
              value: function deleteAt(index, length) {
                _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'deleteAt', this).call(this, index, length);

                this.cache = {};
              }
            }, {
              key: 'formatAt',
              value: function formatAt(index, length, name, value) {
                if (length <= 0) return;

                if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
                  if (index + length === this.length()) {
                    this.format(name, value);
                  }
                } else {
                  _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'formatAt', this).call(this, index, Math.min(length, this.length() - index - 1), name, value);
                }

                this.cache = {};
              }
            }, {
              key: 'insertAt',
              value: function insertAt(index, value, def) {
                if (def != null) return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, index, value, def);
                if (value.length === 0) return;
                var lines = value.split('\n');
                var text = lines.shift();

                if (text.length > 0) {
                  if (index < this.length() - 1 || this.children.tail == null) {
                    _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, Math.min(index, this.length() - 1), text);
                  } else {
                    this.children.tail.insertAt(this.children.tail.length(), text);
                  }

                  this.cache = {};
                }

                var block = this;
                lines.reduce(function (index, line) {
                  block = block.split(index, true);
                  block.insertAt(0, line);
                  return line.length;
                }, index + text.length);
              }
            }, {
              key: 'insertBefore',
              value: function insertBefore(blot, ref) {
                var head = this.children.head;

                _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertBefore', this).call(this, blot, ref);

                if (head instanceof _break2.default) {
                  head.remove();
                }

                this.cache = {};
              }
            }, {
              key: 'length',
              value: function length() {
                if (this.cache.length == null) {
                  this.cache.length = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'length', this).call(this) + NEWLINE_LENGTH;
                }

                return this.cache.length;
              }
            }, {
              key: 'moveChildren',
              value: function moveChildren(target, ref) {
                _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'moveChildren', this).call(this, target, ref);

                this.cache = {};
              }
            }, {
              key: 'optimize',
              value: function optimize(context) {
                _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'optimize', this).call(this, context);

                this.cache = {};
              }
            }, {
              key: 'path',
              value: function path(index) {
                return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'path', this).call(this, index, true);
              }
            }, {
              key: 'removeChild',
              value: function removeChild(child) {
                _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'removeChild', this).call(this, child);

                this.cache = {};
              }
            }, {
              key: 'split',
              value: function split(index) {
                var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

                if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {
                  var clone = this.clone();

                  if (index === 0) {
                    this.parent.insertBefore(clone, this);
                    return this;
                  } else {
                    this.parent.insertBefore(clone, this.next);
                    return clone;
                  }
                } else {
                  var next = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'split', this).call(this, index, force);

                  this.cache = {};
                  return next;
                }
              }
            }]);

            return Block;
          }(_parchment2.default.Block);

          Block.blotName = 'block';
          Block.tagName = 'P';
          Block.defaultChild = 'break';
          Block.allowedChildren = [_inline2.default, _parchment2.default.Embed, _text2.default];

          function bubbleFormats(blot) {
            var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            if (blot == null) return formats;

            if (typeof blot.formats === 'function') {
              formats = (0, _extend2.default)(formats, blot.formats());
            }

            if (blot.parent == null || blot.parent.blotName == 'scroll' || blot.parent.statics.scope !== blot.statics.scope) {
              return formats;
            }

            return bubbleFormats(blot.parent, formats);
          }

          exports.bubbleFormats = bubbleFormats;
          exports.BlockEmbed = BlockEmbed;
          exports.default = Block;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = exports.overload = exports.expandConfig = undefined;

          var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
            return typeof obj;
          } : function (obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };

          var _slicedToArray = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;

              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          __webpack_require__(50);

          var _quillDelta = __webpack_require__(2);

          var _quillDelta2 = _interopRequireDefault(_quillDelta);

          var _editor = __webpack_require__(14);

          var _editor2 = _interopRequireDefault(_editor);

          var _emitter3 = __webpack_require__(8);

          var _emitter4 = _interopRequireDefault(_emitter3);

          var _module = __webpack_require__(9);

          var _module2 = _interopRequireDefault(_module);

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _selection = __webpack_require__(15);

          var _selection2 = _interopRequireDefault(_selection);

          var _extend = __webpack_require__(3);

          var _extend2 = _interopRequireDefault(_extend);

          var _logger = __webpack_require__(10);

          var _logger2 = _interopRequireDefault(_logger);

          var _theme = __webpack_require__(34);

          var _theme2 = _interopRequireDefault(_theme);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
              });
            } else {
              obj[key] = value;
            }

            return obj;
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var debug = (0, _logger2.default)('quill');

          var Quill = function () {
            _createClass(Quill, null, [{
              key: 'debug',
              value: function debug(limit) {
                if (limit === true) {
                  limit = 'log';
                }

                _logger2.default.level(limit);
              }
            }, {
              key: 'find',
              value: function find(node) {
                return node.__quill || _parchment2.default.find(node);
              }
            }, {
              key: 'import',
              value: function _import(name) {
                if (this.imports[name] == null) {
                  debug.error('Cannot import ' + name + '. Are you sure it was registered?');
                }

                return this.imports[name];
              }
            }, {
              key: 'register',
              value: function register(path, target) {
                var _this = this;

                var overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

                if (typeof path !== 'string') {
                  var name = path.attrName || path.blotName;

                  if (typeof name === 'string') {
                    this.register('formats/' + name, path, target);
                  } else {
                    Object.keys(path).forEach(function (key) {
                      _this.register(key, path[key], target);
                    });
                  }
                } else {
                  if (this.imports[path] != null && !overwrite) {
                    debug.warn('Overwriting ' + path + ' with', target);
                  }

                  this.imports[path] = target;

                  if ((path.startsWith('blots/') || path.startsWith('formats/')) && target.blotName !== 'abstract') {
                    _parchment2.default.register(target);
                  } else if (path.startsWith('modules') && typeof target.register === 'function') {
                    target.register();
                  }
                }
              }
            }]);

            function Quill(container) {
              var _this2 = this;

              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

              _classCallCheck(this, Quill);

              this.options = expandConfig(container, options);
              this.container = this.options.container;

              if (this.container == null) {
                return debug.error('Invalid Quill container', container);
              }

              if (this.options.debug) {
                Quill.debug(this.options.debug);
              }

              var html = this.container.innerHTML.trim();
              this.container.classList.add('ql-container');
              this.container.innerHTML = '';
              this.container.__quill = this;
              this.root = this.addContainer('ql-editor');
              this.root.classList.add('ql-blank');
              this.root.setAttribute('data-gramm', false);
              this.scrollingContainer = this.options.scrollingContainer || this.root;
              this.emitter = new _emitter4.default();
              this.scroll = _parchment2.default.create(this.root, {
                emitter: this.emitter,
                whitelist: this.options.formats
              });
              this.editor = new _editor2.default(this.scroll);
              this.selection = new _selection2.default(this.scroll, this.emitter);
              this.theme = new this.options.theme(this, this.options);
              this.keyboard = this.theme.addModule('keyboard');
              this.clipboard = this.theme.addModule('clipboard');
              this.history = this.theme.addModule('history');
              this.theme.init();
              this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type) {
                if (type === _emitter4.default.events.TEXT_CHANGE) {
                  _this2.root.classList.toggle('ql-blank', _this2.editor.isBlank());
                }
              });
              this.emitter.on(_emitter4.default.events.SCROLL_UPDATE, function (source, mutations) {
                var range = _this2.selection.lastRange;
                var index = range && range.length === 0 ? range.index : undefined;
                modify.call(_this2, function () {
                  return _this2.editor.update(null, mutations, index);
                }, source);
              });
              var contents = this.clipboard.convert('<div class=\'ql-editor\' style="white-space: normal;">' + html + '<p><br></p></div>');
              this.setContents(contents);
              this.history.clear();

              if (this.options.placeholder) {
                this.root.setAttribute('data-placeholder', this.options.placeholder);
              }

              if (this.options.readOnly) {
                this.disable();
              }
            }

            _createClass(Quill, [{
              key: 'addContainer',
              value: function addContainer(container) {
                var refNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

                if (typeof container === 'string') {
                  var className = container;
                  container = document.createElement('div');
                  container.classList.add(className);
                }

                this.container.insertBefore(container, refNode);
                return container;
              }
            }, {
              key: 'blur',
              value: function blur() {
                this.selection.setRange(null);
              }
            }, {
              key: 'deleteText',
              value: function deleteText(index, length, source) {
                var _this3 = this;

                var _overload = overload(index, length, source);

                var _overload2 = _slicedToArray(_overload, 4);

                index = _overload2[0];
                length = _overload2[1];
                source = _overload2[3];
                return modify.call(this, function () {
                  return _this3.editor.deleteText(index, length);
                }, source, index, -1 * length);
              }
            }, {
              key: 'disable',
              value: function disable() {
                this.enable(false);
              }
            }, {
              key: 'enable',
              value: function enable() {
                var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                this.scroll.enable(enabled);
                this.container.classList.toggle('ql-disabled', !enabled);
              }
            }, {
              key: 'focus',
              value: function focus() {
                var scrollTop = this.scrollingContainer.scrollTop;
                this.selection.focus();
                this.scrollingContainer.scrollTop = scrollTop;
                this.scrollIntoView();
              }
            }, {
              key: 'format',
              value: function format(name, value) {
                var _this4 = this;

                var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;
                return modify.call(this, function () {
                  var range = _this4.getSelection(true);

                  var change = new _quillDelta2.default();

                  if (range == null) {
                    return change;
                  } else if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
                    change = _this4.editor.formatLine(range.index, range.length, _defineProperty({}, name, value));
                  } else if (range.length === 0) {
                    _this4.selection.format(name, value);

                    return change;
                  } else {
                    change = _this4.editor.formatText(range.index, range.length, _defineProperty({}, name, value));
                  }

                  _this4.setSelection(range, _emitter4.default.sources.SILENT);

                  return change;
                }, source);
              }
            }, {
              key: 'formatLine',
              value: function formatLine(index, length, name, value, source) {
                var _this5 = this;

                var formats = void 0;

                var _overload3 = overload(index, length, name, value, source);

                var _overload4 = _slicedToArray(_overload3, 4);

                index = _overload4[0];
                length = _overload4[1];
                formats = _overload4[2];
                source = _overload4[3];
                return modify.call(this, function () {
                  return _this5.editor.formatLine(index, length, formats);
                }, source, index, 0);
              }
            }, {
              key: 'formatText',
              value: function formatText(index, length, name, value, source) {
                var _this6 = this;

                var formats = void 0;

                var _overload5 = overload(index, length, name, value, source);

                var _overload6 = _slicedToArray(_overload5, 4);

                index = _overload6[0];
                length = _overload6[1];
                formats = _overload6[2];
                source = _overload6[3];
                return modify.call(this, function () {
                  return _this6.editor.formatText(index, length, formats);
                }, source, index, 0);
              }
            }, {
              key: 'getBounds',
              value: function getBounds(index) {
                var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var bounds = void 0;

                if (typeof index === 'number') {
                  bounds = this.selection.getBounds(index, length);
                } else {
                  bounds = this.selection.getBounds(index.index, index.length);
                }

                var containerBounds = this.container.getBoundingClientRect();
                return {
                  bottom: bounds.bottom - containerBounds.top,
                  height: bounds.height,
                  left: bounds.left - containerBounds.left,
                  right: bounds.right - containerBounds.left,
                  top: bounds.top - containerBounds.top,
                  width: bounds.width
                };
              }
            }, {
              key: 'getContents',
              value: function getContents() {
                var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;

                var _overload7 = overload(index, length);

                var _overload8 = _slicedToArray(_overload7, 2);

                index = _overload8[0];
                length = _overload8[1];
                return this.editor.getContents(index, length);
              }
            }, {
              key: 'getFormat',
              value: function getFormat() {
                var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSelection(true);
                var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

                if (typeof index === 'number') {
                  return this.editor.getFormat(index, length);
                } else {
                  return this.editor.getFormat(index.index, index.length);
                }
              }
            }, {
              key: 'getIndex',
              value: function getIndex(blot) {
                return blot.offset(this.scroll);
              }
            }, {
              key: 'getLength',
              value: function getLength() {
                return this.scroll.length();
              }
            }, {
              key: 'getLeaf',
              value: function getLeaf(index) {
                return this.scroll.leaf(index);
              }
            }, {
              key: 'getLine',
              value: function getLine(index) {
                return this.scroll.line(index);
              }
            }, {
              key: 'getLines',
              value: function getLines() {
                var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

                if (typeof index !== 'number') {
                  return this.scroll.lines(index.index, index.length);
                } else {
                  return this.scroll.lines(index, length);
                }
              }
            }, {
              key: 'getModule',
              value: function getModule(name) {
                return this.theme.modules[name];
              }
            }, {
              key: 'getSelection',
              value: function getSelection() {
                var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                if (focus) this.focus();
                this.update();
                return this.selection.getRange()[0];
              }
            }, {
              key: 'getText',
              value: function getText() {
                var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;

                var _overload9 = overload(index, length);

                var _overload10 = _slicedToArray(_overload9, 2);

                index = _overload10[0];
                length = _overload10[1];
                return this.editor.getText(index, length);
              }
            }, {
              key: 'hasFocus',
              value: function hasFocus() {
                return this.selection.hasFocus();
              }
            }, {
              key: 'insertEmbed',
              value: function insertEmbed(index, embed, value) {
                var _this7 = this;

                var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Quill.sources.API;
                return modify.call(this, function () {
                  return _this7.editor.insertEmbed(index, embed, value);
                }, source, index);
              }
            }, {
              key: 'insertText',
              value: function insertText(index, text, name, value, source) {
                var _this8 = this;

                var formats = void 0;

                var _overload11 = overload(index, 0, name, value, source);

                var _overload12 = _slicedToArray(_overload11, 4);

                index = _overload12[0];
                formats = _overload12[2];
                source = _overload12[3];
                return modify.call(this, function () {
                  return _this8.editor.insertText(index, text, formats);
                }, source, index, text.length);
              }
            }, {
              key: 'isEnabled',
              value: function isEnabled() {
                return !this.container.classList.contains('ql-disabled');
              }
            }, {
              key: 'off',
              value: function off() {
                return this.emitter.off.apply(this.emitter, arguments);
              }
            }, {
              key: 'on',
              value: function on() {
                return this.emitter.on.apply(this.emitter, arguments);
              }
            }, {
              key: 'once',
              value: function once() {
                return this.emitter.once.apply(this.emitter, arguments);
              }
            }, {
              key: 'pasteHTML',
              value: function pasteHTML(index, html, source) {
                this.clipboard.dangerouslyPasteHTML(index, html, source);
              }
            }, {
              key: 'removeFormat',
              value: function removeFormat(index, length, source) {
                var _this9 = this;

                var _overload13 = overload(index, length, source);

                var _overload14 = _slicedToArray(_overload13, 4);

                index = _overload14[0];
                length = _overload14[1];
                source = _overload14[3];
                return modify.call(this, function () {
                  return _this9.editor.removeFormat(index, length);
                }, source, index);
              }
            }, {
              key: 'scrollIntoView',
              value: function scrollIntoView() {
                this.selection.scrollIntoView(this.scrollingContainer);
              }
            }, {
              key: 'setContents',
              value: function setContents(delta) {
                var _this10 = this;

                var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;
                return modify.call(this, function () {
                  delta = new _quillDelta2.default(delta);

                  var length = _this10.getLength();

                  var deleted = _this10.editor.deleteText(0, length);

                  var applied = _this10.editor.applyDelta(delta);

                  var lastOp = applied.ops[applied.ops.length - 1];

                  if (lastOp != null && typeof lastOp.insert === 'string' && lastOp.insert[lastOp.insert.length - 1] === '\n') {
                    _this10.editor.deleteText(_this10.getLength() - 1, 1);

                    applied.delete(1);
                  }

                  var ret = deleted.compose(applied);
                  return ret;
                }, source);
              }
            }, {
              key: 'setSelection',
              value: function setSelection(index, length, source) {
                if (index == null) {
                  this.selection.setRange(null, length || Quill.sources.API);
                } else {
                  var _overload15 = overload(index, length, source);

                  var _overload16 = _slicedToArray(_overload15, 4);

                  index = _overload16[0];
                  length = _overload16[1];
                  source = _overload16[3];
                  this.selection.setRange(new _selection.Range(index, length), source);

                  if (source !== _emitter4.default.sources.SILENT) {
                    this.selection.scrollIntoView(this.scrollingContainer);
                  }
                }
              }
            }, {
              key: 'setText',
              value: function setText(text) {
                var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;
                var delta = new _quillDelta2.default().insert(text);
                return this.setContents(delta, source);
              }
            }, {
              key: 'update',
              value: function update() {
                var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;
                var change = this.scroll.update(source);
                this.selection.update(source);
                return change;
              }
            }, {
              key: 'updateContents',
              value: function updateContents(delta) {
                var _this11 = this;

                var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;
                return modify.call(this, function () {
                  delta = new _quillDelta2.default(delta);
                  return _this11.editor.applyDelta(delta, source);
                }, source, true);
              }
            }]);

            return Quill;
          }();

          Quill.DEFAULTS = {
            bounds: null,
            formats: null,
            modules: {},
            placeholder: '',
            readOnly: false,
            scrollingContainer: null,
            strict: true,
            theme: 'default'
          };
          Quill.events = _emitter4.default.events;
          Quill.sources = _emitter4.default.sources;
          Quill.version = "1.3.7";
          Quill.imports = {
            'delta': _quillDelta2.default,
            'parchment': _parchment2.default,
            'core/module': _module2.default,
            'core/theme': _theme2.default
          };

          function expandConfig(container, userConfig) {
            userConfig = (0, _extend2.default)(true, {
              container: container,
              modules: {
                clipboard: true,
                keyboard: true,
                history: true
              }
            }, userConfig);

            if (!userConfig.theme || userConfig.theme === Quill.DEFAULTS.theme) {
              userConfig.theme = _theme2.default;
            } else {
              userConfig.theme = Quill.import('themes/' + userConfig.theme);

              if (userConfig.theme == null) {
                throw new Error('Invalid theme ' + userConfig.theme + '. Did you register it?');
              }
            }

            var themeConfig = (0, _extend2.default)(true, {}, userConfig.theme.DEFAULTS);
            [themeConfig, userConfig].forEach(function (config) {
              config.modules = config.modules || {};
              Object.keys(config.modules).forEach(function (module) {
                if (config.modules[module] === true) {
                  config.modules[module] = {};
                }
              });
            });
            var moduleNames = Object.keys(themeConfig.modules).concat(Object.keys(userConfig.modules));
            var moduleConfig = moduleNames.reduce(function (config, name) {
              var moduleClass = Quill.import('modules/' + name);

              if (moduleClass == null) {
                debug.error('Cannot load ' + name + ' module. Are you sure you registered it?');
              } else {
                config[name] = moduleClass.DEFAULTS || {};
              }

              return config;
            }, {});

            if (userConfig.modules != null && userConfig.modules.toolbar && userConfig.modules.toolbar.constructor !== Object) {
              userConfig.modules.toolbar = {
                container: userConfig.modules.toolbar
              };
            }

            userConfig = (0, _extend2.default)(true, {}, Quill.DEFAULTS, {
              modules: moduleConfig
            }, themeConfig, userConfig);
            ['bounds', 'container', 'scrollingContainer'].forEach(function (key) {
              if (typeof userConfig[key] === 'string') {
                userConfig[key] = document.querySelector(userConfig[key]);
              }
            });
            userConfig.modules = Object.keys(userConfig.modules).reduce(function (config, name) {
              if (userConfig.modules[name]) {
                config[name] = userConfig.modules[name];
              }

              return config;
            }, {});
            return userConfig;
          }

          function modify(modifier, source, index, shift) {
            if (this.options.strict && !this.isEnabled() && source === _emitter4.default.sources.USER) {
              return new _quillDelta2.default();
            }

            var range = index == null ? null : this.getSelection();
            var oldDelta = this.editor.delta;
            var change = modifier();

            if (range != null) {
              if (index === true) index = range.index;

              if (shift == null) {
                range = shiftRange(range, change, source);
              } else if (shift !== 0) {
                range = shiftRange(range, index, shift, source);
              }

              this.setSelection(range, _emitter4.default.sources.SILENT);
            }

            if (change.length() > 0) {
              var _emitter;

              var args = [_emitter4.default.events.TEXT_CHANGE, change, oldDelta, source];

              (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));

              if (source !== _emitter4.default.sources.SILENT) {
                var _emitter2;

                (_emitter2 = this.emitter).emit.apply(_emitter2, args);
              }
            }

            return change;
          }

          function overload(index, length, name, value, source) {
            var formats = {};

            if (typeof index.index === 'number' && typeof index.length === 'number') {
              if (typeof length !== 'number') {
                source = value, value = name, name = length, length = index.length, index = index.index;
              } else {
                length = index.length, index = index.index;
              }
            } else if (typeof length !== 'number') {
              source = value, value = name, name = length, length = 0;
            }

            if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
              formats = name;
              source = value;
            } else if (typeof name === 'string') {
              if (value != null) {
                formats[name] = value;
              } else {
                source = name;
              }
            }

            source = source || _emitter4.default.sources.API;
            return [index, length, formats, source];
          }

          function shiftRange(range, index, length, source) {
            if (range == null) return null;
            var start = void 0,
                end = void 0;

            if (index instanceof _quillDelta2.default) {
              var _map = [range.index, range.index + range.length].map(function (pos) {
                return index.transformPosition(pos, source !== _emitter4.default.sources.USER);
              });

              var _map2 = _slicedToArray(_map, 2);

              start = _map2[0];
              end = _map2[1];
            } else {
              var _map3 = [range.index, range.index + range.length].map(function (pos) {
                if (pos < index || pos === index && source === _emitter4.default.sources.USER) return pos;

                if (length >= 0) {
                  return pos + length;
                } else {
                  return Math.max(index, pos + length);
                }
              });

              var _map4 = _slicedToArray(_map3, 2);

              start = _map4[0];
              end = _map4[1];
            }

            return new _selection.Range(start, end - start);
          }

          exports.expandConfig = expandConfig;
          exports.overload = overload;
          exports.default = Quill;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _text = __webpack_require__(7);

          var _text2 = _interopRequireDefault(_text);

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Inline = function (_Parchment$Inline) {
            _inherits(Inline, _Parchment$Inline);

            function Inline() {
              _classCallCheck(this, Inline);

              return _possibleConstructorReturn(this, (Inline.__proto__ || Object.getPrototypeOf(Inline)).apply(this, arguments));
            }

            _createClass(Inline, [{
              key: 'formatAt',
              value: function formatAt(index, length, name, value) {
                if (Inline.compare(this.statics.blotName, name) < 0 && _parchment2.default.query(name, _parchment2.default.Scope.BLOT)) {
                  var blot = this.isolate(index, length);

                  if (value) {
                    blot.wrap(name, value);
                  }
                } else {
                  _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'formatAt', this).call(this, index, length, name, value);
                }
              }
            }, {
              key: 'optimize',
              value: function optimize(context) {
                _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'optimize', this).call(this, context);

                if (this.parent instanceof Inline && Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {
                  var parent = this.parent.isolate(this.offset(), this.length());
                  this.moveChildren(parent);
                  parent.wrap(this);
                }
              }
            }], [{
              key: 'compare',
              value: function compare(self, other) {
                var selfIndex = Inline.order.indexOf(self);
                var otherIndex = Inline.order.indexOf(other);

                if (selfIndex >= 0 || otherIndex >= 0) {
                  return selfIndex - otherIndex;
                } else if (self === other) {
                  return 0;
                } else if (self < other) {
                  return -1;
                } else {
                  return 1;
                }
              }
            }]);

            return Inline;
          }(_parchment2.default.Inline);

          Inline.allowedChildren = [Inline, _parchment2.default.Embed, _text2.default];
          Inline.order = ['cursor', 'inline', 'underline', 'strike', 'italic', 'bold', 'script', 'link', 'code'];
          exports.default = Inline;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var TextBlot = function (_Parchment$Text) {
            _inherits(TextBlot, _Parchment$Text);

            function TextBlot() {
              _classCallCheck(this, TextBlot);

              return _possibleConstructorReturn(this, (TextBlot.__proto__ || Object.getPrototypeOf(TextBlot)).apply(this, arguments));
            }

            return TextBlot;
          }(_parchment2.default.Text);

          exports.default = TextBlot;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _eventemitter = __webpack_require__(54);

          var _eventemitter2 = _interopRequireDefault(_eventemitter);

          var _logger = __webpack_require__(10);

          var _logger2 = _interopRequireDefault(_logger);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var debug = (0, _logger2.default)('quill:events');
          var EVENTS = ['selectionchange', 'mousedown', 'mouseup', 'click'];
          EVENTS.forEach(function (eventName) {
            document.addEventListener(eventName, function () {
              for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              [].slice.call(document.querySelectorAll('.ql-container')).forEach(function (node) {
                if (node.__quill && node.__quill.emitter) {
                  var _node$__quill$emitter;

                  (_node$__quill$emitter = node.__quill.emitter).handleDOM.apply(_node$__quill$emitter, args);
                }
              });
            });
          });

          var Emitter = function (_EventEmitter) {
            _inherits(Emitter, _EventEmitter);

            function Emitter() {
              _classCallCheck(this, Emitter);

              var _this = _possibleConstructorReturn(this, (Emitter.__proto__ || Object.getPrototypeOf(Emitter)).call(this));

              _this.listeners = {};

              _this.on('error', debug.error);

              return _this;
            }

            _createClass(Emitter, [{
              key: 'emit',
              value: function emit() {
                debug.log.apply(debug, arguments);

                _get(Emitter.prototype.__proto__ || Object.getPrototypeOf(Emitter.prototype), 'emit', this).apply(this, arguments);
              }
            }, {
              key: 'handleDOM',
              value: function handleDOM(event) {
                for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }

                (this.listeners[event.type] || []).forEach(function (_ref) {
                  var node = _ref.node,
                      handler = _ref.handler;

                  if (event.target === node || node.contains(event.target)) {
                    handler.apply(undefined, [event].concat(args));
                  }
                });
              }
            }, {
              key: 'listenDOM',
              value: function listenDOM(eventName, node, handler) {
                if (!this.listeners[eventName]) {
                  this.listeners[eventName] = [];
                }

                this.listeners[eventName].push({
                  node: node,
                  handler: handler
                });
              }
            }]);

            return Emitter;
          }(_eventemitter2.default);

          Emitter.events = {
            EDITOR_CHANGE: 'editor-change',
            SCROLL_BEFORE_UPDATE: 'scroll-before-update',
            SCROLL_OPTIMIZE: 'scroll-optimize',
            SCROLL_UPDATE: 'scroll-update',
            SELECTION_CHANGE: 'selection-change',
            TEXT_CHANGE: 'text-change'
          };
          Emitter.sources = {
            API: 'api',
            SILENT: 'silent',
            USER: 'user'
          };
          exports.default = Emitter;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var Module = function Module(quill) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            _classCallCheck(this, Module);

            this.quill = quill;
            this.options = options;
          };

          Module.DEFAULTS = {};
          exports.default = Module;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          var levels = ['error', 'warn', 'log', 'info'];
          var level = 'warn';

          function debug(method) {
            if (levels.indexOf(method) <= levels.indexOf(level)) {
              var _console;

              for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }

              (_console = console)[method].apply(_console, args);
            }
          }

          function namespace(ns) {
            return levels.reduce(function (logger, method) {
              logger[method] = debug.bind(console, method, ns);
              return logger;
            }, {});
          }

          debug.level = namespace.level = function (newLevel) {
            level = newLevel;
          };

          exports.default = namespace;
        }, function (module, exports, __webpack_require__) {
          var pSlice = Array.prototype.slice;

          var objectKeys = __webpack_require__(52);

          var isArguments = __webpack_require__(53);

          var deepEqual = module.exports = function (actual, expected, opts) {
            if (!opts) opts = {};

            if (actual === expected) {
              return true;
            } else if (actual instanceof Date && expected instanceof Date) {
              return actual.getTime() === expected.getTime();
            } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
              return opts.strict ? actual === expected : actual == expected;
            } else {
              return objEquiv(actual, expected, opts);
            }
          };

          function isUndefinedOrNull(value) {
            return value === null || value === undefined;
          }

          function isBuffer(x) {
            if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;

            if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
              return false;
            }

            if (x.length > 0 && typeof x[0] !== 'number') return false;
            return true;
          }

          function objEquiv(a, b, opts) {
            var i, key;
            if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) return false;
            if (a.prototype !== b.prototype) return false;

            if (isArguments(a)) {
              if (!isArguments(b)) {
                return false;
              }

              a = pSlice.call(a);
              b = pSlice.call(b);
              return deepEqual(a, b, opts);
            }

            if (isBuffer(a)) {
              if (!isBuffer(b)) {
                return false;
              }

              if (a.length !== b.length) return false;

              for (i = 0; i < a.length; i++) {
                if (a[i] !== b[i]) return false;
              }

              return true;
            }

            try {
              var ka = objectKeys(a),
                  kb = objectKeys(b);
            } catch (e) {
              return false;
            }

            if (ka.length != kb.length) return false;
            ka.sort();
            kb.sort();

            for (i = ka.length - 1; i >= 0; i--) {
              if (ka[i] != kb[i]) return false;
            }

            for (i = ka.length - 1; i >= 0; i--) {
              key = ka[i];
              if (!deepEqual(a[key], b[key], opts)) return false;
            }

            return typeof a === typeof b;
          }
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var Registry = __webpack_require__(1);

          var Attributor = function () {
            function Attributor(attrName, keyName, options) {
              if (options === void 0) {
                options = {};
              }

              this.attrName = attrName;
              this.keyName = keyName;
              var attributeBit = Registry.Scope.TYPE & Registry.Scope.ATTRIBUTE;

              if (options.scope != null) {
                this.scope = options.scope & Registry.Scope.LEVEL | attributeBit;
              } else {
                this.scope = Registry.Scope.ATTRIBUTE;
              }

              if (options.whitelist != null) this.whitelist = options.whitelist;
            }

            Attributor.keys = function (node) {
              return [].map.call(node.attributes, function (item) {
                return item.name;
              });
            };

            Attributor.prototype.add = function (node, value) {
              if (!this.canAdd(node, value)) return false;
              node.setAttribute(this.keyName, value);
              return true;
            };

            Attributor.prototype.canAdd = function (node, value) {
              var match = Registry.query(node, Registry.Scope.BLOT & (this.scope | Registry.Scope.TYPE));
              if (match == null) return false;
              if (this.whitelist == null) return true;

              if (typeof value === 'string') {
                return this.whitelist.indexOf(value.replace(/["']/g, '')) > -1;
              } else {
                return this.whitelist.indexOf(value) > -1;
              }
            };

            Attributor.prototype.remove = function (node) {
              node.removeAttribute(this.keyName);
            };

            Attributor.prototype.value = function (node) {
              var value = node.getAttribute(this.keyName);

              if (this.canAdd(node, value) && value) {
                return value;
              }

              return '';
            };

            return Attributor;
          }();

          exports.default = Attributor;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = exports.Code = undefined;

          var _slicedToArray = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;

              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _quillDelta = __webpack_require__(2);

          var _quillDelta2 = _interopRequireDefault(_quillDelta);

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _block = __webpack_require__(4);

          var _block2 = _interopRequireDefault(_block);

          var _inline = __webpack_require__(6);

          var _inline2 = _interopRequireDefault(_inline);

          var _text = __webpack_require__(7);

          var _text2 = _interopRequireDefault(_text);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Code = function (_Inline) {
            _inherits(Code, _Inline);

            function Code() {
              _classCallCheck(this, Code);

              return _possibleConstructorReturn(this, (Code.__proto__ || Object.getPrototypeOf(Code)).apply(this, arguments));
            }

            return Code;
          }(_inline2.default);

          Code.blotName = 'code';
          Code.tagName = 'CODE';

          var CodeBlock = function (_Block) {
            _inherits(CodeBlock, _Block);

            function CodeBlock() {
              _classCallCheck(this, CodeBlock);

              return _possibleConstructorReturn(this, (CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock)).apply(this, arguments));
            }

            _createClass(CodeBlock, [{
              key: 'delta',
              value: function delta() {
                var _this3 = this;

                var text = this.domNode.textContent;

                if (text.endsWith('\n')) {
                  text = text.slice(0, -1);
                }

                return text.split('\n').reduce(function (delta, frag) {
                  return delta.insert(frag).insert('\n', _this3.formats());
                }, new _quillDelta2.default());
              }
            }, {
              key: 'format',
              value: function format(name, value) {
                if (name === this.statics.blotName && value) return;

                var _descendant = this.descendant(_text2.default, this.length() - 1),
                    _descendant2 = _slicedToArray(_descendant, 1),
                    text = _descendant2[0];

                if (text != null) {
                  text.deleteAt(text.length() - 1, 1);
                }

                _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'format', this).call(this, name, value);
              }
            }, {
              key: 'formatAt',
              value: function formatAt(index, length, name, value) {
                if (length === 0) return;

                if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK) == null || name === this.statics.blotName && value === this.statics.formats(this.domNode)) {
                  return;
                }

                var nextNewline = this.newlineIndex(index);
                if (nextNewline < 0 || nextNewline >= index + length) return;
                var prevNewline = this.newlineIndex(index, true) + 1;
                var isolateLength = nextNewline - prevNewline + 1;
                var blot = this.isolate(prevNewline, isolateLength);
                var next = blot.next;
                blot.format(name, value);

                if (next instanceof CodeBlock) {
                  next.formatAt(0, index - prevNewline + length - isolateLength, name, value);
                }
              }
            }, {
              key: 'insertAt',
              value: function insertAt(index, value, def) {
                if (def != null) return;

                var _descendant3 = this.descendant(_text2.default, index),
                    _descendant4 = _slicedToArray(_descendant3, 2),
                    text = _descendant4[0],
                    offset = _descendant4[1];

                text.insertAt(offset, value);
              }
            }, {
              key: 'length',
              value: function length() {
                var length = this.domNode.textContent.length;

                if (!this.domNode.textContent.endsWith('\n')) {
                  return length + 1;
                }

                return length;
              }
            }, {
              key: 'newlineIndex',
              value: function newlineIndex(searchIndex) {
                var reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

                if (!reverse) {
                  var offset = this.domNode.textContent.slice(searchIndex).indexOf('\n');
                  return offset > -1 ? searchIndex + offset : -1;
                } else {
                  return this.domNode.textContent.slice(0, searchIndex).lastIndexOf('\n');
                }
              }
            }, {
              key: 'optimize',
              value: function optimize(context) {
                if (!this.domNode.textContent.endsWith('\n')) {
                  this.appendChild(_parchment2.default.create('text', '\n'));
                }

                _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'optimize', this).call(this, context);

                var next = this.next;

                if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && this.statics.formats(this.domNode) === next.statics.formats(next.domNode)) {
                  next.optimize(context);
                  next.moveChildren(this);
                  next.remove();
                }
              }
            }, {
              key: 'replace',
              value: function replace(target) {
                _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'replace', this).call(this, target);

                [].slice.call(this.domNode.querySelectorAll('*')).forEach(function (node) {
                  var blot = _parchment2.default.find(node);

                  if (blot == null) {
                    node.parentNode.removeChild(node);
                  } else if (blot instanceof _parchment2.default.Embed) {
                    blot.remove();
                  } else {
                    blot.unwrap();
                  }
                });
              }
            }], [{
              key: 'create',
              value: function create(value) {
                var domNode = _get(CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock), 'create', this).call(this, value);

                domNode.setAttribute('spellcheck', false);
                return domNode;
              }
            }, {
              key: 'formats',
              value: function formats() {
                return true;
              }
            }]);

            return CodeBlock;
          }(_block2.default);

          CodeBlock.blotName = 'code-block';
          CodeBlock.tagName = 'PRE';
          CodeBlock.TAB = '  ';
          exports.Code = Code;
          exports.default = CodeBlock;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
            return typeof obj;
          } : function (obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };

          var _slicedToArray = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;

              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _quillDelta = __webpack_require__(2);

          var _quillDelta2 = _interopRequireDefault(_quillDelta);

          var _op = __webpack_require__(20);

          var _op2 = _interopRequireDefault(_op);

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _code = __webpack_require__(13);

          var _code2 = _interopRequireDefault(_code);

          var _cursor = __webpack_require__(24);

          var _cursor2 = _interopRequireDefault(_cursor);

          var _block = __webpack_require__(4);

          var _block2 = _interopRequireDefault(_block);

          var _break = __webpack_require__(16);

          var _break2 = _interopRequireDefault(_break);

          var _clone = __webpack_require__(21);

          var _clone2 = _interopRequireDefault(_clone);

          var _deepEqual = __webpack_require__(11);

          var _deepEqual2 = _interopRequireDefault(_deepEqual);

          var _extend = __webpack_require__(3);

          var _extend2 = _interopRequireDefault(_extend);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
              });
            } else {
              obj[key] = value;
            }

            return obj;
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var ASCII = /^[ -~]*$/;

          var Editor = function () {
            function Editor(scroll) {
              _classCallCheck(this, Editor);

              this.scroll = scroll;
              this.delta = this.getDelta();
            }

            _createClass(Editor, [{
              key: 'applyDelta',
              value: function applyDelta(delta) {
                var _this = this;

                var consumeNextNewline = false;
                this.scroll.update();
                var scrollLength = this.scroll.length();
                this.scroll.batchStart();
                delta = normalizeDelta(delta);
                delta.reduce(function (index, op) {
                  var length = op.retain || op.delete || op.insert.length || 1;
                  var attributes = op.attributes || {};

                  if (op.insert != null) {
                    if (typeof op.insert === 'string') {
                      var text = op.insert;

                      if (text.endsWith('\n') && consumeNextNewline) {
                        consumeNextNewline = false;
                        text = text.slice(0, -1);
                      }

                      if (index >= scrollLength && !text.endsWith('\n')) {
                        consumeNextNewline = true;
                      }

                      _this.scroll.insertAt(index, text);

                      var _scroll$line = _this.scroll.line(index),
                          _scroll$line2 = _slicedToArray(_scroll$line, 2),
                          line = _scroll$line2[0],
                          offset = _scroll$line2[1];

                      var formats = (0, _extend2.default)({}, (0, _block.bubbleFormats)(line));

                      if (line instanceof _block2.default) {
                        var _line$descendant = line.descendant(_parchment2.default.Leaf, offset),
                            _line$descendant2 = _slicedToArray(_line$descendant, 1),
                            leaf = _line$descendant2[0];

                        formats = (0, _extend2.default)(formats, (0, _block.bubbleFormats)(leaf));
                      }

                      attributes = _op2.default.attributes.diff(formats, attributes) || {};
                    } else if (_typeof(op.insert) === 'object') {
                      var key = Object.keys(op.insert)[0];
                      if (key == null) return index;

                      _this.scroll.insertAt(index, key, op.insert[key]);
                    }

                    scrollLength += length;
                  }

                  Object.keys(attributes).forEach(function (name) {
                    _this.scroll.formatAt(index, length, name, attributes[name]);
                  });
                  return index + length;
                }, 0);
                delta.reduce(function (index, op) {
                  if (typeof op.delete === 'number') {
                    _this.scroll.deleteAt(index, op.delete);

                    return index;
                  }

                  return index + (op.retain || op.insert.length || 1);
                }, 0);
                this.scroll.batchEnd();
                return this.update(delta);
              }
            }, {
              key: 'deleteText',
              value: function deleteText(index, length) {
                this.scroll.deleteAt(index, length);
                return this.update(new _quillDelta2.default().retain(index).delete(length));
              }
            }, {
              key: 'formatLine',
              value: function formatLine(index, length) {
                var _this2 = this;

                var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                this.scroll.update();
                Object.keys(formats).forEach(function (format) {
                  if (_this2.scroll.whitelist != null && !_this2.scroll.whitelist[format]) return;

                  var lines = _this2.scroll.lines(index, Math.max(length, 1));

                  var lengthRemaining = length;
                  lines.forEach(function (line) {
                    var lineLength = line.length();

                    if (!(line instanceof _code2.default)) {
                      line.format(format, formats[format]);
                    } else {
                      var codeIndex = index - line.offset(_this2.scroll);
                      var codeLength = line.newlineIndex(codeIndex + lengthRemaining) - codeIndex + 1;
                      line.formatAt(codeIndex, codeLength, format, formats[format]);
                    }

                    lengthRemaining -= lineLength;
                  });
                });
                this.scroll.optimize();
                return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
              }
            }, {
              key: 'formatText',
              value: function formatText(index, length) {
                var _this3 = this;

                var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                Object.keys(formats).forEach(function (format) {
                  _this3.scroll.formatAt(index, length, format, formats[format]);
                });
                return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
              }
            }, {
              key: 'getContents',
              value: function getContents(index, length) {
                return this.delta.slice(index, index + length);
              }
            }, {
              key: 'getDelta',
              value: function getDelta() {
                return this.scroll.lines().reduce(function (delta, line) {
                  return delta.concat(line.delta());
                }, new _quillDelta2.default());
              }
            }, {
              key: 'getFormat',
              value: function getFormat(index) {
                var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var lines = [],
                    leaves = [];

                if (length === 0) {
                  this.scroll.path(index).forEach(function (path) {
                    var _path = _slicedToArray(path, 1),
                        blot = _path[0];

                    if (blot instanceof _block2.default) {
                      lines.push(blot);
                    } else if (blot instanceof _parchment2.default.Leaf) {
                      leaves.push(blot);
                    }
                  });
                } else {
                  lines = this.scroll.lines(index, length);
                  leaves = this.scroll.descendants(_parchment2.default.Leaf, index, length);
                }

                var formatsArr = [lines, leaves].map(function (blots) {
                  if (blots.length === 0) return {};
                  var formats = (0, _block.bubbleFormats)(blots.shift());

                  while (Object.keys(formats).length > 0) {
                    var blot = blots.shift();
                    if (blot == null) return formats;
                    formats = combineFormats((0, _block.bubbleFormats)(blot), formats);
                  }

                  return formats;
                });
                return _extend2.default.apply(_extend2.default, formatsArr);
              }
            }, {
              key: 'getText',
              value: function getText(index, length) {
                return this.getContents(index, length).filter(function (op) {
                  return typeof op.insert === 'string';
                }).map(function (op) {
                  return op.insert;
                }).join('');
              }
            }, {
              key: 'insertEmbed',
              value: function insertEmbed(index, embed, value) {
                this.scroll.insertAt(index, embed, value);
                return this.update(new _quillDelta2.default().retain(index).insert(_defineProperty({}, embed, value)));
              }
            }, {
              key: 'insertText',
              value: function insertText(index, text) {
                var _this4 = this;

                var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                text = text.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
                this.scroll.insertAt(index, text);
                Object.keys(formats).forEach(function (format) {
                  _this4.scroll.formatAt(index, text.length, format, formats[format]);
                });
                return this.update(new _quillDelta2.default().retain(index).insert(text, (0, _clone2.default)(formats)));
              }
            }, {
              key: 'isBlank',
              value: function isBlank() {
                if (this.scroll.children.length == 0) return true;
                if (this.scroll.children.length > 1) return false;
                var block = this.scroll.children.head;
                if (block.statics.blotName !== _block2.default.blotName) return false;
                if (block.children.length > 1) return false;
                return block.children.head instanceof _break2.default;
              }
            }, {
              key: 'removeFormat',
              value: function removeFormat(index, length) {
                var text = this.getText(index, length);

                var _scroll$line3 = this.scroll.line(index + length),
                    _scroll$line4 = _slicedToArray(_scroll$line3, 2),
                    line = _scroll$line4[0],
                    offset = _scroll$line4[1];

                var suffixLength = 0,
                    suffix = new _quillDelta2.default();

                if (line != null) {
                  if (!(line instanceof _code2.default)) {
                    suffixLength = line.length() - offset;
                  } else {
                    suffixLength = line.newlineIndex(offset) - offset + 1;
                  }

                  suffix = line.delta().slice(offset, offset + suffixLength - 1).insert('\n');
                }

                var contents = this.getContents(index, length + suffixLength);
                var diff = contents.diff(new _quillDelta2.default().insert(text).concat(suffix));
                var delta = new _quillDelta2.default().retain(index).concat(diff);
                return this.applyDelta(delta);
              }
            }, {
              key: 'update',
              value: function update(change) {
                var mutations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
                var cursorIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
                var oldDelta = this.delta;

                if (mutations.length === 1 && mutations[0].type === 'characterData' && mutations[0].target.data.match(ASCII) && _parchment2.default.find(mutations[0].target)) {
                  var textBlot = _parchment2.default.find(mutations[0].target);

                  var formats = (0, _block.bubbleFormats)(textBlot);
                  var index = textBlot.offset(this.scroll);
                  var oldValue = mutations[0].oldValue.replace(_cursor2.default.CONTENTS, '');
                  var oldText = new _quillDelta2.default().insert(oldValue);
                  var newText = new _quillDelta2.default().insert(textBlot.value());
                  var diffDelta = new _quillDelta2.default().retain(index).concat(oldText.diff(newText, cursorIndex));
                  change = diffDelta.reduce(function (delta, op) {
                    if (op.insert) {
                      return delta.insert(op.insert, formats);
                    } else {
                      return delta.push(op);
                    }
                  }, new _quillDelta2.default());
                  this.delta = oldDelta.compose(change);
                } else {
                  this.delta = this.getDelta();

                  if (!change || !(0, _deepEqual2.default)(oldDelta.compose(change), this.delta)) {
                    change = oldDelta.diff(this.delta, cursorIndex);
                  }
                }

                return change;
              }
            }]);

            return Editor;
          }();

          function combineFormats(formats, combined) {
            return Object.keys(combined).reduce(function (merged, name) {
              if (formats[name] == null) return merged;

              if (combined[name] === formats[name]) {
                merged[name] = combined[name];
              } else if (Array.isArray(combined[name])) {
                if (combined[name].indexOf(formats[name]) < 0) {
                  merged[name] = combined[name].concat([formats[name]]);
                }
              } else {
                merged[name] = [combined[name], formats[name]];
              }

              return merged;
            }, {});
          }

          function normalizeDelta(delta) {
            return delta.reduce(function (delta, op) {
              if (op.insert === 1) {
                var attributes = (0, _clone2.default)(op.attributes);
                delete attributes['image'];
                return delta.insert({
                  image: op.attributes.image
                }, attributes);
              }

              if (op.attributes != null && (op.attributes.list === true || op.attributes.bullet === true)) {
                op = (0, _clone2.default)(op);

                if (op.attributes.list) {
                  op.attributes.list = 'ordered';
                } else {
                  op.attributes.list = 'bullet';
                  delete op.attributes.bullet;
                }
              }

              if (typeof op.insert === 'string') {
                var text = op.insert.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
                return delta.insert(text, op.attributes);
              }

              return delta.push(op);
            }, new _quillDelta2.default());
          }

          exports.default = Editor;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = exports.Range = undefined;

          var _slicedToArray = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;

              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _clone = __webpack_require__(21);

          var _clone2 = _interopRequireDefault(_clone);

          var _deepEqual = __webpack_require__(11);

          var _deepEqual2 = _interopRequireDefault(_deepEqual);

          var _emitter3 = __webpack_require__(8);

          var _emitter4 = _interopRequireDefault(_emitter3);

          var _logger = __webpack_require__(10);

          var _logger2 = _interopRequireDefault(_logger);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
              for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                arr2[i] = arr[i];
              }

              return arr2;
            } else {
              return Array.from(arr);
            }
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var debug = (0, _logger2.default)('quill:selection');

          var Range = function Range(index) {
            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            _classCallCheck(this, Range);

            this.index = index;
            this.length = length;
          };

          var Selection = function () {
            function Selection(scroll, emitter) {
              var _this = this;

              _classCallCheck(this, Selection);

              this.emitter = emitter;
              this.scroll = scroll;
              this.composing = false;
              this.mouseDown = false;
              this.root = this.scroll.domNode;
              this.cursor = _parchment2.default.create('cursor', this);
              this.lastRange = this.savedRange = new Range(0, 0);
              this.handleComposition();
              this.handleDragging();
              this.emitter.listenDOM('selectionchange', document, function () {
                if (!_this.mouseDown) {
                  setTimeout(_this.update.bind(_this, _emitter4.default.sources.USER), 1);
                }
              });
              this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type, delta) {
                if (type === _emitter4.default.events.TEXT_CHANGE && delta.length() > 0) {
                  _this.update(_emitter4.default.sources.SILENT);
                }
              });
              this.emitter.on(_emitter4.default.events.SCROLL_BEFORE_UPDATE, function () {
                if (!_this.hasFocus()) return;

                var native = _this.getNativeRange();

                if (native == null) return;
                if (native.start.node === _this.cursor.textNode) return;

                _this.emitter.once(_emitter4.default.events.SCROLL_UPDATE, function () {
                  try {
                    _this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);
                  } catch (ignored) {}
                });
              });
              this.emitter.on(_emitter4.default.events.SCROLL_OPTIMIZE, function (mutations, context) {
                if (context.range) {
                  var _context$range = context.range,
                      startNode = _context$range.startNode,
                      startOffset = _context$range.startOffset,
                      endNode = _context$range.endNode,
                      endOffset = _context$range.endOffset;

                  _this.setNativeRange(startNode, startOffset, endNode, endOffset);
                }
              });
              this.update(_emitter4.default.sources.SILENT);
            }

            _createClass(Selection, [{
              key: 'handleComposition',
              value: function handleComposition() {
                var _this2 = this;

                this.root.addEventListener('compositionstart', function () {
                  _this2.composing = true;
                });
                this.root.addEventListener('compositionend', function () {
                  _this2.composing = false;

                  if (_this2.cursor.parent) {
                    var range = _this2.cursor.restore();

                    if (!range) return;
                    setTimeout(function () {
                      _this2.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);
                    }, 1);
                  }
                });
              }
            }, {
              key: 'handleDragging',
              value: function handleDragging() {
                var _this3 = this;

                this.emitter.listenDOM('mousedown', document.body, function () {
                  _this3.mouseDown = true;
                });
                this.emitter.listenDOM('mouseup', document.body, function () {
                  _this3.mouseDown = false;

                  _this3.update(_emitter4.default.sources.USER);
                });
              }
            }, {
              key: 'focus',
              value: function focus() {
                if (this.hasFocus()) return;
                this.root.focus();
                this.setRange(this.savedRange);
              }
            }, {
              key: 'format',
              value: function format(_format, value) {
                if (this.scroll.whitelist != null && !this.scroll.whitelist[_format]) return;
                this.scroll.update();
                var nativeRange = this.getNativeRange();
                if (nativeRange == null || !nativeRange.native.collapsed || _parchment2.default.query(_format, _parchment2.default.Scope.BLOCK)) return;

                if (nativeRange.start.node !== this.cursor.textNode) {
                  var blot = _parchment2.default.find(nativeRange.start.node, false);

                  if (blot == null) return;

                  if (blot instanceof _parchment2.default.Leaf) {
                    var after = blot.split(nativeRange.start.offset);
                    blot.parent.insertBefore(this.cursor, after);
                  } else {
                    blot.insertBefore(this.cursor, nativeRange.start.node);
                  }

                  this.cursor.attach();
                }

                this.cursor.format(_format, value);
                this.scroll.optimize();
                this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);
                this.update();
              }
            }, {
              key: 'getBounds',
              value: function getBounds(index) {
                var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var scrollLength = this.scroll.length();
                index = Math.min(index, scrollLength - 1);
                length = Math.min(index + length, scrollLength - 1) - index;

                var node = void 0,
                    _scroll$leaf = this.scroll.leaf(index),
                    _scroll$leaf2 = _slicedToArray(_scroll$leaf, 2),
                    leaf = _scroll$leaf2[0],
                    offset = _scroll$leaf2[1];

                if (leaf == null) return null;

                var _leaf$position = leaf.position(offset, true);

                var _leaf$position2 = _slicedToArray(_leaf$position, 2);

                node = _leaf$position2[0];
                offset = _leaf$position2[1];
                var range = document.createRange();

                if (length > 0) {
                  range.setStart(node, offset);

                  var _scroll$leaf3 = this.scroll.leaf(index + length);

                  var _scroll$leaf4 = _slicedToArray(_scroll$leaf3, 2);

                  leaf = _scroll$leaf4[0];
                  offset = _scroll$leaf4[1];
                  if (leaf == null) return null;

                  var _leaf$position3 = leaf.position(offset, true);

                  var _leaf$position4 = _slicedToArray(_leaf$position3, 2);

                  node = _leaf$position4[0];
                  offset = _leaf$position4[1];
                  range.setEnd(node, offset);
                  return range.getBoundingClientRect();
                } else {
                  var side = 'left';
                  var rect = void 0;

                  if (node instanceof Text) {
                    if (offset < node.data.length) {
                      range.setStart(node, offset);
                      range.setEnd(node, offset + 1);
                    } else {
                      range.setStart(node, offset - 1);
                      range.setEnd(node, offset);
                      side = 'right';
                    }

                    rect = range.getBoundingClientRect();
                  } else {
                    rect = leaf.domNode.getBoundingClientRect();
                    if (offset > 0) side = 'right';
                  }

                  return {
                    bottom: rect.top + rect.height,
                    height: rect.height,
                    left: rect[side],
                    right: rect[side],
                    top: rect.top,
                    width: 0
                  };
                }
              }
            }, {
              key: 'getNativeRange',
              value: function getNativeRange() {
                var selection = document.getSelection();
                if (selection == null || selection.rangeCount <= 0) return null;
                var nativeRange = selection.getRangeAt(0);
                if (nativeRange == null) return null;
                var range = this.normalizeNative(nativeRange);
                debug.info('getNativeRange', range);
                return range;
              }
            }, {
              key: 'getRange',
              value: function getRange() {
                var normalized = this.getNativeRange();
                if (normalized == null) return [null, null];
                var range = this.normalizedToRange(normalized);
                return [range, normalized];
              }
            }, {
              key: 'hasFocus',
              value: function hasFocus() {
                return document.activeElement === this.root;
              }
            }, {
              key: 'normalizedToRange',
              value: function normalizedToRange(range) {
                var _this4 = this;

                var positions = [[range.start.node, range.start.offset]];

                if (!range.native.collapsed) {
                  positions.push([range.end.node, range.end.offset]);
                }

                var indexes = positions.map(function (position) {
                  var _position = _slicedToArray(position, 2),
                      node = _position[0],
                      offset = _position[1];

                  var blot = _parchment2.default.find(node, true);

                  var index = blot.offset(_this4.scroll);

                  if (offset === 0) {
                    return index;
                  } else if (blot instanceof _parchment2.default.Container) {
                    return index + blot.length();
                  } else {
                    return index + blot.index(node, offset);
                  }
                });
                var end = Math.min(Math.max.apply(Math, _toConsumableArray(indexes)), this.scroll.length() - 1);
                var start = Math.min.apply(Math, [end].concat(_toConsumableArray(indexes)));
                return new Range(start, end - start);
              }
            }, {
              key: 'normalizeNative',
              value: function normalizeNative(nativeRange) {
                if (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {
                  return null;
                }

                var range = {
                  start: {
                    node: nativeRange.startContainer,
                    offset: nativeRange.startOffset
                  },
                  end: {
                    node: nativeRange.endContainer,
                    offset: nativeRange.endOffset
                  },
                  native: nativeRange
                };
                [range.start, range.end].forEach(function (position) {
                  var node = position.node,
                      offset = position.offset;

                  while (!(node instanceof Text) && node.childNodes.length > 0) {
                    if (node.childNodes.length > offset) {
                      node = node.childNodes[offset];
                      offset = 0;
                    } else if (node.childNodes.length === offset) {
                      node = node.lastChild;
                      offset = node instanceof Text ? node.data.length : node.childNodes.length + 1;
                    } else {
                      break;
                    }
                  }

                  position.node = node, position.offset = offset;
                });
                return range;
              }
            }, {
              key: 'rangeToNative',
              value: function rangeToNative(range) {
                var _this5 = this;

                var indexes = range.collapsed ? [range.index] : [range.index, range.index + range.length];
                var args = [];
                var scrollLength = this.scroll.length();
                indexes.forEach(function (index, i) {
                  index = Math.min(scrollLength - 1, index);

                  var node = void 0,
                      _scroll$leaf5 = _this5.scroll.leaf(index),
                      _scroll$leaf6 = _slicedToArray(_scroll$leaf5, 2),
                      leaf = _scroll$leaf6[0],
                      offset = _scroll$leaf6[1];

                  var _leaf$position5 = leaf.position(offset, i !== 0);

                  var _leaf$position6 = _slicedToArray(_leaf$position5, 2);

                  node = _leaf$position6[0];
                  offset = _leaf$position6[1];
                  args.push(node, offset);
                });

                if (args.length < 2) {
                  args = args.concat(args);
                }

                return args;
              }
            }, {
              key: 'scrollIntoView',
              value: function scrollIntoView(scrollingContainer) {
                var range = this.lastRange;
                if (range == null) return;
                var bounds = this.getBounds(range.index, range.length);
                if (bounds == null) return;
                var limit = this.scroll.length() - 1;

                var _scroll$line = this.scroll.line(Math.min(range.index, limit)),
                    _scroll$line2 = _slicedToArray(_scroll$line, 1),
                    first = _scroll$line2[0];

                var last = first;

                if (range.length > 0) {
                  var _scroll$line3 = this.scroll.line(Math.min(range.index + range.length, limit));

                  var _scroll$line4 = _slicedToArray(_scroll$line3, 1);

                  last = _scroll$line4[0];
                }

                if (first == null || last == null) return;
                var scrollBounds = scrollingContainer.getBoundingClientRect();

                if (bounds.top < scrollBounds.top) {
                  scrollingContainer.scrollTop -= scrollBounds.top - bounds.top;
                } else if (bounds.bottom > scrollBounds.bottom) {
                  scrollingContainer.scrollTop += bounds.bottom - scrollBounds.bottom;
                }
              }
            }, {
              key: 'setNativeRange',
              value: function setNativeRange(startNode, startOffset) {
                var endNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startNode;
                var endOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : startOffset;
                var force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
                debug.info('setNativeRange', startNode, startOffset, endNode, endOffset);

                if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {
                  return;
                }

                var selection = document.getSelection();
                if (selection == null) return;

                if (startNode != null) {
                  if (!this.hasFocus()) this.root.focus();
                  var native = (this.getNativeRange() || {}).native;

                  if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {
                    if (startNode.tagName == "BR") {
                      startOffset = [].indexOf.call(startNode.parentNode.childNodes, startNode);
                      startNode = startNode.parentNode;
                    }

                    if (endNode.tagName == "BR") {
                      endOffset = [].indexOf.call(endNode.parentNode.childNodes, endNode);
                      endNode = endNode.parentNode;
                    }

                    var range = document.createRange();
                    range.setStart(startNode, startOffset);
                    range.setEnd(endNode, endOffset);
                    selection.removeAllRanges();
                    selection.addRange(range);
                  }
                } else {
                  selection.removeAllRanges();
                  this.root.blur();
                  document.body.focus();
                }
              }
            }, {
              key: 'setRange',
              value: function setRange(range) {
                var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;

                if (typeof force === 'string') {
                  source = force;
                  force = false;
                }

                debug.info('setRange', range);

                if (range != null) {
                  var args = this.rangeToNative(range);
                  this.setNativeRange.apply(this, _toConsumableArray(args).concat([force]));
                } else {
                  this.setNativeRange(null);
                }

                this.update(source);
              }
            }, {
              key: 'update',
              value: function update() {
                var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;
                var oldRange = this.lastRange;

                var _getRange = this.getRange(),
                    _getRange2 = _slicedToArray(_getRange, 2),
                    lastRange = _getRange2[0],
                    nativeRange = _getRange2[1];

                this.lastRange = lastRange;

                if (this.lastRange != null) {
                  this.savedRange = this.lastRange;
                }

                if (!(0, _deepEqual2.default)(oldRange, this.lastRange)) {
                  var _emitter;

                  if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {
                    this.cursor.restore();
                  }

                  var args = [_emitter4.default.events.SELECTION_CHANGE, (0, _clone2.default)(this.lastRange), (0, _clone2.default)(oldRange), source];

                  (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));

                  if (source !== _emitter4.default.sources.SILENT) {
                    var _emitter2;

                    (_emitter2 = this.emitter).emit.apply(_emitter2, args);
                  }
                }
              }
            }]);

            return Selection;
          }();

          function contains(parent, descendant) {
            try {
              descendant.parentNode;
            } catch (e) {
              return false;
            }

            if (descendant instanceof Text) {
              descendant = descendant.parentNode;
            }

            return parent.contains(descendant);
          }

          exports.Range = Range;
          exports.default = Selection;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Break = function (_Parchment$Embed) {
            _inherits(Break, _Parchment$Embed);

            function Break() {
              _classCallCheck(this, Break);

              return _possibleConstructorReturn(this, (Break.__proto__ || Object.getPrototypeOf(Break)).apply(this, arguments));
            }

            _createClass(Break, [{
              key: 'insertInto',
              value: function insertInto(parent, ref) {
                if (parent.children.length === 0) {
                  _get(Break.prototype.__proto__ || Object.getPrototypeOf(Break.prototype), 'insertInto', this).call(this, parent, ref);
                } else {
                  this.remove();
                }
              }
            }, {
              key: 'length',
              value: function length() {
                return 0;
              }
            }, {
              key: 'value',
              value: function value() {
                return '';
              }
            }], [{
              key: 'value',
              value: function value() {
                return undefined;
              }
            }]);

            return Break;
          }(_parchment2.default.Embed);

          Break.blotName = 'break';
          Break.tagName = 'BR';
          exports.default = Break;
        }, function (module, exports, __webpack_require__) {
          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var linked_list_1 = __webpack_require__(44);

          var shadow_1 = __webpack_require__(30);

          var Registry = __webpack_require__(1);

          var ContainerBlot = function (_super) {
            __extends(ContainerBlot, _super);

            function ContainerBlot(domNode) {
              var _this = _super.call(this, domNode) || this;

              _this.build();

              return _this;
            }

            ContainerBlot.prototype.appendChild = function (other) {
              this.insertBefore(other);
            };

            ContainerBlot.prototype.attach = function () {
              _super.prototype.attach.call(this);

              this.children.forEach(function (child) {
                child.attach();
              });
            };

            ContainerBlot.prototype.build = function () {
              var _this = this;

              this.children = new linked_list_1.default();
              [].slice.call(this.domNode.childNodes).reverse().forEach(function (node) {
                try {
                  var child = makeBlot(node);

                  _this.insertBefore(child, _this.children.head || undefined);
                } catch (err) {
                  if (err instanceof Registry.ParchmentError) return;else throw err;
                }
              });
            };

            ContainerBlot.prototype.deleteAt = function (index, length) {
              if (index === 0 && length === this.length()) {
                return this.remove();
              }

              this.children.forEachAt(index, length, function (child, offset, length) {
                child.deleteAt(offset, length);
              });
            };

            ContainerBlot.prototype.descendant = function (criteria, index) {
              var _a = this.children.find(index),
                  child = _a[0],
                  offset = _a[1];

              if (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) {
                return [child, offset];
              } else if (child instanceof ContainerBlot) {
                return child.descendant(criteria, offset);
              } else {
                return [null, -1];
              }
            };

            ContainerBlot.prototype.descendants = function (criteria, index, length) {
              if (index === void 0) {
                index = 0;
              }

              if (length === void 0) {
                length = Number.MAX_VALUE;
              }

              var descendants = [];
              var lengthLeft = length;
              this.children.forEachAt(index, length, function (child, index, length) {
                if (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) {
                  descendants.push(child);
                }

                if (child instanceof ContainerBlot) {
                  descendants = descendants.concat(child.descendants(criteria, index, lengthLeft));
                }

                lengthLeft -= length;
              });
              return descendants;
            };

            ContainerBlot.prototype.detach = function () {
              this.children.forEach(function (child) {
                child.detach();
              });

              _super.prototype.detach.call(this);
            };

            ContainerBlot.prototype.formatAt = function (index, length, name, value) {
              this.children.forEachAt(index, length, function (child, offset, length) {
                child.formatAt(offset, length, name, value);
              });
            };

            ContainerBlot.prototype.insertAt = function (index, value, def) {
              var _a = this.children.find(index),
                  child = _a[0],
                  offset = _a[1];

              if (child) {
                child.insertAt(offset, value, def);
              } else {
                var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
                this.appendChild(blot);
              }
            };

            ContainerBlot.prototype.insertBefore = function (childBlot, refBlot) {
              if (this.statics.allowedChildren != null && !this.statics.allowedChildren.some(function (child) {
                return childBlot instanceof child;
              })) {
                throw new Registry.ParchmentError("Cannot insert " + childBlot.statics.blotName + " into " + this.statics.blotName);
              }

              childBlot.insertInto(this, refBlot);
            };

            ContainerBlot.prototype.length = function () {
              return this.children.reduce(function (memo, child) {
                return memo + child.length();
              }, 0);
            };

            ContainerBlot.prototype.moveChildren = function (targetParent, refNode) {
              this.children.forEach(function (child) {
                targetParent.insertBefore(child, refNode);
              });
            };

            ContainerBlot.prototype.optimize = function (context) {
              _super.prototype.optimize.call(this, context);

              if (this.children.length === 0) {
                if (this.statics.defaultChild != null) {
                  var child = Registry.create(this.statics.defaultChild);
                  this.appendChild(child);
                  child.optimize(context);
                } else {
                  this.remove();
                }
              }
            };

            ContainerBlot.prototype.path = function (index, inclusive) {
              if (inclusive === void 0) {
                inclusive = false;
              }

              var _a = this.children.find(index, inclusive),
                  child = _a[0],
                  offset = _a[1];

              var position = [[this, index]];

              if (child instanceof ContainerBlot) {
                return position.concat(child.path(offset, inclusive));
              } else if (child != null) {
                position.push([child, offset]);
              }

              return position;
            };

            ContainerBlot.prototype.removeChild = function (child) {
              this.children.remove(child);
            };

            ContainerBlot.prototype.replace = function (target) {
              if (target instanceof ContainerBlot) {
                target.moveChildren(this);
              }

              _super.prototype.replace.call(this, target);
            };

            ContainerBlot.prototype.split = function (index, force) {
              if (force === void 0) {
                force = false;
              }

              if (!force) {
                if (index === 0) return this;
                if (index === this.length()) return this.next;
              }

              var after = this.clone();
              this.parent.insertBefore(after, this.next);
              this.children.forEachAt(index, this.length(), function (child, offset, length) {
                child = child.split(offset, force);
                after.appendChild(child);
              });
              return after;
            };

            ContainerBlot.prototype.unwrap = function () {
              this.moveChildren(this.parent, this.next);
              this.remove();
            };

            ContainerBlot.prototype.update = function (mutations, context) {
              var _this = this;

              var addedNodes = [];
              var removedNodes = [];
              mutations.forEach(function (mutation) {
                if (mutation.target === _this.domNode && mutation.type === 'childList') {
                  addedNodes.push.apply(addedNodes, mutation.addedNodes);
                  removedNodes.push.apply(removedNodes, mutation.removedNodes);
                }
              });
              removedNodes.forEach(function (node) {
                if (node.parentNode != null && node.tagName !== 'IFRAME' && document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
                  return;
                }

                var blot = Registry.find(node);
                if (blot == null) return;

                if (blot.domNode.parentNode == null || blot.domNode.parentNode === _this.domNode) {
                  blot.detach();
                }
              });
              addedNodes.filter(function (node) {
                return node.parentNode == _this.domNode;
              }).sort(function (a, b) {
                if (a === b) return 0;

                if (a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING) {
                  return 1;
                }

                return -1;
              }).forEach(function (node) {
                var refBlot = null;

                if (node.nextSibling != null) {
                  refBlot = Registry.find(node.nextSibling);
                }

                var blot = makeBlot(node);

                if (blot.next != refBlot || blot.next == null) {
                  if (blot.parent != null) {
                    blot.parent.removeChild(_this);
                  }

                  _this.insertBefore(blot, refBlot || undefined);
                }
              });
            };

            return ContainerBlot;
          }(shadow_1.default);

          function makeBlot(node) {
            var blot = Registry.find(node);

            if (blot == null) {
              try {
                blot = Registry.create(node);
              } catch (e) {
                blot = Registry.create(Registry.Scope.INLINE);
                [].slice.call(node.childNodes).forEach(function (child) {
                  blot.domNode.appendChild(child);
                });

                if (node.parentNode) {
                  node.parentNode.replaceChild(blot.domNode, node);
                }

                blot.attach();
              }
            }

            return blot;
          }

          exports.default = ContainerBlot;
        }, function (module, exports, __webpack_require__) {
          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var attributor_1 = __webpack_require__(12);

          var store_1 = __webpack_require__(31);

          var container_1 = __webpack_require__(17);

          var Registry = __webpack_require__(1);

          var FormatBlot = function (_super) {
            __extends(FormatBlot, _super);

            function FormatBlot(domNode) {
              var _this = _super.call(this, domNode) || this;

              _this.attributes = new store_1.default(_this.domNode);
              return _this;
            }

            FormatBlot.formats = function (domNode) {
              if (typeof this.tagName === 'string') {
                return true;
              } else if (Array.isArray(this.tagName)) {
                return domNode.tagName.toLowerCase();
              }

              return undefined;
            };

            FormatBlot.prototype.format = function (name, value) {
              var format = Registry.query(name);

              if (format instanceof attributor_1.default) {
                this.attributes.attribute(format, value);
              } else if (value) {
                if (format != null && (name !== this.statics.blotName || this.formats()[name] !== value)) {
                  this.replaceWith(name, value);
                }
              }
            };

            FormatBlot.prototype.formats = function () {
              var formats = this.attributes.values();
              var format = this.statics.formats(this.domNode);

              if (format != null) {
                formats[this.statics.blotName] = format;
              }

              return formats;
            };

            FormatBlot.prototype.replaceWith = function (name, value) {
              var replacement = _super.prototype.replaceWith.call(this, name, value);

              this.attributes.copy(replacement);
              return replacement;
            };

            FormatBlot.prototype.update = function (mutations, context) {
              var _this = this;

              _super.prototype.update.call(this, mutations, context);

              if (mutations.some(function (mutation) {
                return mutation.target === _this.domNode && mutation.type === 'attributes';
              })) {
                this.attributes.build();
              }
            };

            FormatBlot.prototype.wrap = function (name, value) {
              var wrapper = _super.prototype.wrap.call(this, name, value);

              if (wrapper instanceof FormatBlot && wrapper.statics.scope === this.statics.scope) {
                this.attributes.move(wrapper);
              }

              return wrapper;
            };

            return FormatBlot;
          }(container_1.default);

          exports.default = FormatBlot;
        }, function (module, exports, __webpack_require__) {
          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var shadow_1 = __webpack_require__(30);

          var Registry = __webpack_require__(1);

          var LeafBlot = function (_super) {
            __extends(LeafBlot, _super);

            function LeafBlot() {
              return _super !== null && _super.apply(this, arguments) || this;
            }

            LeafBlot.value = function (domNode) {
              return true;
            };

            LeafBlot.prototype.index = function (node, offset) {
              if (this.domNode === node || this.domNode.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
                return Math.min(offset, 1);
              }

              return -1;
            };

            LeafBlot.prototype.position = function (index, inclusive) {
              var offset = [].indexOf.call(this.parent.domNode.childNodes, this.domNode);
              if (index > 0) offset += 1;
              return [this.parent.domNode, offset];
            };

            LeafBlot.prototype.value = function () {
              var _a;

              return _a = {}, _a[this.statics.blotName] = this.statics.value(this.domNode) || true, _a;
            };

            LeafBlot.scope = Registry.Scope.INLINE_BLOT;
            return LeafBlot;
          }(shadow_1.default);

          exports.default = LeafBlot;
        }, function (module, exports, __webpack_require__) {
          var equal = __webpack_require__(11);

          var extend = __webpack_require__(3);

          var lib = {
            attributes: {
              compose: function (a, b, keepNull) {
                if (typeof a !== 'object') a = {};
                if (typeof b !== 'object') b = {};
                var attributes = extend(true, {}, b);

                if (!keepNull) {
                  attributes = Object.keys(attributes).reduce(function (copy, key) {
                    if (attributes[key] != null) {
                      copy[key] = attributes[key];
                    }

                    return copy;
                  }, {});
                }

                for (var key in a) {
                  if (a[key] !== undefined && b[key] === undefined) {
                    attributes[key] = a[key];
                  }
                }

                return Object.keys(attributes).length > 0 ? attributes : undefined;
              },
              diff: function (a, b) {
                if (typeof a !== 'object') a = {};
                if (typeof b !== 'object') b = {};
                var attributes = Object.keys(a).concat(Object.keys(b)).reduce(function (attributes, key) {
                  if (!equal(a[key], b[key])) {
                    attributes[key] = b[key] === undefined ? null : b[key];
                  }

                  return attributes;
                }, {});
                return Object.keys(attributes).length > 0 ? attributes : undefined;
              },
              transform: function (a, b, priority) {
                if (typeof a !== 'object') return b;
                if (typeof b !== 'object') return undefined;
                if (!priority) return b;
                var attributes = Object.keys(b).reduce(function (attributes, key) {
                  if (a[key] === undefined) attributes[key] = b[key];
                  return attributes;
                }, {});
                return Object.keys(attributes).length > 0 ? attributes : undefined;
              }
            },
            iterator: function (ops) {
              return new Iterator(ops);
            },
            length: function (op) {
              if (typeof op['delete'] === 'number') {
                return op['delete'];
              } else if (typeof op.retain === 'number') {
                return op.retain;
              } else {
                return typeof op.insert === 'string' ? op.insert.length : 1;
              }
            }
          };

          function Iterator(ops) {
            this.ops = ops;
            this.index = 0;
            this.offset = 0;
          }

          Iterator.prototype.hasNext = function () {
            return this.peekLength() < Infinity;
          };

          Iterator.prototype.next = function (length) {
            if (!length) length = Infinity;
            var nextOp = this.ops[this.index];

            if (nextOp) {
              var offset = this.offset;
              var opLength = lib.length(nextOp);

              if (length >= opLength - offset) {
                length = opLength - offset;
                this.index += 1;
                this.offset = 0;
              } else {
                this.offset += length;
              }

              if (typeof nextOp['delete'] === 'number') {
                return {
                  'delete': length
                };
              } else {
                var retOp = {};

                if (nextOp.attributes) {
                  retOp.attributes = nextOp.attributes;
                }

                if (typeof nextOp.retain === 'number') {
                  retOp.retain = length;
                } else if (typeof nextOp.insert === 'string') {
                  retOp.insert = nextOp.insert.substr(offset, length);
                } else {
                  retOp.insert = nextOp.insert;
                }

                return retOp;
              }
            } else {
              return {
                retain: Infinity
              };
            }
          };

          Iterator.prototype.peek = function () {
            return this.ops[this.index];
          };

          Iterator.prototype.peekLength = function () {
            if (this.ops[this.index]) {
              return lib.length(this.ops[this.index]) - this.offset;
            } else {
              return Infinity;
            }
          };

          Iterator.prototype.peekType = function () {
            if (this.ops[this.index]) {
              if (typeof this.ops[this.index]['delete'] === 'number') {
                return 'delete';
              } else if (typeof this.ops[this.index].retain === 'number') {
                return 'retain';
              } else {
                return 'insert';
              }
            }

            return 'retain';
          };

          Iterator.prototype.rest = function () {
            if (!this.hasNext()) {
              return [];
            } else if (this.offset === 0) {
              return this.ops.slice(this.index);
            } else {
              var offset = this.offset;
              var index = this.index;
              var next = this.next();
              var rest = this.ops.slice(this.index);
              this.offset = offset;
              this.index = index;
              return [next].concat(rest);
            }
          };

          module.exports = lib;
        }, function (module, exports) {
          var clone = function () {
            function _instanceof(obj, type) {
              return type != null && obj instanceof type;
            }

            var nativeMap;

            try {
              nativeMap = Map;
            } catch (_) {
              nativeMap = function () {};
            }

            var nativeSet;

            try {
              nativeSet = Set;
            } catch (_) {
              nativeSet = function () {};
            }

            var nativePromise;

            try {
              nativePromise = Promise;
            } catch (_) {
              nativePromise = function () {};
            }

            function clone(parent, circular, depth, prototype, includeNonEnumerable) {
              if (typeof circular === 'object') {
                depth = circular.depth;
                prototype = circular.prototype;
                includeNonEnumerable = circular.includeNonEnumerable;
                circular = circular.circular;
              }

              var allParents = [];
              var allChildren = [];
              var useBuffer = typeof Buffer != 'undefined';
              if (typeof circular == 'undefined') circular = true;
              if (typeof depth == 'undefined') depth = Infinity;

              function _clone(parent, depth) {
                if (parent === null) return null;
                if (depth === 0) return parent;
                var child;
                var proto;

                if (typeof parent != 'object') {
                  return parent;
                }

                if (_instanceof(parent, nativeMap)) {
                  child = new nativeMap();
                } else if (_instanceof(parent, nativeSet)) {
                  child = new nativeSet();
                } else if (_instanceof(parent, nativePromise)) {
                  child = new nativePromise(function (resolve, reject) {
                    parent.then(function (value) {
                      resolve(_clone(value, depth - 1));
                    }, function (err) {
                      reject(_clone(err, depth - 1));
                    });
                  });
                } else if (clone.__isArray(parent)) {
                  child = [];
                } else if (clone.__isRegExp(parent)) {
                  child = new RegExp(parent.source, __getRegExpFlags(parent));
                  if (parent.lastIndex) child.lastIndex = parent.lastIndex;
                } else if (clone.__isDate(parent)) {
                  child = new Date(parent.getTime());
                } else if (useBuffer && Buffer.isBuffer(parent)) {
                  if (Buffer.allocUnsafe) {
                    child = Buffer.allocUnsafe(parent.length);
                  } else {
                    child = new Buffer(parent.length);
                  }

                  parent.copy(child);
                  return child;
                } else if (_instanceof(parent, Error)) {
                  child = Object.create(parent);
                } else {
                  if (typeof prototype == 'undefined') {
                    proto = Object.getPrototypeOf(parent);
                    child = Object.create(proto);
                  } else {
                    child = Object.create(prototype);
                    proto = prototype;
                  }
                }

                if (circular) {
                  var index = allParents.indexOf(parent);

                  if (index != -1) {
                    return allChildren[index];
                  }

                  allParents.push(parent);
                  allChildren.push(child);
                }

                if (_instanceof(parent, nativeMap)) {
                  parent.forEach(function (value, key) {
                    var keyChild = _clone(key, depth - 1);

                    var valueChild = _clone(value, depth - 1);

                    child.set(keyChild, valueChild);
                  });
                }

                if (_instanceof(parent, nativeSet)) {
                  parent.forEach(function (value) {
                    var entryChild = _clone(value, depth - 1);

                    child.add(entryChild);
                  });
                }

                for (var i in parent) {
                  var attrs;

                  if (proto) {
                    attrs = Object.getOwnPropertyDescriptor(proto, i);
                  }

                  if (attrs && attrs.set == null) {
                    continue;
                  }

                  child[i] = _clone(parent[i], depth - 1);
                }

                if (Object.getOwnPropertySymbols) {
                  var symbols = Object.getOwnPropertySymbols(parent);

                  for (var i = 0; i < symbols.length; i++) {
                    var symbol = symbols[i];
                    var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);

                    if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
                      continue;
                    }

                    child[symbol] = _clone(parent[symbol], depth - 1);

                    if (!descriptor.enumerable) {
                      Object.defineProperty(child, symbol, {
                        enumerable: false
                      });
                    }
                  }
                }

                if (includeNonEnumerable) {
                  var allPropertyNames = Object.getOwnPropertyNames(parent);

                  for (var i = 0; i < allPropertyNames.length; i++) {
                    var propertyName = allPropertyNames[i];
                    var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);

                    if (descriptor && descriptor.enumerable) {
                      continue;
                    }

                    child[propertyName] = _clone(parent[propertyName], depth - 1);
                    Object.defineProperty(child, propertyName, {
                      enumerable: false
                    });
                  }
                }

                return child;
              }

              return _clone(parent, depth);
            }

            clone.clonePrototype = function clonePrototype(parent) {
              if (parent === null) return null;

              var c = function () {};

              c.prototype = parent;
              return new c();
            };

            function __objToStr(o) {
              return Object.prototype.toString.call(o);
            }

            clone.__objToStr = __objToStr;

            function __isDate(o) {
              return typeof o === 'object' && __objToStr(o) === '[object Date]';
            }

            clone.__isDate = __isDate;

            function __isArray(o) {
              return typeof o === 'object' && __objToStr(o) === '[object Array]';
            }

            clone.__isArray = __isArray;

            function __isRegExp(o) {
              return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
            }

            clone.__isRegExp = __isRegExp;

            function __getRegExpFlags(re) {
              var flags = '';
              if (re.global) flags += 'g';
              if (re.ignoreCase) flags += 'i';
              if (re.multiline) flags += 'm';
              return flags;
            }

            clone.__getRegExpFlags = __getRegExpFlags;
            return clone;
          }();

          if (typeof module === 'object' && module.exports) {
            module.exports = clone;
          }
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _slicedToArray = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;

              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _emitter = __webpack_require__(8);

          var _emitter2 = _interopRequireDefault(_emitter);

          var _block = __webpack_require__(4);

          var _block2 = _interopRequireDefault(_block);

          var _break = __webpack_require__(16);

          var _break2 = _interopRequireDefault(_break);

          var _code = __webpack_require__(13);

          var _code2 = _interopRequireDefault(_code);

          var _container = __webpack_require__(25);

          var _container2 = _interopRequireDefault(_container);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          function isLine(blot) {
            return blot instanceof _block2.default || blot instanceof _block.BlockEmbed;
          }

          var Scroll = function (_Parchment$Scroll) {
            _inherits(Scroll, _Parchment$Scroll);

            function Scroll(domNode, config) {
              _classCallCheck(this, Scroll);

              var _this = _possibleConstructorReturn(this, (Scroll.__proto__ || Object.getPrototypeOf(Scroll)).call(this, domNode));

              _this.emitter = config.emitter;

              if (Array.isArray(config.whitelist)) {
                _this.whitelist = config.whitelist.reduce(function (whitelist, format) {
                  whitelist[format] = true;
                  return whitelist;
                }, {});
              }

              _this.domNode.addEventListener('DOMNodeInserted', function () {});

              _this.optimize();

              _this.enable();

              return _this;
            }

            _createClass(Scroll, [{
              key: 'batchStart',
              value: function batchStart() {
                this.batch = true;
              }
            }, {
              key: 'batchEnd',
              value: function batchEnd() {
                this.batch = false;
                this.optimize();
              }
            }, {
              key: 'deleteAt',
              value: function deleteAt(index, length) {
                var _line = this.line(index),
                    _line2 = _slicedToArray(_line, 2),
                    first = _line2[0],
                    offset = _line2[1];

                var _line3 = this.line(index + length),
                    _line4 = _slicedToArray(_line3, 1),
                    last = _line4[0];

                _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'deleteAt', this).call(this, index, length);

                if (last != null && first !== last && offset > 0) {
                  if (first instanceof _block.BlockEmbed || last instanceof _block.BlockEmbed) {
                    this.optimize();
                    return;
                  }

                  if (first instanceof _code2.default) {
                    var newlineIndex = first.newlineIndex(first.length(), true);

                    if (newlineIndex > -1) {
                      first = first.split(newlineIndex + 1);

                      if (first === last) {
                        this.optimize();
                        return;
                      }
                    }
                  } else if (last instanceof _code2.default) {
                    var _newlineIndex = last.newlineIndex(0);

                    if (_newlineIndex > -1) {
                      last.split(_newlineIndex + 1);
                    }
                  }

                  var ref = last.children.head instanceof _break2.default ? null : last.children.head;
                  first.moveChildren(last, ref);
                  first.remove();
                }

                this.optimize();
              }
            }, {
              key: 'enable',
              value: function enable() {
                var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                this.domNode.setAttribute('contenteditable', enabled);
              }
            }, {
              key: 'formatAt',
              value: function formatAt(index, length, format, value) {
                if (this.whitelist != null && !this.whitelist[format]) return;

                _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'formatAt', this).call(this, index, length, format, value);

                this.optimize();
              }
            }, {
              key: 'insertAt',
              value: function insertAt(index, value, def) {
                if (def != null && this.whitelist != null && !this.whitelist[value]) return;

                if (index >= this.length()) {
                  if (def == null || _parchment2.default.query(value, _parchment2.default.Scope.BLOCK) == null) {
                    var blot = _parchment2.default.create(this.statics.defaultChild);

                    this.appendChild(blot);

                    if (def == null && value.endsWith('\n')) {
                      value = value.slice(0, -1);
                    }

                    blot.insertAt(0, value, def);
                  } else {
                    var embed = _parchment2.default.create(value, def);

                    this.appendChild(embed);
                  }
                } else {
                  _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertAt', this).call(this, index, value, def);
                }

                this.optimize();
              }
            }, {
              key: 'insertBefore',
              value: function insertBefore(blot, ref) {
                if (blot.statics.scope === _parchment2.default.Scope.INLINE_BLOT) {
                  var wrapper = _parchment2.default.create(this.statics.defaultChild);

                  wrapper.appendChild(blot);
                  blot = wrapper;
                }

                _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertBefore', this).call(this, blot, ref);
              }
            }, {
              key: 'leaf',
              value: function leaf(index) {
                return this.path(index).pop() || [null, -1];
              }
            }, {
              key: 'line',
              value: function line(index) {
                if (index === this.length()) {
                  return this.line(index - 1);
                }

                return this.descendant(isLine, index);
              }
            }, {
              key: 'lines',
              value: function lines() {
                var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

                var getLines = function getLines(blot, index, length) {
                  var lines = [],
                      lengthLeft = length;
                  blot.children.forEachAt(index, length, function (child, index, length) {
                    if (isLine(child)) {
                      lines.push(child);
                    } else if (child instanceof _parchment2.default.Container) {
                      lines = lines.concat(getLines(child, index, lengthLeft));
                    }

                    lengthLeft -= length;
                  });
                  return lines;
                };

                return getLines(this, index, length);
              }
            }, {
              key: 'optimize',
              value: function optimize() {
                var mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                if (this.batch === true) return;

                _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'optimize', this).call(this, mutations, context);

                if (mutations.length > 0) {
                  this.emitter.emit(_emitter2.default.events.SCROLL_OPTIMIZE, mutations, context);
                }
              }
            }, {
              key: 'path',
              value: function path(index) {
                return _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'path', this).call(this, index).slice(1);
              }
            }, {
              key: 'update',
              value: function update(mutations) {
                if (this.batch === true) return;
                var source = _emitter2.default.sources.USER;

                if (typeof mutations === 'string') {
                  source = mutations;
                }

                if (!Array.isArray(mutations)) {
                  mutations = this.observer.takeRecords();
                }

                if (mutations.length > 0) {
                  this.emitter.emit(_emitter2.default.events.SCROLL_BEFORE_UPDATE, source, mutations);
                }

                _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'update', this).call(this, mutations.concat([]));

                if (mutations.length > 0) {
                  this.emitter.emit(_emitter2.default.events.SCROLL_UPDATE, source, mutations);
                }
              }
            }]);

            return Scroll;
          }(_parchment2.default.Scroll);

          Scroll.blotName = 'scroll';
          Scroll.className = 'ql-editor';
          Scroll.tagName = 'DIV';
          Scroll.defaultChild = 'block';
          Scroll.allowedChildren = [_block2.default, _block.BlockEmbed, _container2.default];
          exports.default = Scroll;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.SHORTKEY = exports.default = undefined;

          var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
            return typeof obj;
          } : function (obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };

          var _slicedToArray = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;

              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _clone = __webpack_require__(21);

          var _clone2 = _interopRequireDefault(_clone);

          var _deepEqual = __webpack_require__(11);

          var _deepEqual2 = _interopRequireDefault(_deepEqual);

          var _extend = __webpack_require__(3);

          var _extend2 = _interopRequireDefault(_extend);

          var _quillDelta = __webpack_require__(2);

          var _quillDelta2 = _interopRequireDefault(_quillDelta);

          var _op = __webpack_require__(20);

          var _op2 = _interopRequireDefault(_op);

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _quill = __webpack_require__(5);

          var _quill2 = _interopRequireDefault(_quill);

          var _logger = __webpack_require__(10);

          var _logger2 = _interopRequireDefault(_logger);

          var _module = __webpack_require__(9);

          var _module2 = _interopRequireDefault(_module);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
              });
            } else {
              obj[key] = value;
            }

            return obj;
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var debug = (0, _logger2.default)('quill:keyboard');
          var SHORTKEY = /Mac/i.test(navigator.platform) ? 'metaKey' : 'ctrlKey';

          var Keyboard = function (_Module) {
            _inherits(Keyboard, _Module);

            _createClass(Keyboard, null, [{
              key: 'match',
              value: function match(evt, binding) {
                binding = normalize(binding);

                if (['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].some(function (key) {
                  return !!binding[key] !== evt[key] && binding[key] !== null;
                })) {
                  return false;
                }

                return binding.key === (evt.which || evt.keyCode);
              }
            }]);

            function Keyboard(quill, options) {
              _classCallCheck(this, Keyboard);

              var _this = _possibleConstructorReturn(this, (Keyboard.__proto__ || Object.getPrototypeOf(Keyboard)).call(this, quill, options));

              _this.bindings = {};
              Object.keys(_this.options.bindings).forEach(function (name) {
                if (name === 'list autofill' && quill.scroll.whitelist != null && !quill.scroll.whitelist['list']) {
                  return;
                }

                if (_this.options.bindings[name]) {
                  _this.addBinding(_this.options.bindings[name]);
                }
              });

              _this.addBinding({
                key: Keyboard.keys.ENTER,
                shiftKey: null
              }, handleEnter);

              _this.addBinding({
                key: Keyboard.keys.ENTER,
                metaKey: null,
                ctrlKey: null,
                altKey: null
              }, function () {});

              if (/Firefox/i.test(navigator.userAgent)) {
                _this.addBinding({
                  key: Keyboard.keys.BACKSPACE
                }, {
                  collapsed: true
                }, handleBackspace);

                _this.addBinding({
                  key: Keyboard.keys.DELETE
                }, {
                  collapsed: true
                }, handleDelete);
              } else {
                _this.addBinding({
                  key: Keyboard.keys.BACKSPACE
                }, {
                  collapsed: true,
                  prefix: /^.?$/
                }, handleBackspace);

                _this.addBinding({
                  key: Keyboard.keys.DELETE
                }, {
                  collapsed: true,
                  suffix: /^.?$/
                }, handleDelete);
              }

              _this.addBinding({
                key: Keyboard.keys.BACKSPACE
              }, {
                collapsed: false
              }, handleDeleteRange);

              _this.addBinding({
                key: Keyboard.keys.DELETE
              }, {
                collapsed: false
              }, handleDeleteRange);

              _this.addBinding({
                key: Keyboard.keys.BACKSPACE,
                altKey: null,
                ctrlKey: null,
                metaKey: null,
                shiftKey: null
              }, {
                collapsed: true,
                offset: 0
              }, handleBackspace);

              _this.listen();

              return _this;
            }

            _createClass(Keyboard, [{
              key: 'addBinding',
              value: function addBinding(key) {
                var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                var handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                var binding = normalize(key);

                if (binding == null || binding.key == null) {
                  return debug.warn('Attempted to add invalid keyboard binding', binding);
                }

                if (typeof context === 'function') {
                  context = {
                    handler: context
                  };
                }

                if (typeof handler === 'function') {
                  handler = {
                    handler: handler
                  };
                }

                binding = (0, _extend2.default)(binding, context, handler);
                this.bindings[binding.key] = this.bindings[binding.key] || [];
                this.bindings[binding.key].push(binding);
              }
            }, {
              key: 'listen',
              value: function listen() {
                var _this2 = this;

                this.quill.root.addEventListener('keydown', function (evt) {
                  if (evt.defaultPrevented) return;
                  var which = evt.which || evt.keyCode;
                  var bindings = (_this2.bindings[which] || []).filter(function (binding) {
                    return Keyboard.match(evt, binding);
                  });
                  if (bindings.length === 0) return;

                  var range = _this2.quill.getSelection();

                  if (range == null || !_this2.quill.hasFocus()) return;

                  var _quill$getLine = _this2.quill.getLine(range.index),
                      _quill$getLine2 = _slicedToArray(_quill$getLine, 2),
                      line = _quill$getLine2[0],
                      offset = _quill$getLine2[1];

                  var _quill$getLeaf = _this2.quill.getLeaf(range.index),
                      _quill$getLeaf2 = _slicedToArray(_quill$getLeaf, 2),
                      leafStart = _quill$getLeaf2[0],
                      offsetStart = _quill$getLeaf2[1];

                  var _ref = range.length === 0 ? [leafStart, offsetStart] : _this2.quill.getLeaf(range.index + range.length),
                      _ref2 = _slicedToArray(_ref, 2),
                      leafEnd = _ref2[0],
                      offsetEnd = _ref2[1];

                  var prefixText = leafStart instanceof _parchment2.default.Text ? leafStart.value().slice(0, offsetStart) : '';
                  var suffixText = leafEnd instanceof _parchment2.default.Text ? leafEnd.value().slice(offsetEnd) : '';
                  var curContext = {
                    collapsed: range.length === 0,
                    empty: range.length === 0 && line.length() <= 1,
                    format: _this2.quill.getFormat(range),
                    offset: offset,
                    prefix: prefixText,
                    suffix: suffixText
                  };
                  var prevented = bindings.some(function (binding) {
                    if (binding.collapsed != null && binding.collapsed !== curContext.collapsed) return false;
                    if (binding.empty != null && binding.empty !== curContext.empty) return false;
                    if (binding.offset != null && binding.offset !== curContext.offset) return false;

                    if (Array.isArray(binding.format)) {
                      if (binding.format.every(function (name) {
                        return curContext.format[name] == null;
                      })) {
                        return false;
                      }
                    } else if (_typeof(binding.format) === 'object') {
                      if (!Object.keys(binding.format).every(function (name) {
                        if (binding.format[name] === true) return curContext.format[name] != null;
                        if (binding.format[name] === false) return curContext.format[name] == null;
                        return (0, _deepEqual2.default)(binding.format[name], curContext.format[name]);
                      })) {
                        return false;
                      }
                    }

                    if (binding.prefix != null && !binding.prefix.test(curContext.prefix)) return false;
                    if (binding.suffix != null && !binding.suffix.test(curContext.suffix)) return false;
                    return binding.handler.call(_this2, range, curContext) !== true;
                  });

                  if (prevented) {
                    evt.preventDefault();
                  }
                });
              }
            }]);

            return Keyboard;
          }(_module2.default);

          Keyboard.keys = {
            BACKSPACE: 8,
            TAB: 9,
            ENTER: 13,
            ESCAPE: 27,
            LEFT: 37,
            UP: 38,
            RIGHT: 39,
            DOWN: 40,
            DELETE: 46
          };
          Keyboard.DEFAULTS = {
            bindings: {
              'bold': makeFormatHandler('bold'),
              'italic': makeFormatHandler('italic'),
              'underline': makeFormatHandler('underline'),
              'indent': {
                key: Keyboard.keys.TAB,
                format: ['blockquote', 'indent', 'list'],
                handler: function handler(range, context) {
                  if (context.collapsed && context.offset !== 0) return true;
                  this.quill.format('indent', '+1', _quill2.default.sources.USER);
                }
              },
              'outdent': {
                key: Keyboard.keys.TAB,
                shiftKey: true,
                format: ['blockquote', 'indent', 'list'],
                handler: function handler(range, context) {
                  if (context.collapsed && context.offset !== 0) return true;
                  this.quill.format('indent', '-1', _quill2.default.sources.USER);
                }
              },
              'outdent backspace': {
                key: Keyboard.keys.BACKSPACE,
                collapsed: true,
                shiftKey: null,
                metaKey: null,
                ctrlKey: null,
                altKey: null,
                format: ['indent', 'list'],
                offset: 0,
                handler: function handler(range, context) {
                  if (context.format.indent != null) {
                    this.quill.format('indent', '-1', _quill2.default.sources.USER);
                  } else if (context.format.list != null) {
                    this.quill.format('list', false, _quill2.default.sources.USER);
                  }
                }
              },
              'indent code-block': makeCodeBlockHandler(true),
              'outdent code-block': makeCodeBlockHandler(false),
              'remove tab': {
                key: Keyboard.keys.TAB,
                shiftKey: true,
                collapsed: true,
                prefix: /\t$/,
                handler: function handler(range) {
                  this.quill.deleteText(range.index - 1, 1, _quill2.default.sources.USER);
                }
              },
              'tab': {
                key: Keyboard.keys.TAB,
                handler: function handler(range) {
                  this.quill.history.cutoff();
                  var delta = new _quillDelta2.default().retain(range.index).delete(range.length).insert('\t');
                  this.quill.updateContents(delta, _quill2.default.sources.USER);
                  this.quill.history.cutoff();
                  this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
                }
              },
              'list empty enter': {
                key: Keyboard.keys.ENTER,
                collapsed: true,
                format: ['list'],
                empty: true,
                handler: function handler(range, context) {
                  this.quill.format('list', false, _quill2.default.sources.USER);

                  if (context.format.indent) {
                    this.quill.format('indent', false, _quill2.default.sources.USER);
                  }
                }
              },
              'checklist enter': {
                key: Keyboard.keys.ENTER,
                collapsed: true,
                format: {
                  list: 'checked'
                },
                handler: function handler(range) {
                  var _quill$getLine3 = this.quill.getLine(range.index),
                      _quill$getLine4 = _slicedToArray(_quill$getLine3, 2),
                      line = _quill$getLine4[0],
                      offset = _quill$getLine4[1];

                  var formats = (0, _extend2.default)({}, line.formats(), {
                    list: 'checked'
                  });
                  var delta = new _quillDelta2.default().retain(range.index).insert('\n', formats).retain(line.length() - offset - 1).retain(1, {
                    list: 'unchecked'
                  });
                  this.quill.updateContents(delta, _quill2.default.sources.USER);
                  this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
                  this.quill.scrollIntoView();
                }
              },
              'header enter': {
                key: Keyboard.keys.ENTER,
                collapsed: true,
                format: ['header'],
                suffix: /^$/,
                handler: function handler(range, context) {
                  var _quill$getLine5 = this.quill.getLine(range.index),
                      _quill$getLine6 = _slicedToArray(_quill$getLine5, 2),
                      line = _quill$getLine6[0],
                      offset = _quill$getLine6[1];

                  var delta = new _quillDelta2.default().retain(range.index).insert('\n', context.format).retain(line.length() - offset - 1).retain(1, {
                    header: null
                  });
                  this.quill.updateContents(delta, _quill2.default.sources.USER);
                  this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
                  this.quill.scrollIntoView();
                }
              },
              'list autofill': {
                key: ' ',
                collapsed: true,
                format: {
                  list: false
                },
                prefix: /^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,
                handler: function handler(range, context) {
                  var length = context.prefix.length;

                  var _quill$getLine7 = this.quill.getLine(range.index),
                      _quill$getLine8 = _slicedToArray(_quill$getLine7, 2),
                      line = _quill$getLine8[0],
                      offset = _quill$getLine8[1];

                  if (offset > length) return true;
                  var value = void 0;

                  switch (context.prefix.trim()) {
                    case '[]':
                    case '[ ]':
                      value = 'unchecked';
                      break;

                    case '[x]':
                      value = 'checked';
                      break;

                    case '-':
                    case '*':
                      value = 'bullet';
                      break;

                    default:
                      value = 'ordered';
                  }

                  this.quill.insertText(range.index, ' ', _quill2.default.sources.USER);
                  this.quill.history.cutoff();
                  var delta = new _quillDelta2.default().retain(range.index - offset).delete(length + 1).retain(line.length() - 2 - offset).retain(1, {
                    list: value
                  });
                  this.quill.updateContents(delta, _quill2.default.sources.USER);
                  this.quill.history.cutoff();
                  this.quill.setSelection(range.index - length, _quill2.default.sources.SILENT);
                }
              },
              'code exit': {
                key: Keyboard.keys.ENTER,
                collapsed: true,
                format: ['code-block'],
                prefix: /\n\n$/,
                suffix: /^\s+$/,
                handler: function handler(range) {
                  var _quill$getLine9 = this.quill.getLine(range.index),
                      _quill$getLine10 = _slicedToArray(_quill$getLine9, 2),
                      line = _quill$getLine10[0],
                      offset = _quill$getLine10[1];

                  var delta = new _quillDelta2.default().retain(range.index + line.length() - offset - 2).retain(1, {
                    'code-block': null
                  }).delete(1);
                  this.quill.updateContents(delta, _quill2.default.sources.USER);
                }
              },
              'embed left': makeEmbedArrowHandler(Keyboard.keys.LEFT, false),
              'embed left shift': makeEmbedArrowHandler(Keyboard.keys.LEFT, true),
              'embed right': makeEmbedArrowHandler(Keyboard.keys.RIGHT, false),
              'embed right shift': makeEmbedArrowHandler(Keyboard.keys.RIGHT, true)
            }
          };

          function makeEmbedArrowHandler(key, shiftKey) {
            var _ref3;

            var where = key === Keyboard.keys.LEFT ? 'prefix' : 'suffix';
            return _ref3 = {
              key: key,
              shiftKey: shiftKey,
              altKey: null
            }, _defineProperty(_ref3, where, /^$/), _defineProperty(_ref3, 'handler', function handler(range) {
              var index = range.index;

              if (key === Keyboard.keys.RIGHT) {
                index += range.length + 1;
              }

              var _quill$getLeaf3 = this.quill.getLeaf(index),
                  _quill$getLeaf4 = _slicedToArray(_quill$getLeaf3, 1),
                  leaf = _quill$getLeaf4[0];

              if (!(leaf instanceof _parchment2.default.Embed)) return true;

              if (key === Keyboard.keys.LEFT) {
                if (shiftKey) {
                  this.quill.setSelection(range.index - 1, range.length + 1, _quill2.default.sources.USER);
                } else {
                  this.quill.setSelection(range.index - 1, _quill2.default.sources.USER);
                }
              } else {
                if (shiftKey) {
                  this.quill.setSelection(range.index, range.length + 1, _quill2.default.sources.USER);
                } else {
                  this.quill.setSelection(range.index + range.length + 1, _quill2.default.sources.USER);
                }
              }

              return false;
            }), _ref3;
          }

          function handleBackspace(range, context) {
            if (range.index === 0 || this.quill.getLength() <= 1) return;

            var _quill$getLine11 = this.quill.getLine(range.index),
                _quill$getLine12 = _slicedToArray(_quill$getLine11, 1),
                line = _quill$getLine12[0];

            var formats = {};

            if (context.offset === 0) {
              var _quill$getLine13 = this.quill.getLine(range.index - 1),
                  _quill$getLine14 = _slicedToArray(_quill$getLine13, 1),
                  prev = _quill$getLine14[0];

              if (prev != null && prev.length() > 1) {
                var curFormats = line.formats();
                var prevFormats = this.quill.getFormat(range.index - 1, 1);
                formats = _op2.default.attributes.diff(curFormats, prevFormats) || {};
              }
            }

            var length = /[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(context.prefix) ? 2 : 1;
            this.quill.deleteText(range.index - length, length, _quill2.default.sources.USER);

            if (Object.keys(formats).length > 0) {
              this.quill.formatLine(range.index - length, length, formats, _quill2.default.sources.USER);
            }

            this.quill.focus();
          }

          function handleDelete(range, context) {
            var length = /^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(context.suffix) ? 2 : 1;
            if (range.index >= this.quill.getLength() - length) return;
            var formats = {},
                nextLength = 0;

            var _quill$getLine15 = this.quill.getLine(range.index),
                _quill$getLine16 = _slicedToArray(_quill$getLine15, 1),
                line = _quill$getLine16[0];

            if (context.offset >= line.length() - 1) {
              var _quill$getLine17 = this.quill.getLine(range.index + 1),
                  _quill$getLine18 = _slicedToArray(_quill$getLine17, 1),
                  next = _quill$getLine18[0];

              if (next) {
                var curFormats = line.formats();
                var nextFormats = this.quill.getFormat(range.index, 1);
                formats = _op2.default.attributes.diff(curFormats, nextFormats) || {};
                nextLength = next.length();
              }
            }

            this.quill.deleteText(range.index, length, _quill2.default.sources.USER);

            if (Object.keys(formats).length > 0) {
              this.quill.formatLine(range.index + nextLength - 1, length, formats, _quill2.default.sources.USER);
            }
          }

          function handleDeleteRange(range) {
            var lines = this.quill.getLines(range);
            var formats = {};

            if (lines.length > 1) {
              var firstFormats = lines[0].formats();
              var lastFormats = lines[lines.length - 1].formats();
              formats = _op2.default.attributes.diff(lastFormats, firstFormats) || {};
            }

            this.quill.deleteText(range, _quill2.default.sources.USER);

            if (Object.keys(formats).length > 0) {
              this.quill.formatLine(range.index, 1, formats, _quill2.default.sources.USER);
            }

            this.quill.setSelection(range.index, _quill2.default.sources.SILENT);
            this.quill.focus();
          }

          function handleEnter(range, context) {
            var _this3 = this;

            if (range.length > 0) {
              this.quill.scroll.deleteAt(range.index, range.length);
            }

            var lineFormats = Object.keys(context.format).reduce(function (lineFormats, format) {
              if (_parchment2.default.query(format, _parchment2.default.Scope.BLOCK) && !Array.isArray(context.format[format])) {
                lineFormats[format] = context.format[format];
              }

              return lineFormats;
            }, {});
            this.quill.insertText(range.index, '\n', lineFormats, _quill2.default.sources.USER);
            this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
            this.quill.focus();
            Object.keys(context.format).forEach(function (name) {
              if (lineFormats[name] != null) return;
              if (Array.isArray(context.format[name])) return;
              if (name === 'link') return;

              _this3.quill.format(name, context.format[name], _quill2.default.sources.USER);
            });
          }

          function makeCodeBlockHandler(indent) {
            return {
              key: Keyboard.keys.TAB,
              shiftKey: !indent,
              format: {
                'code-block': true
              },
              handler: function handler(range) {
                var CodeBlock = _parchment2.default.query('code-block');

                var index = range.index,
                    length = range.length;

                var _quill$scroll$descend = this.quill.scroll.descendant(CodeBlock, index),
                    _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),
                    block = _quill$scroll$descend2[0],
                    offset = _quill$scroll$descend2[1];

                if (block == null) return;
                var scrollIndex = this.quill.getIndex(block);
                var start = block.newlineIndex(offset, true) + 1;
                var end = block.newlineIndex(scrollIndex + offset + length);
                var lines = block.domNode.textContent.slice(start, end).split('\n');
                offset = 0;
                lines.forEach(function (line, i) {
                  if (indent) {
                    block.insertAt(start + offset, CodeBlock.TAB);
                    offset += CodeBlock.TAB.length;

                    if (i === 0) {
                      index += CodeBlock.TAB.length;
                    } else {
                      length += CodeBlock.TAB.length;
                    }
                  } else if (line.startsWith(CodeBlock.TAB)) {
                    block.deleteAt(start + offset, CodeBlock.TAB.length);
                    offset -= CodeBlock.TAB.length;

                    if (i === 0) {
                      index -= CodeBlock.TAB.length;
                    } else {
                      length -= CodeBlock.TAB.length;
                    }
                  }

                  offset += line.length + 1;
                });
                this.quill.update(_quill2.default.sources.USER);
                this.quill.setSelection(index, length, _quill2.default.sources.SILENT);
              }
            };
          }

          function makeFormatHandler(format) {
            return {
              key: format[0].toUpperCase(),
              shortKey: true,
              handler: function handler(range, context) {
                this.quill.format(format, !context.format[format], _quill2.default.sources.USER);
              }
            };
          }

          function normalize(binding) {
            if (typeof binding === 'string' || typeof binding === 'number') {
              return normalize({
                key: binding
              });
            }

            if ((typeof binding === 'undefined' ? 'undefined' : _typeof(binding)) === 'object') {
              binding = (0, _clone2.default)(binding, false);
            }

            if (typeof binding.key === 'string') {
              if (Keyboard.keys[binding.key.toUpperCase()] != null) {
                binding.key = Keyboard.keys[binding.key.toUpperCase()];
              } else if (binding.key.length === 1) {
                binding.key = binding.key.toUpperCase().charCodeAt(0);
              } else {
                return null;
              }
            }

            if (binding.shortKey) {
              binding[SHORTKEY] = binding.shortKey;
              delete binding.shortKey;
            }

            return binding;
          }

          exports.default = Keyboard;
          exports.SHORTKEY = SHORTKEY;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _slicedToArray = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;

              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _text = __webpack_require__(7);

          var _text2 = _interopRequireDefault(_text);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Cursor = function (_Parchment$Embed) {
            _inherits(Cursor, _Parchment$Embed);

            _createClass(Cursor, null, [{
              key: 'value',
              value: function value() {
                return undefined;
              }
            }]);

            function Cursor(domNode, selection) {
              _classCallCheck(this, Cursor);

              var _this = _possibleConstructorReturn(this, (Cursor.__proto__ || Object.getPrototypeOf(Cursor)).call(this, domNode));

              _this.selection = selection;
              _this.textNode = document.createTextNode(Cursor.CONTENTS);

              _this.domNode.appendChild(_this.textNode);

              _this._length = 0;
              return _this;
            }

            _createClass(Cursor, [{
              key: 'detach',
              value: function detach() {
                if (this.parent != null) this.parent.removeChild(this);
              }
            }, {
              key: 'format',
              value: function format(name, value) {
                if (this._length !== 0) {
                  return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'format', this).call(this, name, value);
                }

                var target = this,
                    index = 0;

                while (target != null && target.statics.scope !== _parchment2.default.Scope.BLOCK_BLOT) {
                  index += target.offset(target.parent);
                  target = target.parent;
                }

                if (target != null) {
                  this._length = Cursor.CONTENTS.length;
                  target.optimize();
                  target.formatAt(index, Cursor.CONTENTS.length, name, value);
                  this._length = 0;
                }
              }
            }, {
              key: 'index',
              value: function index(node, offset) {
                if (node === this.textNode) return 0;
                return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'index', this).call(this, node, offset);
              }
            }, {
              key: 'length',
              value: function length() {
                return this._length;
              }
            }, {
              key: 'position',
              value: function position() {
                return [this.textNode, this.textNode.data.length];
              }
            }, {
              key: 'remove',
              value: function remove() {
                _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'remove', this).call(this);

                this.parent = null;
              }
            }, {
              key: 'restore',
              value: function restore() {
                if (this.selection.composing || this.parent == null) return;
                var textNode = this.textNode;
                var range = this.selection.getNativeRange();
                var restoreText = void 0,
                    start = void 0,
                    end = void 0;

                if (range != null && range.start.node === textNode && range.end.node === textNode) {
                  var _ref = [textNode, range.start.offset, range.end.offset];
                  restoreText = _ref[0];
                  start = _ref[1];
                  end = _ref[2];
                }

                while (this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode) {
                  this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);
                }

                if (this.textNode.data !== Cursor.CONTENTS) {
                  var text = this.textNode.data.split(Cursor.CONTENTS).join('');

                  if (this.next instanceof _text2.default) {
                    restoreText = this.next.domNode;
                    this.next.insertAt(0, text);
                    this.textNode.data = Cursor.CONTENTS;
                  } else {
                    this.textNode.data = text;
                    this.parent.insertBefore(_parchment2.default.create(this.textNode), this);
                    this.textNode = document.createTextNode(Cursor.CONTENTS);
                    this.domNode.appendChild(this.textNode);
                  }
                }

                this.remove();

                if (start != null) {
                  var _map = [start, end].map(function (offset) {
                    return Math.max(0, Math.min(restoreText.data.length, offset - 1));
                  });

                  var _map2 = _slicedToArray(_map, 2);

                  start = _map2[0];
                  end = _map2[1];
                  return {
                    startNode: restoreText,
                    startOffset: start,
                    endNode: restoreText,
                    endOffset: end
                  };
                }
              }
            }, {
              key: 'update',
              value: function update(mutations, context) {
                var _this2 = this;

                if (mutations.some(function (mutation) {
                  return mutation.type === 'characterData' && mutation.target === _this2.textNode;
                })) {
                  var range = this.restore();
                  if (range) context.range = range;
                }
              }
            }, {
              key: 'value',
              value: function value() {
                return '';
              }
            }]);

            return Cursor;
          }(_parchment2.default.Embed);

          Cursor.blotName = 'cursor';
          Cursor.className = 'ql-cursor';
          Cursor.tagName = 'span';
          Cursor.CONTENTS = '\uFEFF';
          exports.default = Cursor;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _block = __webpack_require__(4);

          var _block2 = _interopRequireDefault(_block);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Container = function (_Parchment$Container) {
            _inherits(Container, _Parchment$Container);

            function Container() {
              _classCallCheck(this, Container);

              return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));
            }

            return Container;
          }(_parchment2.default.Container);

          Container.allowedChildren = [_block2.default, _block.BlockEmbed, Container];
          exports.default = Container;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.ColorStyle = exports.ColorClass = exports.ColorAttributor = undefined;

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var ColorAttributor = function (_Parchment$Attributor) {
            _inherits(ColorAttributor, _Parchment$Attributor);

            function ColorAttributor() {
              _classCallCheck(this, ColorAttributor);

              return _possibleConstructorReturn(this, (ColorAttributor.__proto__ || Object.getPrototypeOf(ColorAttributor)).apply(this, arguments));
            }

            _createClass(ColorAttributor, [{
              key: 'value',
              value: function value(domNode) {
                var value = _get(ColorAttributor.prototype.__proto__ || Object.getPrototypeOf(ColorAttributor.prototype), 'value', this).call(this, domNode);

                if (!value.startsWith('rgb(')) return value;
                value = value.replace(/^[^\d]+/, '').replace(/[^\d]+$/, '');
                return '#' + value.split(',').map(function (component) {
                  return ('00' + parseInt(component).toString(16)).slice(-2);
                }).join('');
              }
            }]);

            return ColorAttributor;
          }(_parchment2.default.Attributor.Style);

          var ColorClass = new _parchment2.default.Attributor.Class('color', 'ql-color', {
            scope: _parchment2.default.Scope.INLINE
          });
          var ColorStyle = new ColorAttributor('color', 'color', {
            scope: _parchment2.default.Scope.INLINE
          });
          exports.ColorAttributor = ColorAttributor;
          exports.ColorClass = ColorClass;
          exports.ColorStyle = ColorStyle;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.sanitize = exports.default = undefined;

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _inline = __webpack_require__(6);

          var _inline2 = _interopRequireDefault(_inline);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Link = function (_Inline) {
            _inherits(Link, _Inline);

            function Link() {
              _classCallCheck(this, Link);

              return _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).apply(this, arguments));
            }

            _createClass(Link, [{
              key: 'format',
              value: function format(name, value) {
                if (name !== this.statics.blotName || !value) return _get(Link.prototype.__proto__ || Object.getPrototypeOf(Link.prototype), 'format', this).call(this, name, value);
                value = this.constructor.sanitize(value);
                this.domNode.setAttribute('href', value);
              }
            }], [{
              key: 'create',
              value: function create(value) {
                var node = _get(Link.__proto__ || Object.getPrototypeOf(Link), 'create', this).call(this, value);

                value = this.sanitize(value);
                node.setAttribute('href', value);
                node.setAttribute('rel', 'noopener noreferrer');
                node.setAttribute('target', '_blank');
                return node;
              }
            }, {
              key: 'formats',
              value: function formats(domNode) {
                return domNode.getAttribute('href');
              }
            }, {
              key: 'sanitize',
              value: function sanitize(url) {
                return _sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;
              }
            }]);

            return Link;
          }(_inline2.default);

          Link.blotName = 'link';
          Link.tagName = 'A';
          Link.SANITIZED_URL = 'about:blank';
          Link.PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel'];

          function _sanitize(url, protocols) {
            var anchor = document.createElement('a');
            anchor.href = url;
            var protocol = anchor.href.slice(0, anchor.href.indexOf(':'));
            return protocols.indexOf(protocol) > -1;
          }

          exports.default = Link;
          exports.sanitize = _sanitize;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
            return typeof obj;
          } : function (obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _keyboard = __webpack_require__(23);

          var _keyboard2 = _interopRequireDefault(_keyboard);

          var _dropdown = __webpack_require__(107);

          var _dropdown2 = _interopRequireDefault(_dropdown);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var optionsCounter = 0;

          function toggleAriaAttribute(element, attribute) {
            element.setAttribute(attribute, !(element.getAttribute(attribute) === 'true'));
          }

          var Picker = function () {
            function Picker(select) {
              var _this = this;

              _classCallCheck(this, Picker);

              this.select = select;
              this.container = document.createElement('span');
              this.buildPicker();
              this.select.style.display = 'none';
              this.select.parentNode.insertBefore(this.container, this.select);
              this.label.addEventListener('mousedown', function () {
                _this.togglePicker();
              });
              this.label.addEventListener('keydown', function (event) {
                switch (event.keyCode) {
                  case _keyboard2.default.keys.ENTER:
                    _this.togglePicker();

                    break;

                  case _keyboard2.default.keys.ESCAPE:
                    _this.escape();

                    event.preventDefault();
                    break;
                }
              });
              this.select.addEventListener('change', this.update.bind(this));
            }

            _createClass(Picker, [{
              key: 'togglePicker',
              value: function togglePicker() {
                this.container.classList.toggle('ql-expanded');
                toggleAriaAttribute(this.label, 'aria-expanded');
                toggleAriaAttribute(this.options, 'aria-hidden');
              }
            }, {
              key: 'buildItem',
              value: function buildItem(option) {
                var _this2 = this;

                var item = document.createElement('span');
                item.tabIndex = '0';
                item.setAttribute('role', 'button');
                item.classList.add('ql-picker-item');

                if (option.hasAttribute('value')) {
                  item.setAttribute('data-value', option.getAttribute('value'));
                }

                if (option.textContent) {
                  item.setAttribute('data-label', option.textContent);
                }

                item.addEventListener('click', function () {
                  _this2.selectItem(item, true);
                });
                item.addEventListener('keydown', function (event) {
                  switch (event.keyCode) {
                    case _keyboard2.default.keys.ENTER:
                      _this2.selectItem(item, true);

                      event.preventDefault();
                      break;

                    case _keyboard2.default.keys.ESCAPE:
                      _this2.escape();

                      event.preventDefault();
                      break;
                  }
                });
                return item;
              }
            }, {
              key: 'buildLabel',
              value: function buildLabel() {
                var label = document.createElement('span');
                label.classList.add('ql-picker-label');
                label.innerHTML = _dropdown2.default;
                label.tabIndex = '0';
                label.setAttribute('role', 'button');
                label.setAttribute('aria-expanded', 'false');
                this.container.appendChild(label);
                return label;
              }
            }, {
              key: 'buildOptions',
              value: function buildOptions() {
                var _this3 = this;

                var options = document.createElement('span');
                options.classList.add('ql-picker-options');
                options.setAttribute('aria-hidden', 'true');
                options.tabIndex = '-1';
                options.id = 'ql-picker-options-' + optionsCounter;
                optionsCounter += 1;
                this.label.setAttribute('aria-controls', options.id);
                this.options = options;
                [].slice.call(this.select.options).forEach(function (option) {
                  var item = _this3.buildItem(option);

                  options.appendChild(item);

                  if (option.selected === true) {
                    _this3.selectItem(item);
                  }
                });
                this.container.appendChild(options);
              }
            }, {
              key: 'buildPicker',
              value: function buildPicker() {
                var _this4 = this;

                [].slice.call(this.select.attributes).forEach(function (item) {
                  _this4.container.setAttribute(item.name, item.value);
                });
                this.container.classList.add('ql-picker');
                this.label = this.buildLabel();
                this.buildOptions();
              }
            }, {
              key: 'escape',
              value: function escape() {
                var _this5 = this;

                this.close();
                setTimeout(function () {
                  return _this5.label.focus();
                }, 1);
              }
            }, {
              key: 'close',
              value: function close() {
                this.container.classList.remove('ql-expanded');
                this.label.setAttribute('aria-expanded', 'false');
                this.options.setAttribute('aria-hidden', 'true');
              }
            }, {
              key: 'selectItem',
              value: function selectItem(item) {
                var trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                var selected = this.container.querySelector('.ql-selected');
                if (item === selected) return;

                if (selected != null) {
                  selected.classList.remove('ql-selected');
                }

                if (item == null) return;
                item.classList.add('ql-selected');
                this.select.selectedIndex = [].indexOf.call(item.parentNode.children, item);

                if (item.hasAttribute('data-value')) {
                  this.label.setAttribute('data-value', item.getAttribute('data-value'));
                } else {
                  this.label.removeAttribute('data-value');
                }

                if (item.hasAttribute('data-label')) {
                  this.label.setAttribute('data-label', item.getAttribute('data-label'));
                } else {
                  this.label.removeAttribute('data-label');
                }

                if (trigger) {
                  if (typeof Event === 'function') {
                    this.select.dispatchEvent(new Event('change'));
                  } else if ((typeof Event === 'undefined' ? 'undefined' : _typeof(Event)) === 'object') {
                    var event = document.createEvent('Event');
                    event.initEvent('change', true, true);
                    this.select.dispatchEvent(event);
                  }

                  this.close();
                }
              }
            }, {
              key: 'update',
              value: function update() {
                var option = void 0;

                if (this.select.selectedIndex > -1) {
                  var item = this.container.querySelector('.ql-picker-options').children[this.select.selectedIndex];
                  option = this.select.options[this.select.selectedIndex];
                  this.selectItem(item);
                } else {
                  this.selectItem(null);
                }

                var isActive = option != null && option !== this.select.querySelector('option[selected]');
                this.label.classList.toggle('ql-active', isActive);
              }
            }]);

            return Picker;
          }();

          exports.default = Picker;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _quill = __webpack_require__(5);

          var _quill2 = _interopRequireDefault(_quill);

          var _block = __webpack_require__(4);

          var _block2 = _interopRequireDefault(_block);

          var _break = __webpack_require__(16);

          var _break2 = _interopRequireDefault(_break);

          var _container = __webpack_require__(25);

          var _container2 = _interopRequireDefault(_container);

          var _cursor = __webpack_require__(24);

          var _cursor2 = _interopRequireDefault(_cursor);

          var _embed = __webpack_require__(35);

          var _embed2 = _interopRequireDefault(_embed);

          var _inline = __webpack_require__(6);

          var _inline2 = _interopRequireDefault(_inline);

          var _scroll = __webpack_require__(22);

          var _scroll2 = _interopRequireDefault(_scroll);

          var _text = __webpack_require__(7);

          var _text2 = _interopRequireDefault(_text);

          var _clipboard = __webpack_require__(55);

          var _clipboard2 = _interopRequireDefault(_clipboard);

          var _history = __webpack_require__(42);

          var _history2 = _interopRequireDefault(_history);

          var _keyboard = __webpack_require__(23);

          var _keyboard2 = _interopRequireDefault(_keyboard);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          _quill2.default.register({
            'blots/block': _block2.default,
            'blots/block/embed': _block.BlockEmbed,
            'blots/break': _break2.default,
            'blots/container': _container2.default,
            'blots/cursor': _cursor2.default,
            'blots/embed': _embed2.default,
            'blots/inline': _inline2.default,
            'blots/scroll': _scroll2.default,
            'blots/text': _text2.default,
            'modules/clipboard': _clipboard2.default,
            'modules/history': _history2.default,
            'modules/keyboard': _keyboard2.default
          });

          _parchment2.default.register(_block2.default, _break2.default, _cursor2.default, _inline2.default, _scroll2.default, _text2.default);

          exports.default = _quill2.default;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var Registry = __webpack_require__(1);

          var ShadowBlot = function () {
            function ShadowBlot(domNode) {
              this.domNode = domNode;
              this.domNode[Registry.DATA_KEY] = {
                blot: this
              };
            }

            Object.defineProperty(ShadowBlot.prototype, "statics", {
              get: function () {
                return this.constructor;
              },
              enumerable: true,
              configurable: true
            });

            ShadowBlot.create = function (value) {
              if (this.tagName == null) {
                throw new Registry.ParchmentError('Blot definition missing tagName');
              }

              var node;

              if (Array.isArray(this.tagName)) {
                if (typeof value === 'string') {
                  value = value.toUpperCase();

                  if (parseInt(value).toString() === value) {
                    value = parseInt(value);
                  }
                }

                if (typeof value === 'number') {
                  node = document.createElement(this.tagName[value - 1]);
                } else if (this.tagName.indexOf(value) > -1) {
                  node = document.createElement(value);
                } else {
                  node = document.createElement(this.tagName[0]);
                }
              } else {
                node = document.createElement(this.tagName);
              }

              if (this.className) {
                node.classList.add(this.className);
              }

              return node;
            };

            ShadowBlot.prototype.attach = function () {
              if (this.parent != null) {
                this.scroll = this.parent.scroll;
              }
            };

            ShadowBlot.prototype.clone = function () {
              var domNode = this.domNode.cloneNode(false);
              return Registry.create(domNode);
            };

            ShadowBlot.prototype.detach = function () {
              if (this.parent != null) this.parent.removeChild(this);
              delete this.domNode[Registry.DATA_KEY];
            };

            ShadowBlot.prototype.deleteAt = function (index, length) {
              var blot = this.isolate(index, length);
              blot.remove();
            };

            ShadowBlot.prototype.formatAt = function (index, length, name, value) {
              var blot = this.isolate(index, length);

              if (Registry.query(name, Registry.Scope.BLOT) != null && value) {
                blot.wrap(name, value);
              } else if (Registry.query(name, Registry.Scope.ATTRIBUTE) != null) {
                var parent = Registry.create(this.statics.scope);
                blot.wrap(parent);
                parent.format(name, value);
              }
            };

            ShadowBlot.prototype.insertAt = function (index, value, def) {
              var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
              var ref = this.split(index);
              this.parent.insertBefore(blot, ref);
            };

            ShadowBlot.prototype.insertInto = function (parentBlot, refBlot) {
              if (refBlot === void 0) {
                refBlot = null;
              }

              if (this.parent != null) {
                this.parent.children.remove(this);
              }

              var refDomNode = null;
              parentBlot.children.insertBefore(this, refBlot);

              if (refBlot != null) {
                refDomNode = refBlot.domNode;
              }

              if (this.domNode.parentNode != parentBlot.domNode || this.domNode.nextSibling != refDomNode) {
                parentBlot.domNode.insertBefore(this.domNode, refDomNode);
              }

              this.parent = parentBlot;
              this.attach();
            };

            ShadowBlot.prototype.isolate = function (index, length) {
              var target = this.split(index);
              target.split(length);
              return target;
            };

            ShadowBlot.prototype.length = function () {
              return 1;
            };

            ShadowBlot.prototype.offset = function (root) {
              if (root === void 0) {
                root = this.parent;
              }

              if (this.parent == null || this == root) return 0;
              return this.parent.children.offset(this) + this.parent.offset(root);
            };

            ShadowBlot.prototype.optimize = function (context) {
              if (this.domNode[Registry.DATA_KEY] != null) {
                delete this.domNode[Registry.DATA_KEY].mutations;
              }
            };

            ShadowBlot.prototype.remove = function () {
              if (this.domNode.parentNode != null) {
                this.domNode.parentNode.removeChild(this.domNode);
              }

              this.detach();
            };

            ShadowBlot.prototype.replace = function (target) {
              if (target.parent == null) return;
              target.parent.insertBefore(this, target.next);
              target.remove();
            };

            ShadowBlot.prototype.replaceWith = function (name, value) {
              var replacement = typeof name === 'string' ? Registry.create(name, value) : name;
              replacement.replace(this);
              return replacement;
            };

            ShadowBlot.prototype.split = function (index, force) {
              return index === 0 ? this : this.next;
            };

            ShadowBlot.prototype.update = function (mutations, context) {};

            ShadowBlot.prototype.wrap = function (name, value) {
              var wrapper = typeof name === 'string' ? Registry.create(name, value) : name;

              if (this.parent != null) {
                this.parent.insertBefore(wrapper, this.next);
              }

              wrapper.appendChild(this);
              return wrapper;
            };

            ShadowBlot.blotName = 'abstract';
            return ShadowBlot;
          }();

          exports.default = ShadowBlot;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var attributor_1 = __webpack_require__(12);

          var class_1 = __webpack_require__(32);

          var style_1 = __webpack_require__(33);

          var Registry = __webpack_require__(1);

          var AttributorStore = function () {
            function AttributorStore(domNode) {
              this.attributes = {};
              this.domNode = domNode;
              this.build();
            }

            AttributorStore.prototype.attribute = function (attribute, value) {
              if (value) {
                if (attribute.add(this.domNode, value)) {
                  if (attribute.value(this.domNode) != null) {
                    this.attributes[attribute.attrName] = attribute;
                  } else {
                    delete this.attributes[attribute.attrName];
                  }
                }
              } else {
                attribute.remove(this.domNode);
                delete this.attributes[attribute.attrName];
              }
            };

            AttributorStore.prototype.build = function () {
              var _this = this;

              this.attributes = {};
              var attributes = attributor_1.default.keys(this.domNode);
              var classes = class_1.default.keys(this.domNode);
              var styles = style_1.default.keys(this.domNode);
              attributes.concat(classes).concat(styles).forEach(function (name) {
                var attr = Registry.query(name, Registry.Scope.ATTRIBUTE);

                if (attr instanceof attributor_1.default) {
                  _this.attributes[attr.attrName] = attr;
                }
              });
            };

            AttributorStore.prototype.copy = function (target) {
              var _this = this;

              Object.keys(this.attributes).forEach(function (key) {
                var value = _this.attributes[key].value(_this.domNode);

                target.format(key, value);
              });
            };

            AttributorStore.prototype.move = function (target) {
              var _this = this;

              this.copy(target);
              Object.keys(this.attributes).forEach(function (key) {
                _this.attributes[key].remove(_this.domNode);
              });
              this.attributes = {};
            };

            AttributorStore.prototype.values = function () {
              var _this = this;

              return Object.keys(this.attributes).reduce(function (attributes, name) {
                attributes[name] = _this.attributes[name].value(_this.domNode);
                return attributes;
              }, {});
            };

            return AttributorStore;
          }();

          exports.default = AttributorStore;
        }, function (module, exports, __webpack_require__) {
          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var attributor_1 = __webpack_require__(12);

          function match(node, prefix) {
            var className = node.getAttribute('class') || '';
            return className.split(/\s+/).filter(function (name) {
              return name.indexOf(prefix + "-") === 0;
            });
          }

          var ClassAttributor = function (_super) {
            __extends(ClassAttributor, _super);

            function ClassAttributor() {
              return _super !== null && _super.apply(this, arguments) || this;
            }

            ClassAttributor.keys = function (node) {
              return (node.getAttribute('class') || '').split(/\s+/).map(function (name) {
                return name.split('-').slice(0, -1).join('-');
              });
            };

            ClassAttributor.prototype.add = function (node, value) {
              if (!this.canAdd(node, value)) return false;
              this.remove(node);
              node.classList.add(this.keyName + "-" + value);
              return true;
            };

            ClassAttributor.prototype.remove = function (node) {
              var matches = match(node, this.keyName);
              matches.forEach(function (name) {
                node.classList.remove(name);
              });

              if (node.classList.length === 0) {
                node.removeAttribute('class');
              }
            };

            ClassAttributor.prototype.value = function (node) {
              var result = match(node, this.keyName)[0] || '';
              var value = result.slice(this.keyName.length + 1);
              return this.canAdd(node, value) ? value : '';
            };

            return ClassAttributor;
          }(attributor_1.default);

          exports.default = ClassAttributor;
        }, function (module, exports, __webpack_require__) {
          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var attributor_1 = __webpack_require__(12);

          function camelize(name) {
            var parts = name.split('-');
            var rest = parts.slice(1).map(function (part) {
              return part[0].toUpperCase() + part.slice(1);
            }).join('');
            return parts[0] + rest;
          }

          var StyleAttributor = function (_super) {
            __extends(StyleAttributor, _super);

            function StyleAttributor() {
              return _super !== null && _super.apply(this, arguments) || this;
            }

            StyleAttributor.keys = function (node) {
              return (node.getAttribute('style') || '').split(';').map(function (value) {
                var arr = value.split(':');
                return arr[0].trim();
              });
            };

            StyleAttributor.prototype.add = function (node, value) {
              if (!this.canAdd(node, value)) return false;
              node.style[camelize(this.keyName)] = value;
              return true;
            };

            StyleAttributor.prototype.remove = function (node) {
              node.style[camelize(this.keyName)] = '';

              if (!node.getAttribute('style')) {
                node.removeAttribute('style');
              }
            };

            StyleAttributor.prototype.value = function (node) {
              var value = node.style[camelize(this.keyName)];
              return this.canAdd(node, value) ? value : '';
            };

            return StyleAttributor;
          }(attributor_1.default);

          exports.default = StyleAttributor;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var Theme = function () {
            function Theme(quill, options) {
              _classCallCheck(this, Theme);

              this.quill = quill;
              this.options = options;
              this.modules = {};
            }

            _createClass(Theme, [{
              key: 'init',
              value: function init() {
                var _this = this;

                Object.keys(this.options.modules).forEach(function (name) {
                  if (_this.modules[name] == null) {
                    _this.addModule(name);
                  }
                });
              }
            }, {
              key: 'addModule',
              value: function addModule(name) {
                var moduleClass = this.quill.constructor.import('modules/' + name);
                this.modules[name] = new moduleClass(this.quill, this.options.modules[name] || {});
                return this.modules[name];
              }
            }]);

            return Theme;
          }();

          Theme.DEFAULTS = {
            modules: {}
          };
          Theme.themes = {
            'default': Theme
          };
          exports.default = Theme;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _text = __webpack_require__(7);

          var _text2 = _interopRequireDefault(_text);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var GUARD_TEXT = '\uFEFF';

          var Embed = function (_Parchment$Embed) {
            _inherits(Embed, _Parchment$Embed);

            function Embed(node) {
              _classCallCheck(this, Embed);

              var _this = _possibleConstructorReturn(this, (Embed.__proto__ || Object.getPrototypeOf(Embed)).call(this, node));

              _this.contentNode = document.createElement('span');

              _this.contentNode.setAttribute('contenteditable', false);

              [].slice.call(_this.domNode.childNodes).forEach(function (childNode) {
                _this.contentNode.appendChild(childNode);
              });
              _this.leftGuard = document.createTextNode(GUARD_TEXT);
              _this.rightGuard = document.createTextNode(GUARD_TEXT);

              _this.domNode.appendChild(_this.leftGuard);

              _this.domNode.appendChild(_this.contentNode);

              _this.domNode.appendChild(_this.rightGuard);

              return _this;
            }

            _createClass(Embed, [{
              key: 'index',
              value: function index(node, offset) {
                if (node === this.leftGuard) return 0;
                if (node === this.rightGuard) return 1;
                return _get(Embed.prototype.__proto__ || Object.getPrototypeOf(Embed.prototype), 'index', this).call(this, node, offset);
              }
            }, {
              key: 'restore',
              value: function restore(node) {
                var range = void 0,
                    textNode = void 0;
                var text = node.data.split(GUARD_TEXT).join('');

                if (node === this.leftGuard) {
                  if (this.prev instanceof _text2.default) {
                    var prevLength = this.prev.length();
                    this.prev.insertAt(prevLength, text);
                    range = {
                      startNode: this.prev.domNode,
                      startOffset: prevLength + text.length
                    };
                  } else {
                    textNode = document.createTextNode(text);
                    this.parent.insertBefore(_parchment2.default.create(textNode), this);
                    range = {
                      startNode: textNode,
                      startOffset: text.length
                    };
                  }
                } else if (node === this.rightGuard) {
                  if (this.next instanceof _text2.default) {
                    this.next.insertAt(0, text);
                    range = {
                      startNode: this.next.domNode,
                      startOffset: text.length
                    };
                  } else {
                    textNode = document.createTextNode(text);
                    this.parent.insertBefore(_parchment2.default.create(textNode), this.next);
                    range = {
                      startNode: textNode,
                      startOffset: text.length
                    };
                  }
                }

                node.data = GUARD_TEXT;
                return range;
              }
            }, {
              key: 'update',
              value: function update(mutations, context) {
                var _this2 = this;

                mutations.forEach(function (mutation) {
                  if (mutation.type === 'characterData' && (mutation.target === _this2.leftGuard || mutation.target === _this2.rightGuard)) {
                    var range = _this2.restore(mutation.target);

                    if (range) context.range = range;
                  }
                });
              }
            }]);

            return Embed;
          }(_parchment2.default.Embed);

          exports.default = Embed;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.AlignStyle = exports.AlignClass = exports.AlignAttribute = undefined;

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          var config = {
            scope: _parchment2.default.Scope.BLOCK,
            whitelist: ['right', 'center', 'justify']
          };
          var AlignAttribute = new _parchment2.default.Attributor.Attribute('align', 'align', config);
          var AlignClass = new _parchment2.default.Attributor.Class('align', 'ql-align', config);
          var AlignStyle = new _parchment2.default.Attributor.Style('align', 'text-align', config);
          exports.AlignAttribute = AlignAttribute;
          exports.AlignClass = AlignClass;
          exports.AlignStyle = AlignStyle;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.BackgroundStyle = exports.BackgroundClass = undefined;

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _color = __webpack_require__(26);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          var BackgroundClass = new _parchment2.default.Attributor.Class('background', 'ql-bg', {
            scope: _parchment2.default.Scope.INLINE
          });
          var BackgroundStyle = new _color.ColorAttributor('background', 'background-color', {
            scope: _parchment2.default.Scope.INLINE
          });
          exports.BackgroundClass = BackgroundClass;
          exports.BackgroundStyle = BackgroundStyle;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.DirectionStyle = exports.DirectionClass = exports.DirectionAttribute = undefined;

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          var config = {
            scope: _parchment2.default.Scope.BLOCK,
            whitelist: ['rtl']
          };
          var DirectionAttribute = new _parchment2.default.Attributor.Attribute('direction', 'dir', config);
          var DirectionClass = new _parchment2.default.Attributor.Class('direction', 'ql-direction', config);
          var DirectionStyle = new _parchment2.default.Attributor.Style('direction', 'direction', config);
          exports.DirectionAttribute = DirectionAttribute;
          exports.DirectionClass = DirectionClass;
          exports.DirectionStyle = DirectionStyle;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.FontClass = exports.FontStyle = undefined;

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var config = {
            scope: _parchment2.default.Scope.INLINE,
            whitelist: ['serif', 'monospace']
          };
          var FontClass = new _parchment2.default.Attributor.Class('font', 'ql-font', config);

          var FontStyleAttributor = function (_Parchment$Attributor) {
            _inherits(FontStyleAttributor, _Parchment$Attributor);

            function FontStyleAttributor() {
              _classCallCheck(this, FontStyleAttributor);

              return _possibleConstructorReturn(this, (FontStyleAttributor.__proto__ || Object.getPrototypeOf(FontStyleAttributor)).apply(this, arguments));
            }

            _createClass(FontStyleAttributor, [{
              key: 'value',
              value: function value(node) {
                return _get(FontStyleAttributor.prototype.__proto__ || Object.getPrototypeOf(FontStyleAttributor.prototype), 'value', this).call(this, node).replace(/["']/g, '');
              }
            }]);

            return FontStyleAttributor;
          }(_parchment2.default.Attributor.Style);

          var FontStyle = new FontStyleAttributor('font', 'font-family', config);
          exports.FontStyle = FontStyle;
          exports.FontClass = FontClass;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.SizeStyle = exports.SizeClass = undefined;

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          var SizeClass = new _parchment2.default.Attributor.Class('size', 'ql-size', {
            scope: _parchment2.default.Scope.INLINE,
            whitelist: ['small', 'large', 'huge']
          });
          var SizeStyle = new _parchment2.default.Attributor.Style('size', 'font-size', {
            scope: _parchment2.default.Scope.INLINE,
            whitelist: ['10px', '18px', '32px']
          });
          exports.SizeClass = SizeClass;
          exports.SizeStyle = SizeStyle;
        }, function (module, exports, __webpack_require__) {
          module.exports = {
            'align': {
              '': __webpack_require__(76),
              'center': __webpack_require__(77),
              'right': __webpack_require__(78),
              'justify': __webpack_require__(79)
            },
            'background': __webpack_require__(80),
            'blockquote': __webpack_require__(81),
            'bold': __webpack_require__(82),
            'clean': __webpack_require__(83),
            'code': __webpack_require__(58),
            'code-block': __webpack_require__(58),
            'color': __webpack_require__(84),
            'direction': {
              '': __webpack_require__(85),
              'rtl': __webpack_require__(86)
            },
            'float': {
              'center': __webpack_require__(87),
              'full': __webpack_require__(88),
              'left': __webpack_require__(89),
              'right': __webpack_require__(90)
            },
            'formula': __webpack_require__(91),
            'header': {
              '1': __webpack_require__(92),
              '2': __webpack_require__(93)
            },
            'italic': __webpack_require__(94),
            'image': __webpack_require__(95),
            'indent': {
              '+1': __webpack_require__(96),
              '-1': __webpack_require__(97)
            },
            'link': __webpack_require__(98),
            'list': {
              'ordered': __webpack_require__(99),
              'bullet': __webpack_require__(100),
              'check': __webpack_require__(101)
            },
            'script': {
              'sub': __webpack_require__(102),
              'super': __webpack_require__(103)
            },
            'strike': __webpack_require__(104),
            'underline': __webpack_require__(105),
            'video': __webpack_require__(106)
          };
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.getLastChangeIndex = exports.default = undefined;

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _quill = __webpack_require__(5);

          var _quill2 = _interopRequireDefault(_quill);

          var _module = __webpack_require__(9);

          var _module2 = _interopRequireDefault(_module);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var History = function (_Module) {
            _inherits(History, _Module);

            function History(quill, options) {
              _classCallCheck(this, History);

              var _this = _possibleConstructorReturn(this, (History.__proto__ || Object.getPrototypeOf(History)).call(this, quill, options));

              _this.lastRecorded = 0;
              _this.ignoreChange = false;

              _this.clear();

              _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (eventName, delta, oldDelta, source) {
                if (eventName !== _quill2.default.events.TEXT_CHANGE || _this.ignoreChange) return;

                if (!_this.options.userOnly || source === _quill2.default.sources.USER) {
                  _this.record(delta, oldDelta);
                } else {
                  _this.transform(delta);
                }
              });

              _this.quill.keyboard.addBinding({
                key: 'Z',
                shortKey: true
              }, _this.undo.bind(_this));

              _this.quill.keyboard.addBinding({
                key: 'Z',
                shortKey: true,
                shiftKey: true
              }, _this.redo.bind(_this));

              if (/Win/i.test(navigator.platform)) {
                _this.quill.keyboard.addBinding({
                  key: 'Y',
                  shortKey: true
                }, _this.redo.bind(_this));
              }

              return _this;
            }

            _createClass(History, [{
              key: 'change',
              value: function change(source, dest) {
                if (this.stack[source].length === 0) return;
                var delta = this.stack[source].pop();
                this.stack[dest].push(delta);
                this.lastRecorded = 0;
                this.ignoreChange = true;
                this.quill.updateContents(delta[source], _quill2.default.sources.USER);
                this.ignoreChange = false;
                var index = getLastChangeIndex(delta[source]);
                this.quill.setSelection(index);
              }
            }, {
              key: 'clear',
              value: function clear() {
                this.stack = {
                  undo: [],
                  redo: []
                };
              }
            }, {
              key: 'cutoff',
              value: function cutoff() {
                this.lastRecorded = 0;
              }
            }, {
              key: 'record',
              value: function record(changeDelta, oldDelta) {
                if (changeDelta.ops.length === 0) return;
                this.stack.redo = [];
                var undoDelta = this.quill.getContents().diff(oldDelta);
                var timestamp = Date.now();

                if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {
                  var delta = this.stack.undo.pop();
                  undoDelta = undoDelta.compose(delta.undo);
                  changeDelta = delta.redo.compose(changeDelta);
                } else {
                  this.lastRecorded = timestamp;
                }

                this.stack.undo.push({
                  redo: changeDelta,
                  undo: undoDelta
                });

                if (this.stack.undo.length > this.options.maxStack) {
                  this.stack.undo.shift();
                }
              }
            }, {
              key: 'redo',
              value: function redo() {
                this.change('redo', 'undo');
              }
            }, {
              key: 'transform',
              value: function transform(delta) {
                this.stack.undo.forEach(function (change) {
                  change.undo = delta.transform(change.undo, true);
                  change.redo = delta.transform(change.redo, true);
                });
                this.stack.redo.forEach(function (change) {
                  change.undo = delta.transform(change.undo, true);
                  change.redo = delta.transform(change.redo, true);
                });
              }
            }, {
              key: 'undo',
              value: function undo() {
                this.change('undo', 'redo');
              }
            }]);

            return History;
          }(_module2.default);

          History.DEFAULTS = {
            delay: 1000,
            maxStack: 100,
            userOnly: false
          };

          function endsWithNewlineChange(delta) {
            var lastOp = delta.ops[delta.ops.length - 1];
            if (lastOp == null) return false;

            if (lastOp.insert != null) {
              return typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\n');
            }

            if (lastOp.attributes != null) {
              return Object.keys(lastOp.attributes).some(function (attr) {
                return _parchment2.default.query(attr, _parchment2.default.Scope.BLOCK) != null;
              });
            }

            return false;
          }

          function getLastChangeIndex(delta) {
            var deleteLength = delta.reduce(function (length, op) {
              length += op.delete || 0;
              return length;
            }, 0);
            var changeIndex = delta.length() - deleteLength;

            if (endsWithNewlineChange(delta)) {
              changeIndex -= 1;
            }

            return changeIndex;
          }

          exports.default = History;
          exports.getLastChangeIndex = getLastChangeIndex;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = exports.BaseTooltip = undefined;

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _extend = __webpack_require__(3);

          var _extend2 = _interopRequireDefault(_extend);

          var _quillDelta = __webpack_require__(2);

          var _quillDelta2 = _interopRequireDefault(_quillDelta);

          var _emitter = __webpack_require__(8);

          var _emitter2 = _interopRequireDefault(_emitter);

          var _keyboard = __webpack_require__(23);

          var _keyboard2 = _interopRequireDefault(_keyboard);

          var _theme = __webpack_require__(34);

          var _theme2 = _interopRequireDefault(_theme);

          var _colorPicker = __webpack_require__(59);

          var _colorPicker2 = _interopRequireDefault(_colorPicker);

          var _iconPicker = __webpack_require__(60);

          var _iconPicker2 = _interopRequireDefault(_iconPicker);

          var _picker = __webpack_require__(28);

          var _picker2 = _interopRequireDefault(_picker);

          var _tooltip = __webpack_require__(61);

          var _tooltip2 = _interopRequireDefault(_tooltip);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var ALIGNS = [false, 'center', 'right', 'justify'];
          var COLORS = ["#000000", "#e60000", "#ff9900", "#ffff00", "#008a00", "#0066cc", "#9933ff", "#ffffff", "#facccc", "#ffebcc", "#ffffcc", "#cce8cc", "#cce0f5", "#ebd6ff", "#bbbbbb", "#f06666", "#ffc266", "#ffff66", "#66b966", "#66a3e0", "#c285ff", "#888888", "#a10000", "#b26b00", "#b2b200", "#006100", "#0047b2", "#6b24b2", "#444444", "#5c0000", "#663d00", "#666600", "#003700", "#002966", "#3d1466"];
          var FONTS = [false, 'serif', 'monospace'];
          var HEADERS = ['1', '2', '3', false];
          var SIZES = ['small', false, 'large', 'huge'];

          var BaseTheme = function (_Theme) {
            _inherits(BaseTheme, _Theme);

            function BaseTheme(quill, options) {
              _classCallCheck(this, BaseTheme);

              var _this = _possibleConstructorReturn(this, (BaseTheme.__proto__ || Object.getPrototypeOf(BaseTheme)).call(this, quill, options));

              var listener = function listener(e) {
                if (!document.body.contains(quill.root)) {
                  return document.body.removeEventListener('click', listener);
                }

                if (_this.tooltip != null && !_this.tooltip.root.contains(e.target) && document.activeElement !== _this.tooltip.textbox && !_this.quill.hasFocus()) {
                  _this.tooltip.hide();
                }

                if (_this.pickers != null) {
                  _this.pickers.forEach(function (picker) {
                    if (!picker.container.contains(e.target)) {
                      picker.close();
                    }
                  });
                }
              };

              quill.emitter.listenDOM('click', document.body, listener);
              return _this;
            }

            _createClass(BaseTheme, [{
              key: 'addModule',
              value: function addModule(name) {
                var module = _get(BaseTheme.prototype.__proto__ || Object.getPrototypeOf(BaseTheme.prototype), 'addModule', this).call(this, name);

                if (name === 'toolbar') {
                  this.extendToolbar(module);
                }

                return module;
              }
            }, {
              key: 'buildButtons',
              value: function buildButtons(buttons, icons) {
                buttons.forEach(function (button) {
                  var className = button.getAttribute('class') || '';
                  className.split(/\s+/).forEach(function (name) {
                    if (!name.startsWith('ql-')) return;
                    name = name.slice('ql-'.length);
                    if (icons[name] == null) return;

                    if (name === 'direction') {
                      button.innerHTML = icons[name][''] + icons[name]['rtl'];
                    } else if (typeof icons[name] === 'string') {
                      button.innerHTML = icons[name];
                    } else {
                      var value = button.value || '';

                      if (value != null && icons[name][value]) {
                        button.innerHTML = icons[name][value];
                      }
                    }
                  });
                });
              }
            }, {
              key: 'buildPickers',
              value: function buildPickers(selects, icons) {
                var _this2 = this;

                this.pickers = selects.map(function (select) {
                  if (select.classList.contains('ql-align')) {
                    if (select.querySelector('option') == null) {
                      fillSelect(select, ALIGNS);
                    }

                    return new _iconPicker2.default(select, icons.align);
                  } else if (select.classList.contains('ql-background') || select.classList.contains('ql-color')) {
                    var format = select.classList.contains('ql-background') ? 'background' : 'color';

                    if (select.querySelector('option') == null) {
                      fillSelect(select, COLORS, format === 'background' ? '#ffffff' : '#000000');
                    }

                    return new _colorPicker2.default(select, icons[format]);
                  } else {
                    if (select.querySelector('option') == null) {
                      if (select.classList.contains('ql-font')) {
                        fillSelect(select, FONTS);
                      } else if (select.classList.contains('ql-header')) {
                        fillSelect(select, HEADERS);
                      } else if (select.classList.contains('ql-size')) {
                        fillSelect(select, SIZES);
                      }
                    }

                    return new _picker2.default(select);
                  }
                });

                var update = function update() {
                  _this2.pickers.forEach(function (picker) {
                    picker.update();
                  });
                };

                this.quill.on(_emitter2.default.events.EDITOR_CHANGE, update);
              }
            }]);

            return BaseTheme;
          }(_theme2.default);

          BaseTheme.DEFAULTS = (0, _extend2.default)(true, {}, _theme2.default.DEFAULTS, {
            modules: {
              toolbar: {
                handlers: {
                  formula: function formula() {
                    this.quill.theme.tooltip.edit('formula');
                  },
                  image: function image() {
                    var _this3 = this;

                    var fileInput = this.container.querySelector('input.ql-image[type=file]');

                    if (fileInput == null) {
                      fileInput = document.createElement('input');
                      fileInput.setAttribute('type', 'file');
                      fileInput.setAttribute('accept', 'image/png, image/gif, image/jpeg, image/bmp, image/x-icon');
                      fileInput.classList.add('ql-image');
                      fileInput.addEventListener('change', function () {
                        if (fileInput.files != null && fileInput.files[0] != null) {
                          var reader = new FileReader();

                          reader.onload = function (e) {
                            var range = _this3.quill.getSelection(true);

                            _this3.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert({
                              image: e.target.result
                            }), _emitter2.default.sources.USER);

                            _this3.quill.setSelection(range.index + 1, _emitter2.default.sources.SILENT);

                            fileInput.value = "";
                          };

                          reader.readAsDataURL(fileInput.files[0]);
                        }
                      });
                      this.container.appendChild(fileInput);
                    }

                    fileInput.click();
                  },
                  video: function video() {
                    this.quill.theme.tooltip.edit('video');
                  }
                }
              }
            }
          });

          var BaseTooltip = function (_Tooltip) {
            _inherits(BaseTooltip, _Tooltip);

            function BaseTooltip(quill, boundsContainer) {
              _classCallCheck(this, BaseTooltip);

              var _this4 = _possibleConstructorReturn(this, (BaseTooltip.__proto__ || Object.getPrototypeOf(BaseTooltip)).call(this, quill, boundsContainer));

              _this4.textbox = _this4.root.querySelector('input[type="text"]');

              _this4.listen();

              return _this4;
            }

            _createClass(BaseTooltip, [{
              key: 'listen',
              value: function listen() {
                var _this5 = this;

                this.textbox.addEventListener('keydown', function (event) {
                  if (_keyboard2.default.match(event, 'enter')) {
                    _this5.save();

                    event.preventDefault();
                  } else if (_keyboard2.default.match(event, 'escape')) {
                    _this5.cancel();

                    event.preventDefault();
                  }
                });
              }
            }, {
              key: 'cancel',
              value: function cancel() {
                this.hide();
              }
            }, {
              key: 'edit',
              value: function edit() {
                var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'link';
                var preview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                this.root.classList.remove('ql-hidden');
                this.root.classList.add('ql-editing');

                if (preview != null) {
                  this.textbox.value = preview;
                } else if (mode !== this.root.getAttribute('data-mode')) {
                  this.textbox.value = '';
                }

                this.position(this.quill.getBounds(this.quill.selection.savedRange));
                this.textbox.select();
                this.textbox.setAttribute('placeholder', this.textbox.getAttribute('data-' + mode) || '');
                this.root.setAttribute('data-mode', mode);
              }
            }, {
              key: 'restoreFocus',
              value: function restoreFocus() {
                var scrollTop = this.quill.scrollingContainer.scrollTop;
                this.quill.focus();
                this.quill.scrollingContainer.scrollTop = scrollTop;
              }
            }, {
              key: 'save',
              value: function save() {
                var value = this.textbox.value;

                switch (this.root.getAttribute('data-mode')) {
                  case 'link':
                    {
                      var scrollTop = this.quill.root.scrollTop;

                      if (this.linkRange) {
                        this.quill.formatText(this.linkRange, 'link', value, _emitter2.default.sources.USER);
                        delete this.linkRange;
                      } else {
                        this.restoreFocus();
                        this.quill.format('link', value, _emitter2.default.sources.USER);
                      }

                      this.quill.root.scrollTop = scrollTop;
                      break;
                    }

                  case 'video':
                    {
                      value = extractVideoUrl(value);
                    }

                  case 'formula':
                    {
                      if (!value) break;
                      var range = this.quill.getSelection(true);

                      if (range != null) {
                        var index = range.index + range.length;
                        this.quill.insertEmbed(index, this.root.getAttribute('data-mode'), value, _emitter2.default.sources.USER);

                        if (this.root.getAttribute('data-mode') === 'formula') {
                          this.quill.insertText(index + 1, ' ', _emitter2.default.sources.USER);
                        }

                        this.quill.setSelection(index + 2, _emitter2.default.sources.USER);
                      }

                      break;
                    }
                }

                this.textbox.value = '';
                this.hide();
              }
            }]);

            return BaseTooltip;
          }(_tooltip2.default);

          function extractVideoUrl(url) {
            var match = url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/) || url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);

            if (match) {
              return (match[1] || 'https') + '://www.youtube.com/embed/' + match[2] + '?showinfo=0';
            }

            if (match = url.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/)) {
              return (match[1] || 'https') + '://player.vimeo.com/video/' + match[2] + '/';
            }

            return url;
          }

          function fillSelect(select, values) {
            var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            values.forEach(function (value) {
              var option = document.createElement('option');

              if (value === defaultValue) {
                option.setAttribute('selected', 'selected');
              } else {
                option.setAttribute('value', value);
              }

              select.appendChild(option);
            });
          }

          exports.BaseTooltip = BaseTooltip;
          exports.default = BaseTheme;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var LinkedList = function () {
            function LinkedList() {
              this.head = this.tail = null;
              this.length = 0;
            }

            LinkedList.prototype.append = function () {
              var nodes = [];

              for (var _i = 0; _i < arguments.length; _i++) {
                nodes[_i] = arguments[_i];
              }

              this.insertBefore(nodes[0], null);

              if (nodes.length > 1) {
                this.append.apply(this, nodes.slice(1));
              }
            };

            LinkedList.prototype.contains = function (node) {
              var cur,
                  next = this.iterator();

              while (cur = next()) {
                if (cur === node) return true;
              }

              return false;
            };

            LinkedList.prototype.insertBefore = function (node, refNode) {
              if (!node) return;
              node.next = refNode;

              if (refNode != null) {
                node.prev = refNode.prev;

                if (refNode.prev != null) {
                  refNode.prev.next = node;
                }

                refNode.prev = node;

                if (refNode === this.head) {
                  this.head = node;
                }
              } else if (this.tail != null) {
                this.tail.next = node;
                node.prev = this.tail;
                this.tail = node;
              } else {
                node.prev = null;
                this.head = this.tail = node;
              }

              this.length += 1;
            };

            LinkedList.prototype.offset = function (target) {
              var index = 0,
                  cur = this.head;

              while (cur != null) {
                if (cur === target) return index;
                index += cur.length();
                cur = cur.next;
              }

              return -1;
            };

            LinkedList.prototype.remove = function (node) {
              if (!this.contains(node)) return;
              if (node.prev != null) node.prev.next = node.next;
              if (node.next != null) node.next.prev = node.prev;
              if (node === this.head) this.head = node.next;
              if (node === this.tail) this.tail = node.prev;
              this.length -= 1;
            };

            LinkedList.prototype.iterator = function (curNode) {
              if (curNode === void 0) {
                curNode = this.head;
              }

              return function () {
                var ret = curNode;
                if (curNode != null) curNode = curNode.next;
                return ret;
              };
            };

            LinkedList.prototype.find = function (index, inclusive) {
              if (inclusive === void 0) {
                inclusive = false;
              }

              var cur,
                  next = this.iterator();

              while (cur = next()) {
                var length = cur.length();

                if (index < length || inclusive && index === length && (cur.next == null || cur.next.length() !== 0)) {
                  return [cur, index];
                }

                index -= length;
              }

              return [null, 0];
            };

            LinkedList.prototype.forEach = function (callback) {
              var cur,
                  next = this.iterator();

              while (cur = next()) {
                callback(cur);
              }
            };

            LinkedList.prototype.forEachAt = function (index, length, callback) {
              if (length <= 0) return;

              var _a = this.find(index),
                  startNode = _a[0],
                  offset = _a[1];

              var cur,
                  curIndex = index - offset,
                  next = this.iterator(startNode);

              while ((cur = next()) && curIndex < index + length) {
                var curLength = cur.length();

                if (index > curIndex) {
                  callback(cur, index - curIndex, Math.min(length, curIndex + curLength - index));
                } else {
                  callback(cur, 0, Math.min(curLength, index + length - curIndex));
                }

                curIndex += curLength;
              }
            };

            LinkedList.prototype.map = function (callback) {
              return this.reduce(function (memo, cur) {
                memo.push(callback(cur));
                return memo;
              }, []);
            };

            LinkedList.prototype.reduce = function (callback, memo) {
              var cur,
                  next = this.iterator();

              while (cur = next()) {
                memo = callback(memo, cur);
              }

              return memo;
            };

            return LinkedList;
          }();

          exports.default = LinkedList;
        }, function (module, exports, __webpack_require__) {
          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var container_1 = __webpack_require__(17);

          var Registry = __webpack_require__(1);

          var OBSERVER_CONFIG = {
            attributes: true,
            characterData: true,
            characterDataOldValue: true,
            childList: true,
            subtree: true
          };
          var MAX_OPTIMIZE_ITERATIONS = 100;

          var ScrollBlot = function (_super) {
            __extends(ScrollBlot, _super);

            function ScrollBlot(node) {
              var _this = _super.call(this, node) || this;

              _this.scroll = _this;
              _this.observer = new MutationObserver(function (mutations) {
                _this.update(mutations);
              });

              _this.observer.observe(_this.domNode, OBSERVER_CONFIG);

              _this.attach();

              return _this;
            }

            ScrollBlot.prototype.detach = function () {
              _super.prototype.detach.call(this);

              this.observer.disconnect();
            };

            ScrollBlot.prototype.deleteAt = function (index, length) {
              this.update();

              if (index === 0 && length === this.length()) {
                this.children.forEach(function (child) {
                  child.remove();
                });
              } else {
                _super.prototype.deleteAt.call(this, index, length);
              }
            };

            ScrollBlot.prototype.formatAt = function (index, length, name, value) {
              this.update();

              _super.prototype.formatAt.call(this, index, length, name, value);
            };

            ScrollBlot.prototype.insertAt = function (index, value, def) {
              this.update();

              _super.prototype.insertAt.call(this, index, value, def);
            };

            ScrollBlot.prototype.optimize = function (mutations, context) {
              var _this = this;

              if (mutations === void 0) {
                mutations = [];
              }

              if (context === void 0) {
                context = {};
              }

              _super.prototype.optimize.call(this, context);

              var records = [].slice.call(this.observer.takeRecords());

              while (records.length > 0) mutations.push(records.pop());

              var mark = function (blot, markParent) {
                if (markParent === void 0) {
                  markParent = true;
                }

                if (blot == null || blot === _this) return;
                if (blot.domNode.parentNode == null) return;

                if (blot.domNode[Registry.DATA_KEY].mutations == null) {
                  blot.domNode[Registry.DATA_KEY].mutations = [];
                }

                if (markParent) mark(blot.parent);
              };

              var optimize = function (blot) {
                if (blot.domNode[Registry.DATA_KEY] == null || blot.domNode[Registry.DATA_KEY].mutations == null) {
                  return;
                }

                if (blot instanceof container_1.default) {
                  blot.children.forEach(optimize);
                }

                blot.optimize(context);
              };

              var remaining = mutations;

              for (var i = 0; remaining.length > 0; i += 1) {
                if (i >= MAX_OPTIMIZE_ITERATIONS) {
                  throw new Error('[Parchment] Maximum optimize iterations reached');
                }

                remaining.forEach(function (mutation) {
                  var blot = Registry.find(mutation.target, true);
                  if (blot == null) return;

                  if (blot.domNode === mutation.target) {
                    if (mutation.type === 'childList') {
                      mark(Registry.find(mutation.previousSibling, false));
                      [].forEach.call(mutation.addedNodes, function (node) {
                        var child = Registry.find(node, false);
                        mark(child, false);

                        if (child instanceof container_1.default) {
                          child.children.forEach(function (grandChild) {
                            mark(grandChild, false);
                          });
                        }
                      });
                    } else if (mutation.type === 'attributes') {
                      mark(blot.prev);
                    }
                  }

                  mark(blot);
                });
                this.children.forEach(optimize);
                remaining = [].slice.call(this.observer.takeRecords());
                records = remaining.slice();

                while (records.length > 0) mutations.push(records.pop());
              }
            };

            ScrollBlot.prototype.update = function (mutations, context) {
              var _this = this;

              if (context === void 0) {
                context = {};
              }

              mutations = mutations || this.observer.takeRecords();
              mutations.map(function (mutation) {
                var blot = Registry.find(mutation.target, true);
                if (blot == null) return null;

                if (blot.domNode[Registry.DATA_KEY].mutations == null) {
                  blot.domNode[Registry.DATA_KEY].mutations = [mutation];
                  return blot;
                } else {
                  blot.domNode[Registry.DATA_KEY].mutations.push(mutation);
                  return null;
                }
              }).forEach(function (blot) {
                if (blot == null || blot === _this || blot.domNode[Registry.DATA_KEY] == null) return;
                blot.update(blot.domNode[Registry.DATA_KEY].mutations || [], context);
              });

              if (this.domNode[Registry.DATA_KEY].mutations != null) {
                _super.prototype.update.call(this, this.domNode[Registry.DATA_KEY].mutations, context);
              }

              this.optimize(mutations, context);
            };

            ScrollBlot.blotName = 'scroll';
            ScrollBlot.defaultChild = 'block';
            ScrollBlot.scope = Registry.Scope.BLOCK_BLOT;
            ScrollBlot.tagName = 'DIV';
            return ScrollBlot;
          }(container_1.default);

          exports.default = ScrollBlot;
        }, function (module, exports, __webpack_require__) {
          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var format_1 = __webpack_require__(18);

          var Registry = __webpack_require__(1);

          function isEqual(obj1, obj2) {
            if (Object.keys(obj1).length !== Object.keys(obj2).length) return false;

            for (var prop in obj1) {
              if (obj1[prop] !== obj2[prop]) return false;
            }

            return true;
          }

          var InlineBlot = function (_super) {
            __extends(InlineBlot, _super);

            function InlineBlot() {
              return _super !== null && _super.apply(this, arguments) || this;
            }

            InlineBlot.formats = function (domNode) {
              if (domNode.tagName === InlineBlot.tagName) return undefined;
              return _super.formats.call(this, domNode);
            };

            InlineBlot.prototype.format = function (name, value) {
              var _this = this;

              if (name === this.statics.blotName && !value) {
                this.children.forEach(function (child) {
                  if (!(child instanceof format_1.default)) {
                    child = child.wrap(InlineBlot.blotName, true);
                  }

                  _this.attributes.copy(child);
                });
                this.unwrap();
              } else {
                _super.prototype.format.call(this, name, value);
              }
            };

            InlineBlot.prototype.formatAt = function (index, length, name, value) {
              if (this.formats()[name] != null || Registry.query(name, Registry.Scope.ATTRIBUTE)) {
                var blot = this.isolate(index, length);
                blot.format(name, value);
              } else {
                _super.prototype.formatAt.call(this, index, length, name, value);
              }
            };

            InlineBlot.prototype.optimize = function (context) {
              _super.prototype.optimize.call(this, context);

              var formats = this.formats();

              if (Object.keys(formats).length === 0) {
                return this.unwrap();
              }

              var next = this.next;

              if (next instanceof InlineBlot && next.prev === this && isEqual(formats, next.formats())) {
                next.moveChildren(this);
                next.remove();
              }
            };

            InlineBlot.blotName = 'inline';
            InlineBlot.scope = Registry.Scope.INLINE_BLOT;
            InlineBlot.tagName = 'SPAN';
            return InlineBlot;
          }(format_1.default);

          exports.default = InlineBlot;
        }, function (module, exports, __webpack_require__) {
          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var format_1 = __webpack_require__(18);

          var Registry = __webpack_require__(1);

          var BlockBlot = function (_super) {
            __extends(BlockBlot, _super);

            function BlockBlot() {
              return _super !== null && _super.apply(this, arguments) || this;
            }

            BlockBlot.formats = function (domNode) {
              var tagName = Registry.query(BlockBlot.blotName).tagName;
              if (domNode.tagName === tagName) return undefined;
              return _super.formats.call(this, domNode);
            };

            BlockBlot.prototype.format = function (name, value) {
              if (Registry.query(name, Registry.Scope.BLOCK) == null) {
                return;
              } else if (name === this.statics.blotName && !value) {
                this.replaceWith(BlockBlot.blotName);
              } else {
                _super.prototype.format.call(this, name, value);
              }
            };

            BlockBlot.prototype.formatAt = function (index, length, name, value) {
              if (Registry.query(name, Registry.Scope.BLOCK) != null) {
                this.format(name, value);
              } else {
                _super.prototype.formatAt.call(this, index, length, name, value);
              }
            };

            BlockBlot.prototype.insertAt = function (index, value, def) {
              if (def == null || Registry.query(value, Registry.Scope.INLINE) != null) {
                _super.prototype.insertAt.call(this, index, value, def);
              } else {
                var after = this.split(index);
                var blot = Registry.create(value, def);
                after.parent.insertBefore(blot, after);
              }
            };

            BlockBlot.prototype.update = function (mutations, context) {
              if (navigator.userAgent.match(/Trident/)) {
                this.build();
              } else {
                _super.prototype.update.call(this, mutations, context);
              }
            };

            BlockBlot.blotName = 'block';
            BlockBlot.scope = Registry.Scope.BLOCK_BLOT;
            BlockBlot.tagName = 'P';
            return BlockBlot;
          }(format_1.default);

          exports.default = BlockBlot;
        }, function (module, exports, __webpack_require__) {
          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var leaf_1 = __webpack_require__(19);

          var EmbedBlot = function (_super) {
            __extends(EmbedBlot, _super);

            function EmbedBlot() {
              return _super !== null && _super.apply(this, arguments) || this;
            }

            EmbedBlot.formats = function (domNode) {
              return undefined;
            };

            EmbedBlot.prototype.format = function (name, value) {
              _super.prototype.formatAt.call(this, 0, this.length(), name, value);
            };

            EmbedBlot.prototype.formatAt = function (index, length, name, value) {
              if (index === 0 && length === this.length()) {
                this.format(name, value);
              } else {
                _super.prototype.formatAt.call(this, index, length, name, value);
              }
            };

            EmbedBlot.prototype.formats = function () {
              return this.statics.formats(this.domNode);
            };

            return EmbedBlot;
          }(leaf_1.default);

          exports.default = EmbedBlot;
        }, function (module, exports, __webpack_require__) {
          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var leaf_1 = __webpack_require__(19);

          var Registry = __webpack_require__(1);

          var TextBlot = function (_super) {
            __extends(TextBlot, _super);

            function TextBlot(node) {
              var _this = _super.call(this, node) || this;

              _this.text = _this.statics.value(_this.domNode);
              return _this;
            }

            TextBlot.create = function (value) {
              return document.createTextNode(value);
            };

            TextBlot.value = function (domNode) {
              var text = domNode.data;
              if (text['normalize']) text = text['normalize']();
              return text;
            };

            TextBlot.prototype.deleteAt = function (index, length) {
              this.domNode.data = this.text = this.text.slice(0, index) + this.text.slice(index + length);
            };

            TextBlot.prototype.index = function (node, offset) {
              if (this.domNode === node) {
                return offset;
              }

              return -1;
            };

            TextBlot.prototype.insertAt = function (index, value, def) {
              if (def == null) {
                this.text = this.text.slice(0, index) + value + this.text.slice(index);
                this.domNode.data = this.text;
              } else {
                _super.prototype.insertAt.call(this, index, value, def);
              }
            };

            TextBlot.prototype.length = function () {
              return this.text.length;
            };

            TextBlot.prototype.optimize = function (context) {
              _super.prototype.optimize.call(this, context);

              this.text = this.statics.value(this.domNode);

              if (this.text.length === 0) {
                this.remove();
              } else if (this.next instanceof TextBlot && this.next.prev === this) {
                this.insertAt(this.length(), this.next.value());
                this.next.remove();
              }
            };

            TextBlot.prototype.position = function (index, inclusive) {

              return [this.domNode, index];
            };

            TextBlot.prototype.split = function (index, force) {
              if (force === void 0) {
                force = false;
              }

              if (!force) {
                if (index === 0) return this;
                if (index === this.length()) return this.next;
              }

              var after = Registry.create(this.domNode.splitText(index));
              this.parent.insertBefore(after, this.next);
              this.text = this.statics.value(this.domNode);
              return after;
            };

            TextBlot.prototype.update = function (mutations, context) {
              var _this = this;

              if (mutations.some(function (mutation) {
                return mutation.type === 'characterData' && mutation.target === _this.domNode;
              })) {
                this.text = this.statics.value(this.domNode);
              }
            };

            TextBlot.prototype.value = function () {
              return this.text;
            };

            TextBlot.blotName = 'text';
            TextBlot.scope = Registry.Scope.INLINE_BLOT;
            return TextBlot;
          }(leaf_1.default);

          exports.default = TextBlot;
        }, function (module, exports, __webpack_require__) {
          var elem = document.createElement('div');
          elem.classList.toggle('test-class', false);

          if (elem.classList.contains('test-class')) {
            var _toggle = DOMTokenList.prototype.toggle;

            DOMTokenList.prototype.toggle = function (token, force) {
              if (arguments.length > 1 && !this.contains(token) === !force) {
                return force;
              } else {
                return _toggle.call(this, token);
              }
            };
          }

          if (!String.prototype.startsWith) {
            String.prototype.startsWith = function (searchString, position) {
              position = position || 0;
              return this.substr(position, searchString.length) === searchString;
            };
          }

          if (!String.prototype.endsWith) {
            String.prototype.endsWith = function (searchString, position) {
              var subjectString = this.toString();

              if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
                position = subjectString.length;
              }

              position -= searchString.length;
              var lastIndex = subjectString.indexOf(searchString, position);
              return lastIndex !== -1 && lastIndex === position;
            };
          }

          if (!Array.prototype.find) {
            Object.defineProperty(Array.prototype, "find", {
              value: function value(predicate) {
                if (this === null) {
                  throw new TypeError('Array.prototype.find called on null or undefined');
                }

                if (typeof predicate !== 'function') {
                  throw new TypeError('predicate must be a function');
                }

                var list = Object(this);
                var length = list.length >>> 0;
                var thisArg = arguments[1];
                var value;

                for (var i = 0; i < length; i++) {
                  value = list[i];

                  if (predicate.call(thisArg, value, i, list)) {
                    return value;
                  }
                }

                return undefined;
              }
            });
          }

          document.addEventListener("DOMContentLoaded", function () {
            document.execCommand("enableObjectResizing", false, false);
            document.execCommand("autoUrlDetect", false, false);
          });
        }, function (module, exports) {
          var DIFF_DELETE = -1;
          var DIFF_INSERT = 1;
          var DIFF_EQUAL = 0;

          function diff_main(text1, text2, cursor_pos) {
            if (text1 == text2) {
              if (text1) {
                return [[DIFF_EQUAL, text1]];
              }

              return [];
            }

            if (cursor_pos < 0 || text1.length < cursor_pos) {
              cursor_pos = null;
            }

            var commonlength = diff_commonPrefix(text1, text2);
            var commonprefix = text1.substring(0, commonlength);
            text1 = text1.substring(commonlength);
            text2 = text2.substring(commonlength);
            commonlength = diff_commonSuffix(text1, text2);
            var commonsuffix = text1.substring(text1.length - commonlength);
            text1 = text1.substring(0, text1.length - commonlength);
            text2 = text2.substring(0, text2.length - commonlength);
            var diffs = diff_compute_(text1, text2);

            if (commonprefix) {
              diffs.unshift([DIFF_EQUAL, commonprefix]);
            }

            if (commonsuffix) {
              diffs.push([DIFF_EQUAL, commonsuffix]);
            }

            diff_cleanupMerge(diffs);

            if (cursor_pos != null) {
              diffs = fix_cursor(diffs, cursor_pos);
            }

            diffs = fix_emoji(diffs);
            return diffs;
          }

          function diff_compute_(text1, text2) {
            var diffs;

            if (!text1) {
              return [[DIFF_INSERT, text2]];
            }

            if (!text2) {
              return [[DIFF_DELETE, text1]];
            }

            var longtext = text1.length > text2.length ? text1 : text2;
            var shorttext = text1.length > text2.length ? text2 : text1;
            var i = longtext.indexOf(shorttext);

            if (i != -1) {
              diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]];

              if (text1.length > text2.length) {
                diffs[0][0] = diffs[2][0] = DIFF_DELETE;
              }

              return diffs;
            }

            if (shorttext.length == 1) {
              return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
            }

            var hm = diff_halfMatch_(text1, text2);

            if (hm) {
              var text1_a = hm[0];
              var text1_b = hm[1];
              var text2_a = hm[2];
              var text2_b = hm[3];
              var mid_common = hm[4];
              var diffs_a = diff_main(text1_a, text2_a);
              var diffs_b = diff_main(text1_b, text2_b);
              return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
            }

            return diff_bisect_(text1, text2);
          }

          function diff_bisect_(text1, text2) {
            var text1_length = text1.length;
            var text2_length = text2.length;
            var max_d = Math.ceil((text1_length + text2_length) / 2);
            var v_offset = max_d;
            var v_length = 2 * max_d;
            var v1 = new Array(v_length);
            var v2 = new Array(v_length);

            for (var x = 0; x < v_length; x++) {
              v1[x] = -1;
              v2[x] = -1;
            }

            v1[v_offset + 1] = 0;
            v2[v_offset + 1] = 0;
            var delta = text1_length - text2_length;
            var front = delta % 2 != 0;
            var k1start = 0;
            var k1end = 0;
            var k2start = 0;
            var k2end = 0;

            for (var d = 0; d < max_d; d++) {
              for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
                var k1_offset = v_offset + k1;
                var x1;

                if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1]) {
                  x1 = v1[k1_offset + 1];
                } else {
                  x1 = v1[k1_offset - 1] + 1;
                }

                var y1 = x1 - k1;

                while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {
                  x1++;
                  y1++;
                }

                v1[k1_offset] = x1;

                if (x1 > text1_length) {
                  k1end += 2;
                } else if (y1 > text2_length) {
                  k1start += 2;
                } else if (front) {
                  var k2_offset = v_offset + delta - k1;

                  if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
                    var x2 = text1_length - v2[k2_offset];

                    if (x1 >= x2) {
                      return diff_bisectSplit_(text1, text2, x1, y1);
                    }
                  }
                }
              }

              for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
                var k2_offset = v_offset + k2;
                var x2;

                if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1]) {
                  x2 = v2[k2_offset + 1];
                } else {
                  x2 = v2[k2_offset - 1] + 1;
                }

                var y2 = x2 - k2;

                while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {
                  x2++;
                  y2++;
                }

                v2[k2_offset] = x2;

                if (x2 > text1_length) {
                  k2end += 2;
                } else if (y2 > text2_length) {
                  k2start += 2;
                } else if (!front) {
                  var k1_offset = v_offset + delta - k2;

                  if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
                    var x1 = v1[k1_offset];
                    var y1 = v_offset + x1 - k1_offset;
                    x2 = text1_length - x2;

                    if (x1 >= x2) {
                      return diff_bisectSplit_(text1, text2, x1, y1);
                    }
                  }
                }
              }
            }

            return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
          }

          function diff_bisectSplit_(text1, text2, x, y) {
            var text1a = text1.substring(0, x);
            var text2a = text2.substring(0, y);
            var text1b = text1.substring(x);
            var text2b = text2.substring(y);
            var diffs = diff_main(text1a, text2a);
            var diffsb = diff_main(text1b, text2b);
            return diffs.concat(diffsb);
          }

          function diff_commonPrefix(text1, text2) {
            if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
              return 0;
            }

            var pointermin = 0;
            var pointermax = Math.min(text1.length, text2.length);
            var pointermid = pointermax;
            var pointerstart = 0;

            while (pointermin < pointermid) {
              if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {
                pointermin = pointermid;
                pointerstart = pointermin;
              } else {
                pointermax = pointermid;
              }

              pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
            }

            return pointermid;
          }

          function diff_commonSuffix(text1, text2) {
            if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
              return 0;
            }

            var pointermin = 0;
            var pointermax = Math.min(text1.length, text2.length);
            var pointermid = pointermax;
            var pointerend = 0;

            while (pointermin < pointermid) {
              if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {
                pointermin = pointermid;
                pointerend = pointermin;
              } else {
                pointermax = pointermid;
              }

              pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
            }

            return pointermid;
          }

          function diff_halfMatch_(text1, text2) {
            var longtext = text1.length > text2.length ? text1 : text2;
            var shorttext = text1.length > text2.length ? text2 : text1;

            if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
              return null;
            }

            function diff_halfMatchI_(longtext, shorttext, i) {
              var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
              var j = -1;
              var best_common = '';
              var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;

              while ((j = shorttext.indexOf(seed, j + 1)) != -1) {
                var prefixLength = diff_commonPrefix(longtext.substring(i), shorttext.substring(j));
                var suffixLength = diff_commonSuffix(longtext.substring(0, i), shorttext.substring(0, j));

                if (best_common.length < suffixLength + prefixLength) {
                  best_common = shorttext.substring(j - suffixLength, j) + shorttext.substring(j, j + prefixLength);
                  best_longtext_a = longtext.substring(0, i - suffixLength);
                  best_longtext_b = longtext.substring(i + prefixLength);
                  best_shorttext_a = shorttext.substring(0, j - suffixLength);
                  best_shorttext_b = shorttext.substring(j + prefixLength);
                }
              }

              if (best_common.length * 2 >= longtext.length) {
                return [best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b, best_common];
              } else {
                return null;
              }
            }

            var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));
            var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));
            var hm;

            if (!hm1 && !hm2) {
              return null;
            } else if (!hm2) {
              hm = hm1;
            } else if (!hm1) {
              hm = hm2;
            } else {
              hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
            }

            var text1_a, text1_b, text2_a, text2_b;

            if (text1.length > text2.length) {
              text1_a = hm[0];
              text1_b = hm[1];
              text2_a = hm[2];
              text2_b = hm[3];
            } else {
              text2_a = hm[0];
              text2_b = hm[1];
              text1_a = hm[2];
              text1_b = hm[3];
            }

            var mid_common = hm[4];
            return [text1_a, text1_b, text2_a, text2_b, mid_common];
          }

          function diff_cleanupMerge(diffs) {
            diffs.push([DIFF_EQUAL, '']);
            var pointer = 0;
            var count_delete = 0;
            var count_insert = 0;
            var text_delete = '';
            var text_insert = '';
            var commonlength;

            while (pointer < diffs.length) {
              switch (diffs[pointer][0]) {
                case DIFF_INSERT:
                  count_insert++;
                  text_insert += diffs[pointer][1];
                  pointer++;
                  break;

                case DIFF_DELETE:
                  count_delete++;
                  text_delete += diffs[pointer][1];
                  pointer++;
                  break;

                case DIFF_EQUAL:
                  if (count_delete + count_insert > 1) {
                    if (count_delete !== 0 && count_insert !== 0) {
                      commonlength = diff_commonPrefix(text_insert, text_delete);

                      if (commonlength !== 0) {
                        if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {
                          diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);
                        } else {
                          diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);
                          pointer++;
                        }

                        text_insert = text_insert.substring(commonlength);
                        text_delete = text_delete.substring(commonlength);
                      }

                      commonlength = diff_commonSuffix(text_insert, text_delete);

                      if (commonlength !== 0) {
                        diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];
                        text_insert = text_insert.substring(0, text_insert.length - commonlength);
                        text_delete = text_delete.substring(0, text_delete.length - commonlength);
                      }
                    }

                    if (count_delete === 0) {
                      diffs.splice(pointer - count_insert, count_delete + count_insert, [DIFF_INSERT, text_insert]);
                    } else if (count_insert === 0) {
                      diffs.splice(pointer - count_delete, count_delete + count_insert, [DIFF_DELETE, text_delete]);
                    } else {
                      diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);
                    }

                    pointer = pointer - count_delete - count_insert + (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;
                  } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
                    diffs[pointer - 1][1] += diffs[pointer][1];
                    diffs.splice(pointer, 1);
                  } else {
                    pointer++;
                  }

                  count_insert = 0;
                  count_delete = 0;
                  text_delete = '';
                  text_insert = '';
                  break;
              }
            }

            if (diffs[diffs.length - 1][1] === '') {
              diffs.pop();
            }

            var changes = false;
            pointer = 1;

            while (pointer < diffs.length - 1) {
              if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {
                if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
                  diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);
                  diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
                  diffs.splice(pointer - 1, 1);
                  changes = true;
                } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {
                  diffs[pointer - 1][1] += diffs[pointer + 1][1];
                  diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];
                  diffs.splice(pointer + 1, 1);
                  changes = true;
                }
              }

              pointer++;
            }

            if (changes) {
              diff_cleanupMerge(diffs);
            }
          }

          var diff = diff_main;
          diff.INSERT = DIFF_INSERT;
          diff.DELETE = DIFF_DELETE;
          diff.EQUAL = DIFF_EQUAL;
          module.exports = diff;

          function cursor_normalize_diff(diffs, cursor_pos) {
            if (cursor_pos === 0) {
              return [DIFF_EQUAL, diffs];
            }

            for (var current_pos = 0, i = 0; i < diffs.length; i++) {
              var d = diffs[i];

              if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {
                var next_pos = current_pos + d[1].length;

                if (cursor_pos === next_pos) {
                  return [i + 1, diffs];
                } else if (cursor_pos < next_pos) {
                  diffs = diffs.slice();
                  var split_pos = cursor_pos - current_pos;
                  var d_left = [d[0], d[1].slice(0, split_pos)];
                  var d_right = [d[0], d[1].slice(split_pos)];
                  diffs.splice(i, 1, d_left, d_right);
                  return [i + 1, diffs];
                } else {
                  current_pos = next_pos;
                }
              }
            }

            throw new Error('cursor_pos is out of bounds!');
          }

          function fix_cursor(diffs, cursor_pos) {
            var norm = cursor_normalize_diff(diffs, cursor_pos);
            var ndiffs = norm[1];
            var cursor_pointer = norm[0];
            var d = ndiffs[cursor_pointer];
            var d_next = ndiffs[cursor_pointer + 1];

            if (d == null) {
              return diffs;
            } else if (d[0] !== DIFF_EQUAL) {
              return diffs;
            } else {
              if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {
                ndiffs.splice(cursor_pointer, 2, d_next, d);
                return merge_tuples(ndiffs, cursor_pointer, 2);
              } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {
                ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);
                var suffix = d_next[1].slice(d[1].length);

                if (suffix.length > 0) {
                  ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);
                }

                return merge_tuples(ndiffs, cursor_pointer, 3);
              } else {
                return diffs;
              }
            }
          }

          function fix_emoji(diffs) {
            var compact = false;

            var starts_with_pair_end = function (str) {
              return str.charCodeAt(0) >= 0xDC00 && str.charCodeAt(0) <= 0xDFFF;
            };

            var ends_with_pair_start = function (str) {
              return str.charCodeAt(str.length - 1) >= 0xD800 && str.charCodeAt(str.length - 1) <= 0xDBFF;
            };

            for (var i = 2; i < diffs.length; i += 1) {
              if (diffs[i - 2][0] === DIFF_EQUAL && ends_with_pair_start(diffs[i - 2][1]) && diffs[i - 1][0] === DIFF_DELETE && starts_with_pair_end(diffs[i - 1][1]) && diffs[i][0] === DIFF_INSERT && starts_with_pair_end(diffs[i][1])) {
                compact = true;
                diffs[i - 1][1] = diffs[i - 2][1].slice(-1) + diffs[i - 1][1];
                diffs[i][1] = diffs[i - 2][1].slice(-1) + diffs[i][1];
                diffs[i - 2][1] = diffs[i - 2][1].slice(0, -1);
              }
            }

            if (!compact) {
              return diffs;
            }

            var fixed_diffs = [];

            for (var i = 0; i < diffs.length; i += 1) {
              if (diffs[i][1].length > 0) {
                fixed_diffs.push(diffs[i]);
              }
            }

            return fixed_diffs;
          }

          function merge_tuples(diffs, start, length) {
            for (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {
              if (i + 1 < diffs.length) {
                var left_d = diffs[i];
                var right_d = diffs[i + 1];

                if (left_d[0] === right_d[1]) {
                  diffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);
                }
              }
            }

            return diffs;
          }
        }, function (module, exports) {
          exports = module.exports = typeof Object.keys === 'function' ? Object.keys : shim;
          exports.shim = shim;

          function shim(obj) {
            var keys = [];

            for (var key in obj) keys.push(key);

            return keys;
          }
        }, function (module, exports) {
          var supportsArgumentsClass = function () {
            return Object.prototype.toString.call(arguments);
          }() == '[object Arguments]';

          exports = module.exports = supportsArgumentsClass ? supported : unsupported;
          exports.supported = supported;

          function supported(object) {
            return Object.prototype.toString.call(object) == '[object Arguments]';
          }

          exports.unsupported = unsupported;

          function unsupported(object) {
            return object && typeof object == 'object' && typeof object.length == 'number' && Object.prototype.hasOwnProperty.call(object, 'callee') && !Object.prototype.propertyIsEnumerable.call(object, 'callee') || false;
          }
        }, function (module, exports) {
          var has = Object.prototype.hasOwnProperty,
              prefix = '~';

          function Events() {}

          if (Object.create) {
            Events.prototype = Object.create(null);
            if (!new Events().__proto__) prefix = false;
          }

          function EE(fn, context, once) {
            this.fn = fn;
            this.context = context;
            this.once = once || false;
          }

          function EventEmitter() {
            this._events = new Events();
            this._eventsCount = 0;
          }

          EventEmitter.prototype.eventNames = function eventNames() {
            var names = [],
                events,
                name;
            if (this._eventsCount === 0) return names;

            for (name in events = this._events) {
              if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
            }

            if (Object.getOwnPropertySymbols) {
              return names.concat(Object.getOwnPropertySymbols(events));
            }

            return names;
          };

          EventEmitter.prototype.listeners = function listeners(event, exists) {
            var evt = prefix ? prefix + event : event,
                available = this._events[evt];
            if (exists) return !!available;
            if (!available) return [];
            if (available.fn) return [available.fn];

            for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
              ee[i] = available[i].fn;
            }

            return ee;
          };

          EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
            var evt = prefix ? prefix + event : event;
            if (!this._events[evt]) return false;
            var listeners = this._events[evt],
                len = arguments.length,
                args,
                i;

            if (listeners.fn) {
              if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

              switch (len) {
                case 1:
                  return listeners.fn.call(listeners.context), true;

                case 2:
                  return listeners.fn.call(listeners.context, a1), true;

                case 3:
                  return listeners.fn.call(listeners.context, a1, a2), true;

                case 4:
                  return listeners.fn.call(listeners.context, a1, a2, a3), true;

                case 5:
                  return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;

                case 6:
                  return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
              }

              for (i = 1, args = new Array(len - 1); i < len; i++) {
                args[i - 1] = arguments[i];
              }

              listeners.fn.apply(listeners.context, args);
            } else {
              var length = listeners.length,
                  j;

              for (i = 0; i < length; i++) {
                if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

                switch (len) {
                  case 1:
                    listeners[i].fn.call(listeners[i].context);
                    break;

                  case 2:
                    listeners[i].fn.call(listeners[i].context, a1);
                    break;

                  case 3:
                    listeners[i].fn.call(listeners[i].context, a1, a2);
                    break;

                  case 4:
                    listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                    break;

                  default:
                    if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                      args[j - 1] = arguments[j];
                    }
                    listeners[i].fn.apply(listeners[i].context, args);
                }
              }
            }

            return true;
          };

          EventEmitter.prototype.on = function on(event, fn, context) {
            var listener = new EE(fn, context || this),
                evt = prefix ? prefix + event : event;
            if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;else if (!this._events[evt].fn) this._events[evt].push(listener);else this._events[evt] = [this._events[evt], listener];
            return this;
          };

          EventEmitter.prototype.once = function once(event, fn, context) {
            var listener = new EE(fn, context || this, true),
                evt = prefix ? prefix + event : event;
            if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;else if (!this._events[evt].fn) this._events[evt].push(listener);else this._events[evt] = [this._events[evt], listener];
            return this;
          };

          EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
            var evt = prefix ? prefix + event : event;
            if (!this._events[evt]) return this;

            if (!fn) {
              if (--this._eventsCount === 0) this._events = new Events();else delete this._events[evt];
              return this;
            }

            var listeners = this._events[evt];

            if (listeners.fn) {
              if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
                if (--this._eventsCount === 0) this._events = new Events();else delete this._events[evt];
              }
            } else {
              for (var i = 0, events = [], length = listeners.length; i < length; i++) {
                if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
                  events.push(listeners[i]);
                }
              }

              if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else if (--this._eventsCount === 0) this._events = new Events();else delete this._events[evt];
            }

            return this;
          };

          EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
            var evt;

            if (event) {
              evt = prefix ? prefix + event : event;

              if (this._events[evt]) {
                if (--this._eventsCount === 0) this._events = new Events();else delete this._events[evt];
              }
            } else {
              this._events = new Events();
              this._eventsCount = 0;
            }

            return this;
          };

          EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
          EventEmitter.prototype.addListener = EventEmitter.prototype.on;

          EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
            return this;
          };

          EventEmitter.prefixed = prefix;
          EventEmitter.EventEmitter = EventEmitter;

          if ('undefined' !== typeof module) {
            module.exports = EventEmitter;
          }
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.matchText = exports.matchSpacing = exports.matchNewline = exports.matchBlot = exports.matchAttributor = exports.default = undefined;

          var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
            return typeof obj;
          } : function (obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };

          var _slicedToArray = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;

              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _extend2 = __webpack_require__(3);

          var _extend3 = _interopRequireDefault(_extend2);

          var _quillDelta = __webpack_require__(2);

          var _quillDelta2 = _interopRequireDefault(_quillDelta);

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _quill = __webpack_require__(5);

          var _quill2 = _interopRequireDefault(_quill);

          var _logger = __webpack_require__(10);

          var _logger2 = _interopRequireDefault(_logger);

          var _module = __webpack_require__(9);

          var _module2 = _interopRequireDefault(_module);

          var _align = __webpack_require__(36);

          var _background = __webpack_require__(37);

          var _code = __webpack_require__(13);

          var _code2 = _interopRequireDefault(_code);

          var _color = __webpack_require__(26);

          var _direction = __webpack_require__(38);

          var _font = __webpack_require__(39);

          var _size = __webpack_require__(40);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
              });
            } else {
              obj[key] = value;
            }

            return obj;
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var debug = (0, _logger2.default)('quill:clipboard');
          var DOM_KEY = '__ql-matcher';
          var CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], [Node.TEXT_NODE, matchNewline], ['br', matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchSpacing], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ['li', matchIndent], ['b', matchAlias.bind(matchAlias, 'bold')], ['i', matchAlias.bind(matchAlias, 'italic')], ['style', matchIgnore]];
          var ATTRIBUTE_ATTRIBUTORS = [_align.AlignAttribute, _direction.DirectionAttribute].reduce(function (memo, attr) {
            memo[attr.keyName] = attr;
            return memo;
          }, {});
          var STYLE_ATTRIBUTORS = [_align.AlignStyle, _background.BackgroundStyle, _color.ColorStyle, _direction.DirectionStyle, _font.FontStyle, _size.SizeStyle].reduce(function (memo, attr) {
            memo[attr.keyName] = attr;
            return memo;
          }, {});

          var Clipboard = function (_Module) {
            _inherits(Clipboard, _Module);

            function Clipboard(quill, options) {
              _classCallCheck(this, Clipboard);

              var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this, quill, options));

              _this.quill.root.addEventListener('paste', _this.onPaste.bind(_this));

              _this.container = _this.quill.addContainer('ql-clipboard');

              _this.container.setAttribute('contenteditable', true);

              _this.container.setAttribute('tabindex', -1);

              _this.matchers = [];
              CLIPBOARD_CONFIG.concat(_this.options.matchers).forEach(function (_ref) {
                var _ref2 = _slicedToArray(_ref, 2),
                    selector = _ref2[0],
                    matcher = _ref2[1];

                if (!options.matchVisual && matcher === matchSpacing) return;

                _this.addMatcher(selector, matcher);
              });
              return _this;
            }

            _createClass(Clipboard, [{
              key: 'addMatcher',
              value: function addMatcher(selector, matcher) {
                this.matchers.push([selector, matcher]);
              }
            }, {
              key: 'convert',
              value: function convert(html) {
                if (typeof html === 'string') {
                  this.container.innerHTML = html.replace(/\>\r?\n +\</g, '><');
                  return this.convert();
                }

                var formats = this.quill.getFormat(this.quill.selection.savedRange.index);

                if (formats[_code2.default.blotName]) {
                  var text = this.container.innerText;
                  this.container.innerHTML = '';
                  return new _quillDelta2.default().insert(text, _defineProperty({}, _code2.default.blotName, formats[_code2.default.blotName]));
                }

                var _prepareMatching = this.prepareMatching(),
                    _prepareMatching2 = _slicedToArray(_prepareMatching, 2),
                    elementMatchers = _prepareMatching2[0],
                    textMatchers = _prepareMatching2[1];

                var delta = traverse(this.container, elementMatchers, textMatchers);

                if (deltaEndsWith(delta, '\n') && delta.ops[delta.ops.length - 1].attributes == null) {
                  delta = delta.compose(new _quillDelta2.default().retain(delta.length() - 1).delete(1));
                }

                debug.log('convert', this.container.innerHTML, delta);
                this.container.innerHTML = '';
                return delta;
              }
            }, {
              key: 'dangerouslyPasteHTML',
              value: function dangerouslyPasteHTML(index, html) {
                var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _quill2.default.sources.API;

                if (typeof index === 'string') {
                  this.quill.setContents(this.convert(index), html);
                  this.quill.setSelection(0, _quill2.default.sources.SILENT);
                } else {
                  var paste = this.convert(html);
                  this.quill.updateContents(new _quillDelta2.default().retain(index).concat(paste), source);
                  this.quill.setSelection(index + paste.length(), _quill2.default.sources.SILENT);
                }
              }
            }, {
              key: 'onPaste',
              value: function onPaste(e) {
                var _this2 = this;

                if (e.defaultPrevented || !this.quill.isEnabled()) return;
                var range = this.quill.getSelection();
                var delta = new _quillDelta2.default().retain(range.index);
                var scrollTop = this.quill.scrollingContainer.scrollTop;
                this.container.focus();
                this.quill.selection.update(_quill2.default.sources.SILENT);
                setTimeout(function () {
                  delta = delta.concat(_this2.convert()).delete(range.length);

                  _this2.quill.updateContents(delta, _quill2.default.sources.USER);

                  _this2.quill.setSelection(delta.length() - range.length, _quill2.default.sources.SILENT);

                  _this2.quill.scrollingContainer.scrollTop = scrollTop;

                  _this2.quill.focus();
                }, 1);
              }
            }, {
              key: 'prepareMatching',
              value: function prepareMatching() {
                var _this3 = this;

                var elementMatchers = [],
                    textMatchers = [];
                this.matchers.forEach(function (pair) {
                  var _pair = _slicedToArray(pair, 2),
                      selector = _pair[0],
                      matcher = _pair[1];

                  switch (selector) {
                    case Node.TEXT_NODE:
                      textMatchers.push(matcher);
                      break;

                    case Node.ELEMENT_NODE:
                      elementMatchers.push(matcher);
                      break;

                    default:
                      [].forEach.call(_this3.container.querySelectorAll(selector), function (node) {
                        node[DOM_KEY] = node[DOM_KEY] || [];
                        node[DOM_KEY].push(matcher);
                      });
                      break;
                  }
                });
                return [elementMatchers, textMatchers];
              }
            }]);

            return Clipboard;
          }(_module2.default);

          Clipboard.DEFAULTS = {
            matchers: [],
            matchVisual: true
          };

          function applyFormat(delta, format, value) {
            if ((typeof format === 'undefined' ? 'undefined' : _typeof(format)) === 'object') {
              return Object.keys(format).reduce(function (delta, key) {
                return applyFormat(delta, key, format[key]);
              }, delta);
            } else {
              return delta.reduce(function (delta, op) {
                if (op.attributes && op.attributes[format]) {
                  return delta.push(op);
                } else {
                  return delta.insert(op.insert, (0, _extend3.default)({}, _defineProperty({}, format, value), op.attributes));
                }
              }, new _quillDelta2.default());
            }
          }

          function computeStyle(node) {
            if (node.nodeType !== Node.ELEMENT_NODE) return {};
            var DOM_KEY = '__ql-computed-style';
            return node[DOM_KEY] || (node[DOM_KEY] = window.getComputedStyle(node));
          }

          function deltaEndsWith(delta, text) {
            var endText = "";

            for (var i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i) {
              var op = delta.ops[i];
              if (typeof op.insert !== 'string') break;
              endText = op.insert + endText;
            }

            return endText.slice(-1 * text.length) === text;
          }

          function isLine(node) {
            if (node.childNodes.length === 0) return false;
            var style = computeStyle(node);
            return ['block', 'list-item'].indexOf(style.display) > -1;
          }

          function traverse(node, elementMatchers, textMatchers) {
            if (node.nodeType === node.TEXT_NODE) {
              return textMatchers.reduce(function (delta, matcher) {
                return matcher(node, delta);
              }, new _quillDelta2.default());
            } else if (node.nodeType === node.ELEMENT_NODE) {
              return [].reduce.call(node.childNodes || [], function (delta, childNode) {
                var childrenDelta = traverse(childNode, elementMatchers, textMatchers);

                if (childNode.nodeType === node.ELEMENT_NODE) {
                  childrenDelta = elementMatchers.reduce(function (childrenDelta, matcher) {
                    return matcher(childNode, childrenDelta);
                  }, childrenDelta);
                  childrenDelta = (childNode[DOM_KEY] || []).reduce(function (childrenDelta, matcher) {
                    return matcher(childNode, childrenDelta);
                  }, childrenDelta);
                }

                return delta.concat(childrenDelta);
              }, new _quillDelta2.default());
            } else {
              return new _quillDelta2.default();
            }
          }

          function matchAlias(format, node, delta) {
            return applyFormat(delta, format, true);
          }

          function matchAttributor(node, delta) {
            var attributes = _parchment2.default.Attributor.Attribute.keys(node);

            var classes = _parchment2.default.Attributor.Class.keys(node);

            var styles = _parchment2.default.Attributor.Style.keys(node);

            var formats = {};
            attributes.concat(classes).concat(styles).forEach(function (name) {
              var attr = _parchment2.default.query(name, _parchment2.default.Scope.ATTRIBUTE);

              if (attr != null) {
                formats[attr.attrName] = attr.value(node);
                if (formats[attr.attrName]) return;
              }

              attr = ATTRIBUTE_ATTRIBUTORS[name];

              if (attr != null && (attr.attrName === name || attr.keyName === name)) {
                formats[attr.attrName] = attr.value(node) || undefined;
              }

              attr = STYLE_ATTRIBUTORS[name];

              if (attr != null && (attr.attrName === name || attr.keyName === name)) {
                attr = STYLE_ATTRIBUTORS[name];
                formats[attr.attrName] = attr.value(node) || undefined;
              }
            });

            if (Object.keys(formats).length > 0) {
              delta = applyFormat(delta, formats);
            }

            return delta;
          }

          function matchBlot(node, delta) {
            var match = _parchment2.default.query(node);

            if (match == null) return delta;

            if (match.prototype instanceof _parchment2.default.Embed) {
              var embed = {};
              var value = match.value(node);

              if (value != null) {
                embed[match.blotName] = value;
                delta = new _quillDelta2.default().insert(embed, match.formats(node));
              }
            } else if (typeof match.formats === 'function') {
              delta = applyFormat(delta, match.blotName, match.formats(node));
            }

            return delta;
          }

          function matchBreak(node, delta) {
            if (!deltaEndsWith(delta, '\n')) {
              delta.insert('\n');
            }

            return delta;
          }

          function matchIgnore() {
            return new _quillDelta2.default();
          }

          function matchIndent(node, delta) {
            var match = _parchment2.default.query(node);

            if (match == null || match.blotName !== 'list-item' || !deltaEndsWith(delta, '\n')) {
              return delta;
            }

            var indent = -1,
                parent = node.parentNode;

            while (!parent.classList.contains('ql-clipboard')) {
              if ((_parchment2.default.query(parent) || {}).blotName === 'list') {
                indent += 1;
              }

              parent = parent.parentNode;
            }

            if (indent <= 0) return delta;
            return delta.compose(new _quillDelta2.default().retain(delta.length() - 1).retain(1, {
              indent: indent
            }));
          }

          function matchNewline(node, delta) {
            if (!deltaEndsWith(delta, '\n')) {
              if (isLine(node) || delta.length() > 0 && node.nextSibling && isLine(node.nextSibling)) {
                delta.insert('\n');
              }
            }

            return delta;
          }

          function matchSpacing(node, delta) {
            if (isLine(node) && node.nextElementSibling != null && !deltaEndsWith(delta, '\n\n')) {
              var nodeHeight = node.offsetHeight + parseFloat(computeStyle(node).marginTop) + parseFloat(computeStyle(node).marginBottom);

              if (node.nextElementSibling.offsetTop > node.offsetTop + nodeHeight * 1.5) {
                delta.insert('\n');
              }
            }

            return delta;
          }

          function matchStyles(node, delta) {
            var formats = {};
            var style = node.style || {};

            if (style.fontStyle && computeStyle(node).fontStyle === 'italic') {
              formats.italic = true;
            }

            if (style.fontWeight && (computeStyle(node).fontWeight.startsWith('bold') || parseInt(computeStyle(node).fontWeight) >= 700)) {
              formats.bold = true;
            }

            if (Object.keys(formats).length > 0) {
              delta = applyFormat(delta, formats);
            }

            if (parseFloat(style.textIndent || 0) > 0) {
              delta = new _quillDelta2.default().insert('\t').concat(delta);
            }

            return delta;
          }

          function matchText(node, delta) {
            var text = node.data;

            if (node.parentNode.tagName === 'O:P') {
              return delta.insert(text.trim());
            }

            if (text.trim().length === 0 && node.parentNode.classList.contains('ql-clipboard')) {
              return delta;
            }

            if (!computeStyle(node.parentNode).whiteSpace.startsWith('pre')) {
              var replacer = function replacer(collapse, match) {
                match = match.replace(/[^\u00a0]/g, '');
                return match.length < 1 && collapse ? ' ' : match;
              };

              text = text.replace(/\r\n/g, ' ').replace(/\n/g, ' ');
              text = text.replace(/\s\s+/g, replacer.bind(replacer, true));

              if (node.previousSibling == null && isLine(node.parentNode) || node.previousSibling != null && isLine(node.previousSibling)) {
                text = text.replace(/^\s+/, replacer.bind(replacer, false));
              }

              if (node.nextSibling == null && isLine(node.parentNode) || node.nextSibling != null && isLine(node.nextSibling)) {
                text = text.replace(/\s+$/, replacer.bind(replacer, false));
              }
            }

            return delta.insert(text);
          }

          exports.default = Clipboard;
          exports.matchAttributor = matchAttributor;
          exports.matchBlot = matchBlot;
          exports.matchNewline = matchNewline;
          exports.matchSpacing = matchSpacing;
          exports.matchText = matchText;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _inline = __webpack_require__(6);

          var _inline2 = _interopRequireDefault(_inline);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Bold = function (_Inline) {
            _inherits(Bold, _Inline);

            function Bold() {
              _classCallCheck(this, Bold);

              return _possibleConstructorReturn(this, (Bold.__proto__ || Object.getPrototypeOf(Bold)).apply(this, arguments));
            }

            _createClass(Bold, [{
              key: 'optimize',
              value: function optimize(context) {
                _get(Bold.prototype.__proto__ || Object.getPrototypeOf(Bold.prototype), 'optimize', this).call(this, context);

                if (this.domNode.tagName !== this.statics.tagName[0]) {
                  this.replaceWith(this.statics.blotName);
                }
              }
            }], [{
              key: 'create',
              value: function create() {
                return _get(Bold.__proto__ || Object.getPrototypeOf(Bold), 'create', this).call(this);
              }
            }, {
              key: 'formats',
              value: function formats() {
                return true;
              }
            }]);

            return Bold;
          }(_inline2.default);

          Bold.blotName = 'bold';
          Bold.tagName = ['STRONG', 'B'];
          exports.default = Bold;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.addControls = exports.default = undefined;

          var _slicedToArray = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;

              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _quillDelta = __webpack_require__(2);

          var _quillDelta2 = _interopRequireDefault(_quillDelta);

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _quill = __webpack_require__(5);

          var _quill2 = _interopRequireDefault(_quill);

          var _logger = __webpack_require__(10);

          var _logger2 = _interopRequireDefault(_logger);

          var _module = __webpack_require__(9);

          var _module2 = _interopRequireDefault(_module);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
              });
            } else {
              obj[key] = value;
            }

            return obj;
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var debug = (0, _logger2.default)('quill:toolbar');

          var Toolbar = function (_Module) {
            _inherits(Toolbar, _Module);

            function Toolbar(quill, options) {
              _classCallCheck(this, Toolbar);

              var _this = _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).call(this, quill, options));

              if (Array.isArray(_this.options.container)) {
                var container = document.createElement('div');
                addControls(container, _this.options.container);
                quill.container.parentNode.insertBefore(container, quill.container);
                _this.container = container;
              } else if (typeof _this.options.container === 'string') {
                _this.container = document.querySelector(_this.options.container);
              } else {
                _this.container = _this.options.container;
              }

              if (!(_this.container instanceof HTMLElement)) {
                var _ret;

                return _ret = debug.error('Container required for toolbar', _this.options), _possibleConstructorReturn(_this, _ret);
              }

              _this.container.classList.add('ql-toolbar');

              _this.controls = [];
              _this.handlers = {};
              Object.keys(_this.options.handlers).forEach(function (format) {
                _this.addHandler(format, _this.options.handlers[format]);
              });
              [].forEach.call(_this.container.querySelectorAll('button, select'), function (input) {
                _this.attach(input);
              });

              _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (type, range) {
                if (type === _quill2.default.events.SELECTION_CHANGE) {
                  _this.update(range);
                }
              });

              _this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {
                var _this$quill$selection = _this.quill.selection.getRange(),
                    _this$quill$selection2 = _slicedToArray(_this$quill$selection, 1),
                    range = _this$quill$selection2[0];

                _this.update(range);
              });

              return _this;
            }

            _createClass(Toolbar, [{
              key: 'addHandler',
              value: function addHandler(format, handler) {
                this.handlers[format] = handler;
              }
            }, {
              key: 'attach',
              value: function attach(input) {
                var _this2 = this;

                var format = [].find.call(input.classList, function (className) {
                  return className.indexOf('ql-') === 0;
                });
                if (!format) return;
                format = format.slice('ql-'.length);

                if (input.tagName === 'BUTTON') {
                  input.setAttribute('type', 'button');
                }

                if (this.handlers[format] == null) {
                  if (this.quill.scroll.whitelist != null && this.quill.scroll.whitelist[format] == null) {
                    debug.warn('ignoring attaching to disabled format', format, input);
                    return;
                  }

                  if (_parchment2.default.query(format) == null) {
                    debug.warn('ignoring attaching to nonexistent format', format, input);
                    return;
                  }
                }

                var eventName = input.tagName === 'SELECT' ? 'change' : 'click';
                input.addEventListener(eventName, function (e) {
                  var value = void 0;

                  if (input.tagName === 'SELECT') {
                    if (input.selectedIndex < 0) return;
                    var selected = input.options[input.selectedIndex];

                    if (selected.hasAttribute('selected')) {
                      value = false;
                    } else {
                      value = selected.value || false;
                    }
                  } else {
                    if (input.classList.contains('ql-active')) {
                      value = false;
                    } else {
                      value = input.value || !input.hasAttribute('value');
                    }

                    e.preventDefault();
                  }

                  _this2.quill.focus();

                  var _quill$selection$getR = _this2.quill.selection.getRange(),
                      _quill$selection$getR2 = _slicedToArray(_quill$selection$getR, 1),
                      range = _quill$selection$getR2[0];

                  if (_this2.handlers[format] != null) {
                    _this2.handlers[format].call(_this2, value);
                  } else if (_parchment2.default.query(format).prototype instanceof _parchment2.default.Embed) {
                    value = prompt('Enter ' + format);
                    if (!value) return;

                    _this2.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert(_defineProperty({}, format, value)), _quill2.default.sources.USER);
                  } else {
                    _this2.quill.format(format, value, _quill2.default.sources.USER);
                  }

                  _this2.update(range);
                });
                this.controls.push([format, input]);
              }
            }, {
              key: 'update',
              value: function update(range) {
                var formats = range == null ? {} : this.quill.getFormat(range);
                this.controls.forEach(function (pair) {
                  var _pair = _slicedToArray(pair, 2),
                      format = _pair[0],
                      input = _pair[1];

                  if (input.tagName === 'SELECT') {
                    var option = void 0;

                    if (range == null) {
                      option = null;
                    } else if (formats[format] == null) {
                      option = input.querySelector('option[selected]');
                    } else if (!Array.isArray(formats[format])) {
                      var value = formats[format];

                      if (typeof value === 'string') {
                        value = value.replace(/\"/g, '\\"');
                      }

                      option = input.querySelector('option[value="' + value + '"]');
                    }

                    if (option == null) {
                      input.value = '';
                      input.selectedIndex = -1;
                    } else {
                      option.selected = true;
                    }
                  } else {
                    if (range == null) {
                      input.classList.remove('ql-active');
                    } else if (input.hasAttribute('value')) {
                      var isActive = formats[format] === input.getAttribute('value') || formats[format] != null && formats[format].toString() === input.getAttribute('value') || formats[format] == null && !input.getAttribute('value');
                      input.classList.toggle('ql-active', isActive);
                    } else {
                      input.classList.toggle('ql-active', formats[format] != null);
                    }
                  }
                });
              }
            }]);

            return Toolbar;
          }(_module2.default);

          Toolbar.DEFAULTS = {};

          function addButton(container, format, value) {
            var input = document.createElement('button');
            input.setAttribute('type', 'button');
            input.classList.add('ql-' + format);

            if (value != null) {
              input.value = value;
            }

            container.appendChild(input);
          }

          function addControls(container, groups) {
            if (!Array.isArray(groups[0])) {
              groups = [groups];
            }

            groups.forEach(function (controls) {
              var group = document.createElement('span');
              group.classList.add('ql-formats');
              controls.forEach(function (control) {
                if (typeof control === 'string') {
                  addButton(group, control);
                } else {
                  var format = Object.keys(control)[0];
                  var value = control[format];

                  if (Array.isArray(value)) {
                    addSelect(group, format, value);
                  } else {
                    addButton(group, format, value);
                  }
                }
              });
              container.appendChild(group);
            });
          }

          function addSelect(container, format, values) {
            var input = document.createElement('select');
            input.classList.add('ql-' + format);
            values.forEach(function (value) {
              var option = document.createElement('option');

              if (value !== false) {
                option.setAttribute('value', value);
              } else {
                option.setAttribute('selected', 'selected');
              }

              input.appendChild(option);
            });
            container.appendChild(input);
          }

          Toolbar.DEFAULTS = {
            container: null,
            handlers: {
              clean: function clean() {
                var _this3 = this;

                var range = this.quill.getSelection();
                if (range == null) return;

                if (range.length == 0) {
                  var formats = this.quill.getFormat();
                  Object.keys(formats).forEach(function (name) {
                    if (_parchment2.default.query(name, _parchment2.default.Scope.INLINE) != null) {
                      _this3.quill.format(name, false);
                    }
                  });
                } else {
                  this.quill.removeFormat(range, _quill2.default.sources.USER);
                }
              },
              direction: function direction(value) {
                var align = this.quill.getFormat()['align'];

                if (value === 'rtl' && align == null) {
                  this.quill.format('align', 'right', _quill2.default.sources.USER);
                } else if (!value && align === 'right') {
                  this.quill.format('align', false, _quill2.default.sources.USER);
                }

                this.quill.format('direction', value, _quill2.default.sources.USER);
              },
              indent: function indent(value) {
                var range = this.quill.getSelection();
                var formats = this.quill.getFormat(range);
                var indent = parseInt(formats.indent || 0);

                if (value === '+1' || value === '-1') {
                  var modifier = value === '+1' ? 1 : -1;
                  if (formats.direction === 'rtl') modifier *= -1;
                  this.quill.format('indent', indent + modifier, _quill2.default.sources.USER);
                }
              },
              link: function link(value) {
                if (value === true) {
                  value = prompt('Enter link URL:');
                }

                this.quill.format('link', value, _quill2.default.sources.USER);
              },
              list: function list(value) {
                var range = this.quill.getSelection();
                var formats = this.quill.getFormat(range);

                if (value === 'check') {
                  if (formats['list'] === 'checked' || formats['list'] === 'unchecked') {
                    this.quill.format('list', false, _quill2.default.sources.USER);
                  } else {
                    this.quill.format('list', 'unchecked', _quill2.default.sources.USER);
                  }
                } else {
                  this.quill.format('list', value, _quill2.default.sources.USER);
                }
              }
            }
          };
          exports.default = Toolbar;
          exports.addControls = addControls;
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <polyline class=\"ql-even ql-stroke\" points=\"5 7 3 9 5 11\"></polyline> <polyline class=\"ql-even ql-stroke\" points=\"13 7 15 9 13 11\"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>";
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _picker = __webpack_require__(28);

          var _picker2 = _interopRequireDefault(_picker);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var ColorPicker = function (_Picker) {
            _inherits(ColorPicker, _Picker);

            function ColorPicker(select, label) {
              _classCallCheck(this, ColorPicker);

              var _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this, select));

              _this.label.innerHTML = label;

              _this.container.classList.add('ql-color-picker');

              [].slice.call(_this.container.querySelectorAll('.ql-picker-item'), 0, 7).forEach(function (item) {
                item.classList.add('ql-primary');
              });
              return _this;
            }

            _createClass(ColorPicker, [{
              key: 'buildItem',
              value: function buildItem(option) {
                var item = _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'buildItem', this).call(this, option);

                item.style.backgroundColor = option.getAttribute('value') || '';
                return item;
              }
            }, {
              key: 'selectItem',
              value: function selectItem(item, trigger) {
                _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'selectItem', this).call(this, item, trigger);

                var colorLabel = this.label.querySelector('.ql-color-label');
                var value = item ? item.getAttribute('data-value') || '' : '';

                if (colorLabel) {
                  if (colorLabel.tagName === 'line') {
                    colorLabel.style.stroke = value;
                  } else {
                    colorLabel.style.fill = value;
                  }
                }
              }
            }]);

            return ColorPicker;
          }(_picker2.default);

          exports.default = ColorPicker;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _picker = __webpack_require__(28);

          var _picker2 = _interopRequireDefault(_picker);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var IconPicker = function (_Picker) {
            _inherits(IconPicker, _Picker);

            function IconPicker(select, icons) {
              _classCallCheck(this, IconPicker);

              var _this = _possibleConstructorReturn(this, (IconPicker.__proto__ || Object.getPrototypeOf(IconPicker)).call(this, select));

              _this.container.classList.add('ql-icon-picker');

              [].forEach.call(_this.container.querySelectorAll('.ql-picker-item'), function (item) {
                item.innerHTML = icons[item.getAttribute('data-value') || ''];
              });
              _this.defaultItem = _this.container.querySelector('.ql-selected');

              _this.selectItem(_this.defaultItem);

              return _this;
            }

            _createClass(IconPicker, [{
              key: 'selectItem',
              value: function selectItem(item, trigger) {
                _get(IconPicker.prototype.__proto__ || Object.getPrototypeOf(IconPicker.prototype), 'selectItem', this).call(this, item, trigger);

                item = item || this.defaultItem;
                this.label.innerHTML = item.innerHTML;
              }
            }]);

            return IconPicker;
          }(_picker2.default);

          exports.default = IconPicker;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var Tooltip = function () {
            function Tooltip(quill, boundsContainer) {
              var _this = this;

              _classCallCheck(this, Tooltip);

              this.quill = quill;
              this.boundsContainer = boundsContainer || document.body;
              this.root = quill.addContainer('ql-tooltip');
              this.root.innerHTML = this.constructor.TEMPLATE;

              if (this.quill.root === this.quill.scrollingContainer) {
                this.quill.root.addEventListener('scroll', function () {
                  _this.root.style.marginTop = -1 * _this.quill.root.scrollTop + 'px';
                });
              }

              this.hide();
            }

            _createClass(Tooltip, [{
              key: 'hide',
              value: function hide() {
                this.root.classList.add('ql-hidden');
              }
            }, {
              key: 'position',
              value: function position(reference) {
                var left = reference.left + reference.width / 2 - this.root.offsetWidth / 2;
                var top = reference.bottom + this.quill.root.scrollTop;
                this.root.style.left = left + 'px';
                this.root.style.top = top + 'px';
                this.root.classList.remove('ql-flip');
                var containerBounds = this.boundsContainer.getBoundingClientRect();
                var rootBounds = this.root.getBoundingClientRect();
                var shift = 0;

                if (rootBounds.right > containerBounds.right) {
                  shift = containerBounds.right - rootBounds.right;
                  this.root.style.left = left + shift + 'px';
                }

                if (rootBounds.left < containerBounds.left) {
                  shift = containerBounds.left - rootBounds.left;
                  this.root.style.left = left + shift + 'px';
                }

                if (rootBounds.bottom > containerBounds.bottom) {
                  var height = rootBounds.bottom - rootBounds.top;
                  var verticalShift = reference.bottom - reference.top + height;
                  this.root.style.top = top - verticalShift + 'px';
                  this.root.classList.add('ql-flip');
                }

                return shift;
              }
            }, {
              key: 'show',
              value: function show() {
                this.root.classList.remove('ql-editing');
                this.root.classList.remove('ql-hidden');
              }
            }]);

            return Tooltip;
          }();

          exports.default = Tooltip;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _slicedToArray = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;

              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _extend = __webpack_require__(3);

          var _extend2 = _interopRequireDefault(_extend);

          var _emitter = __webpack_require__(8);

          var _emitter2 = _interopRequireDefault(_emitter);

          var _base = __webpack_require__(43);

          var _base2 = _interopRequireDefault(_base);

          var _link = __webpack_require__(27);

          var _link2 = _interopRequireDefault(_link);

          var _selection = __webpack_require__(15);

          var _icons = __webpack_require__(41);

          var _icons2 = _interopRequireDefault(_icons);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var TOOLBAR_CONFIG = [[{
            header: ['1', '2', '3', false]
          }], ['bold', 'italic', 'underline', 'link'], [{
            list: 'ordered'
          }, {
            list: 'bullet'
          }], ['clean']];

          var SnowTheme = function (_BaseTheme) {
            _inherits(SnowTheme, _BaseTheme);

            function SnowTheme(quill, options) {
              _classCallCheck(this, SnowTheme);

              if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
                options.modules.toolbar.container = TOOLBAR_CONFIG;
              }

              var _this = _possibleConstructorReturn(this, (SnowTheme.__proto__ || Object.getPrototypeOf(SnowTheme)).call(this, quill, options));

              _this.quill.container.classList.add('ql-snow');

              return _this;
            }

            _createClass(SnowTheme, [{
              key: 'extendToolbar',
              value: function extendToolbar(toolbar) {
                toolbar.container.classList.add('ql-snow');
                this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
                this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
                this.tooltip = new SnowTooltip(this.quill, this.options.bounds);

                if (toolbar.container.querySelector('.ql-link')) {
                  this.quill.keyboard.addBinding({
                    key: 'K',
                    shortKey: true
                  }, function (range, context) {
                    toolbar.handlers['link'].call(toolbar, !context.format.link);
                  });
                }
              }
            }]);

            return SnowTheme;
          }(_base2.default);

          SnowTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
            modules: {
              toolbar: {
                handlers: {
                  link: function link(value) {
                    if (value) {
                      var range = this.quill.getSelection();
                      if (range == null || range.length == 0) return;
                      var preview = this.quill.getText(range);

                      if (/^\S+@\S+\.\S+$/.test(preview) && preview.indexOf('mailto:') !== 0) {
                        preview = 'mailto:' + preview;
                      }

                      var tooltip = this.quill.theme.tooltip;
                      tooltip.edit('link', preview);
                    } else {
                      this.quill.format('link', false);
                    }
                  }
                }
              }
            }
          });

          var SnowTooltip = function (_BaseTooltip) {
            _inherits(SnowTooltip, _BaseTooltip);

            function SnowTooltip(quill, bounds) {
              _classCallCheck(this, SnowTooltip);

              var _this2 = _possibleConstructorReturn(this, (SnowTooltip.__proto__ || Object.getPrototypeOf(SnowTooltip)).call(this, quill, bounds));

              _this2.preview = _this2.root.querySelector('a.ql-preview');
              return _this2;
            }

            _createClass(SnowTooltip, [{
              key: 'listen',
              value: function listen() {
                var _this3 = this;

                _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'listen', this).call(this);

                this.root.querySelector('a.ql-action').addEventListener('click', function (event) {
                  if (_this3.root.classList.contains('ql-editing')) {
                    _this3.save();
                  } else {
                    _this3.edit('link', _this3.preview.textContent);
                  }

                  event.preventDefault();
                });
                this.root.querySelector('a.ql-remove').addEventListener('click', function (event) {
                  if (_this3.linkRange != null) {
                    var range = _this3.linkRange;

                    _this3.restoreFocus();

                    _this3.quill.formatText(range, 'link', false, _emitter2.default.sources.USER);

                    delete _this3.linkRange;
                  }

                  event.preventDefault();

                  _this3.hide();
                });
                this.quill.on(_emitter2.default.events.SELECTION_CHANGE, function (range, oldRange, source) {
                  if (range == null) return;

                  if (range.length === 0 && source === _emitter2.default.sources.USER) {
                    var _quill$scroll$descend = _this3.quill.scroll.descendant(_link2.default, range.index),
                        _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),
                        link = _quill$scroll$descend2[0],
                        offset = _quill$scroll$descend2[1];

                    if (link != null) {
                      _this3.linkRange = new _selection.Range(range.index - offset, link.length());

                      var preview = _link2.default.formats(link.domNode);

                      _this3.preview.textContent = preview;

                      _this3.preview.setAttribute('href', preview);

                      _this3.show();

                      _this3.position(_this3.quill.getBounds(_this3.linkRange));

                      return;
                    }
                  } else {
                    delete _this3.linkRange;
                  }

                  _this3.hide();
                });
              }
            }, {
              key: 'show',
              value: function show() {
                _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'show', this).call(this);

                this.root.removeAttribute('data-mode');
              }
            }]);

            return SnowTooltip;
          }(_base.BaseTooltip);

          SnowTooltip.TEMPLATE = ['<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-action"></a>', '<a class="ql-remove"></a>'].join('');
          exports.default = SnowTheme;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _core = __webpack_require__(29);

          var _core2 = _interopRequireDefault(_core);

          var _align = __webpack_require__(36);

          var _direction = __webpack_require__(38);

          var _indent = __webpack_require__(64);

          var _blockquote = __webpack_require__(65);

          var _blockquote2 = _interopRequireDefault(_blockquote);

          var _header = __webpack_require__(66);

          var _header2 = _interopRequireDefault(_header);

          var _list = __webpack_require__(67);

          var _list2 = _interopRequireDefault(_list);

          var _background = __webpack_require__(37);

          var _color = __webpack_require__(26);

          var _font = __webpack_require__(39);

          var _size = __webpack_require__(40);

          var _bold = __webpack_require__(56);

          var _bold2 = _interopRequireDefault(_bold);

          var _italic = __webpack_require__(68);

          var _italic2 = _interopRequireDefault(_italic);

          var _link = __webpack_require__(27);

          var _link2 = _interopRequireDefault(_link);

          var _script = __webpack_require__(69);

          var _script2 = _interopRequireDefault(_script);

          var _strike = __webpack_require__(70);

          var _strike2 = _interopRequireDefault(_strike);

          var _underline = __webpack_require__(71);

          var _underline2 = _interopRequireDefault(_underline);

          var _image = __webpack_require__(72);

          var _image2 = _interopRequireDefault(_image);

          var _video = __webpack_require__(73);

          var _video2 = _interopRequireDefault(_video);

          var _code = __webpack_require__(13);

          var _code2 = _interopRequireDefault(_code);

          var _formula = __webpack_require__(74);

          var _formula2 = _interopRequireDefault(_formula);

          var _syntax = __webpack_require__(75);

          var _syntax2 = _interopRequireDefault(_syntax);

          var _toolbar = __webpack_require__(57);

          var _toolbar2 = _interopRequireDefault(_toolbar);

          var _icons = __webpack_require__(41);

          var _icons2 = _interopRequireDefault(_icons);

          var _picker = __webpack_require__(28);

          var _picker2 = _interopRequireDefault(_picker);

          var _colorPicker = __webpack_require__(59);

          var _colorPicker2 = _interopRequireDefault(_colorPicker);

          var _iconPicker = __webpack_require__(60);

          var _iconPicker2 = _interopRequireDefault(_iconPicker);

          var _tooltip = __webpack_require__(61);

          var _tooltip2 = _interopRequireDefault(_tooltip);

          var _bubble = __webpack_require__(108);

          var _bubble2 = _interopRequireDefault(_bubble);

          var _snow = __webpack_require__(62);

          var _snow2 = _interopRequireDefault(_snow);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          _core2.default.register({
            'attributors/attribute/direction': _direction.DirectionAttribute,
            'attributors/class/align': _align.AlignClass,
            'attributors/class/background': _background.BackgroundClass,
            'attributors/class/color': _color.ColorClass,
            'attributors/class/direction': _direction.DirectionClass,
            'attributors/class/font': _font.FontClass,
            'attributors/class/size': _size.SizeClass,
            'attributors/style/align': _align.AlignStyle,
            'attributors/style/background': _background.BackgroundStyle,
            'attributors/style/color': _color.ColorStyle,
            'attributors/style/direction': _direction.DirectionStyle,
            'attributors/style/font': _font.FontStyle,
            'attributors/style/size': _size.SizeStyle
          }, true);

          _core2.default.register({
            'formats/align': _align.AlignClass,
            'formats/direction': _direction.DirectionClass,
            'formats/indent': _indent.IndentClass,
            'formats/background': _background.BackgroundStyle,
            'formats/color': _color.ColorStyle,
            'formats/font': _font.FontClass,
            'formats/size': _size.SizeClass,
            'formats/blockquote': _blockquote2.default,
            'formats/code-block': _code2.default,
            'formats/header': _header2.default,
            'formats/list': _list2.default,
            'formats/bold': _bold2.default,
            'formats/code': _code.Code,
            'formats/italic': _italic2.default,
            'formats/link': _link2.default,
            'formats/script': _script2.default,
            'formats/strike': _strike2.default,
            'formats/underline': _underline2.default,
            'formats/image': _image2.default,
            'formats/video': _video2.default,
            'formats/list/item': _list.ListItem,
            'modules/formula': _formula2.default,
            'modules/syntax': _syntax2.default,
            'modules/toolbar': _toolbar2.default,
            'themes/bubble': _bubble2.default,
            'themes/snow': _snow2.default,
            'ui/icons': _icons2.default,
            'ui/picker': _picker2.default,
            'ui/icon-picker': _iconPicker2.default,
            'ui/color-picker': _colorPicker2.default,
            'ui/tooltip': _tooltip2.default
          }, true);

          exports.default = _core2.default;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.IndentClass = undefined;

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var IdentAttributor = function (_Parchment$Attributor) {
            _inherits(IdentAttributor, _Parchment$Attributor);

            function IdentAttributor() {
              _classCallCheck(this, IdentAttributor);

              return _possibleConstructorReturn(this, (IdentAttributor.__proto__ || Object.getPrototypeOf(IdentAttributor)).apply(this, arguments));
            }

            _createClass(IdentAttributor, [{
              key: 'add',
              value: function add(node, value) {
                if (value === '+1' || value === '-1') {
                  var indent = this.value(node) || 0;
                  value = value === '+1' ? indent + 1 : indent - 1;
                }

                if (value === 0) {
                  this.remove(node);
                  return true;
                } else {
                  return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'add', this).call(this, node, value);
                }
              }
            }, {
              key: 'canAdd',
              value: function canAdd(node, value) {
                return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, value) || _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, parseInt(value));
              }
            }, {
              key: 'value',
              value: function value(node) {
                return parseInt(_get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'value', this).call(this, node)) || undefined;
              }
            }]);

            return IdentAttributor;
          }(_parchment2.default.Attributor.Class);

          var IndentClass = new IdentAttributor('indent', 'ql-indent', {
            scope: _parchment2.default.Scope.BLOCK,
            whitelist: [1, 2, 3, 4, 5, 6, 7, 8]
          });
          exports.IndentClass = IndentClass;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _block = __webpack_require__(4);

          var _block2 = _interopRequireDefault(_block);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Blockquote = function (_Block) {
            _inherits(Blockquote, _Block);

            function Blockquote() {
              _classCallCheck(this, Blockquote);

              return _possibleConstructorReturn(this, (Blockquote.__proto__ || Object.getPrototypeOf(Blockquote)).apply(this, arguments));
            }

            return Blockquote;
          }(_block2.default);

          Blockquote.blotName = 'blockquote';
          Blockquote.tagName = 'blockquote';
          exports.default = Blockquote;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _block = __webpack_require__(4);

          var _block2 = _interopRequireDefault(_block);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Header = function (_Block) {
            _inherits(Header, _Block);

            function Header() {
              _classCallCheck(this, Header);

              return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));
            }

            _createClass(Header, null, [{
              key: 'formats',
              value: function formats(domNode) {
                return this.tagName.indexOf(domNode.tagName) + 1;
              }
            }]);

            return Header;
          }(_block2.default);

          Header.blotName = 'header';
          Header.tagName = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];
          exports.default = Header;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = exports.ListItem = undefined;

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _block = __webpack_require__(4);

          var _block2 = _interopRequireDefault(_block);

          var _container = __webpack_require__(25);

          var _container2 = _interopRequireDefault(_container);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
              });
            } else {
              obj[key] = value;
            }

            return obj;
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var ListItem = function (_Block) {
            _inherits(ListItem, _Block);

            function ListItem() {
              _classCallCheck(this, ListItem);

              return _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(this, arguments));
            }

            _createClass(ListItem, [{
              key: 'format',
              value: function format(name, value) {
                if (name === List.blotName && !value) {
                  this.replaceWith(_parchment2.default.create(this.statics.scope));
                } else {
                  _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'format', this).call(this, name, value);
                }
              }
            }, {
              key: 'remove',
              value: function remove() {
                if (this.prev == null && this.next == null) {
                  this.parent.remove();
                } else {
                  _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'remove', this).call(this);
                }
              }
            }, {
              key: 'replaceWith',
              value: function replaceWith(name, value) {
                this.parent.isolate(this.offset(this.parent), this.length());

                if (name === this.parent.statics.blotName) {
                  this.parent.replaceWith(name, value);
                  return this;
                } else {
                  this.parent.unwrap();
                  return _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'replaceWith', this).call(this, name, value);
                }
              }
            }], [{
              key: 'formats',
              value: function formats(domNode) {
                return domNode.tagName === this.tagName ? undefined : _get(ListItem.__proto__ || Object.getPrototypeOf(ListItem), 'formats', this).call(this, domNode);
              }
            }]);

            return ListItem;
          }(_block2.default);

          ListItem.blotName = 'list-item';
          ListItem.tagName = 'LI';

          var List = function (_Container) {
            _inherits(List, _Container);

            _createClass(List, null, [{
              key: 'create',
              value: function create(value) {
                var tagName = value === 'ordered' ? 'OL' : 'UL';

                var node = _get(List.__proto__ || Object.getPrototypeOf(List), 'create', this).call(this, tagName);

                if (value === 'checked' || value === 'unchecked') {
                  node.setAttribute('data-checked', value === 'checked');
                }

                return node;
              }
            }, {
              key: 'formats',
              value: function formats(domNode) {
                if (domNode.tagName === 'OL') return 'ordered';

                if (domNode.tagName === 'UL') {
                  if (domNode.hasAttribute('data-checked')) {
                    return domNode.getAttribute('data-checked') === 'true' ? 'checked' : 'unchecked';
                  } else {
                    return 'bullet';
                  }
                }

                return undefined;
              }
            }]);

            function List(domNode) {
              _classCallCheck(this, List);

              var _this2 = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, domNode));

              var listEventHandler = function listEventHandler(e) {
                if (e.target.parentNode !== domNode) return;

                var format = _this2.statics.formats(domNode);

                var blot = _parchment2.default.find(e.target);

                if (format === 'checked') {
                  blot.format('list', 'unchecked');
                } else if (format === 'unchecked') {
                  blot.format('list', 'checked');
                }
              };

              domNode.addEventListener('touchstart', listEventHandler);
              domNode.addEventListener('mousedown', listEventHandler);
              return _this2;
            }

            _createClass(List, [{
              key: 'format',
              value: function format(name, value) {
                if (this.children.length > 0) {
                  this.children.tail.format(name, value);
                }
              }
            }, {
              key: 'formats',
              value: function formats() {
                return _defineProperty({}, this.statics.blotName, this.statics.formats(this.domNode));
              }
            }, {
              key: 'insertBefore',
              value: function insertBefore(blot, ref) {
                if (blot instanceof ListItem) {
                  _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'insertBefore', this).call(this, blot, ref);
                } else {
                  var index = ref == null ? this.length() : ref.offset(this);
                  var after = this.split(index);
                  after.parent.insertBefore(blot, after);
                }
              }
            }, {
              key: 'optimize',
              value: function optimize(context) {
                _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'optimize', this).call(this, context);

                var next = this.next;

                if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && next.domNode.tagName === this.domNode.tagName && next.domNode.getAttribute('data-checked') === this.domNode.getAttribute('data-checked')) {
                  next.moveChildren(this);
                  next.remove();
                }
              }
            }, {
              key: 'replace',
              value: function replace(target) {
                if (target.statics.blotName !== this.statics.blotName) {
                  var item = _parchment2.default.create(this.statics.defaultChild);

                  target.moveChildren(item);
                  this.appendChild(item);
                }

                _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'replace', this).call(this, target);
              }
            }]);

            return List;
          }(_container2.default);

          List.blotName = 'list';
          List.scope = _parchment2.default.Scope.BLOCK_BLOT;
          List.tagName = ['OL', 'UL'];
          List.defaultChild = 'list-item';
          List.allowedChildren = [ListItem];
          exports.ListItem = ListItem;
          exports.default = List;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _bold = __webpack_require__(56);

          var _bold2 = _interopRequireDefault(_bold);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Italic = function (_Bold) {
            _inherits(Italic, _Bold);

            function Italic() {
              _classCallCheck(this, Italic);

              return _possibleConstructorReturn(this, (Italic.__proto__ || Object.getPrototypeOf(Italic)).apply(this, arguments));
            }

            return Italic;
          }(_bold2.default);

          Italic.blotName = 'italic';
          Italic.tagName = ['EM', 'I'];
          exports.default = Italic;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _inline = __webpack_require__(6);

          var _inline2 = _interopRequireDefault(_inline);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Script = function (_Inline) {
            _inherits(Script, _Inline);

            function Script() {
              _classCallCheck(this, Script);

              return _possibleConstructorReturn(this, (Script.__proto__ || Object.getPrototypeOf(Script)).apply(this, arguments));
            }

            _createClass(Script, null, [{
              key: 'create',
              value: function create(value) {
                if (value === 'super') {
                  return document.createElement('sup');
                } else if (value === 'sub') {
                  return document.createElement('sub');
                } else {
                  return _get(Script.__proto__ || Object.getPrototypeOf(Script), 'create', this).call(this, value);
                }
              }
            }, {
              key: 'formats',
              value: function formats(domNode) {
                if (domNode.tagName === 'SUB') return 'sub';
                if (domNode.tagName === 'SUP') return 'super';
                return undefined;
              }
            }]);

            return Script;
          }(_inline2.default);

          Script.blotName = 'script';
          Script.tagName = ['SUB', 'SUP'];
          exports.default = Script;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _inline = __webpack_require__(6);

          var _inline2 = _interopRequireDefault(_inline);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Strike = function (_Inline) {
            _inherits(Strike, _Inline);

            function Strike() {
              _classCallCheck(this, Strike);

              return _possibleConstructorReturn(this, (Strike.__proto__ || Object.getPrototypeOf(Strike)).apply(this, arguments));
            }

            return Strike;
          }(_inline2.default);

          Strike.blotName = 'strike';
          Strike.tagName = 'S';
          exports.default = Strike;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _inline = __webpack_require__(6);

          var _inline2 = _interopRequireDefault(_inline);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Underline = function (_Inline) {
            _inherits(Underline, _Inline);

            function Underline() {
              _classCallCheck(this, Underline);

              return _possibleConstructorReturn(this, (Underline.__proto__ || Object.getPrototypeOf(Underline)).apply(this, arguments));
            }

            return Underline;
          }(_inline2.default);

          Underline.blotName = 'underline';
          Underline.tagName = 'U';
          exports.default = Underline;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _link = __webpack_require__(27);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var ATTRIBUTES = ['alt', 'height', 'width'];

          var Image = function (_Parchment$Embed) {
            _inherits(Image, _Parchment$Embed);

            function Image() {
              _classCallCheck(this, Image);

              return _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).apply(this, arguments));
            }

            _createClass(Image, [{
              key: 'format',
              value: function format(name, value) {
                if (ATTRIBUTES.indexOf(name) > -1) {
                  if (value) {
                    this.domNode.setAttribute(name, value);
                  } else {
                    this.domNode.removeAttribute(name);
                  }
                } else {
                  _get(Image.prototype.__proto__ || Object.getPrototypeOf(Image.prototype), 'format', this).call(this, name, value);
                }
              }
            }], [{
              key: 'create',
              value: function create(value) {
                var node = _get(Image.__proto__ || Object.getPrototypeOf(Image), 'create', this).call(this, value);

                if (typeof value === 'string') {
                  node.setAttribute('src', this.sanitize(value));
                }

                return node;
              }
            }, {
              key: 'formats',
              value: function formats(domNode) {
                return ATTRIBUTES.reduce(function (formats, attribute) {
                  if (domNode.hasAttribute(attribute)) {
                    formats[attribute] = domNode.getAttribute(attribute);
                  }

                  return formats;
                }, {});
              }
            }, {
              key: 'match',
              value: function match(url) {
                return /\.(jpe?g|gif|png)$/.test(url) || /^data:image\/.+;base64/.test(url);
              }
            }, {
              key: 'sanitize',
              value: function sanitize(url) {
                return (0, _link.sanitize)(url, ['http', 'https', 'data']) ? url : '//:0';
              }
            }, {
              key: 'value',
              value: function value(domNode) {
                return domNode.getAttribute('src');
              }
            }]);

            return Image;
          }(_parchment2.default.Embed);

          Image.blotName = 'image';
          Image.tagName = 'IMG';
          exports.default = Image;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _block = __webpack_require__(4);

          var _link = __webpack_require__(27);

          var _link2 = _interopRequireDefault(_link);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var ATTRIBUTES = ['height', 'width'];

          var Video = function (_BlockEmbed) {
            _inherits(Video, _BlockEmbed);

            function Video() {
              _classCallCheck(this, Video);

              return _possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).apply(this, arguments));
            }

            _createClass(Video, [{
              key: 'format',
              value: function format(name, value) {
                if (ATTRIBUTES.indexOf(name) > -1) {
                  if (value) {
                    this.domNode.setAttribute(name, value);
                  } else {
                    this.domNode.removeAttribute(name);
                  }
                } else {
                  _get(Video.prototype.__proto__ || Object.getPrototypeOf(Video.prototype), 'format', this).call(this, name, value);
                }
              }
            }], [{
              key: 'create',
              value: function create(value) {
                var node = _get(Video.__proto__ || Object.getPrototypeOf(Video), 'create', this).call(this, value);

                node.setAttribute('frameborder', '0');
                node.setAttribute('allowfullscreen', true);
                node.setAttribute('src', this.sanitize(value));
                return node;
              }
            }, {
              key: 'formats',
              value: function formats(domNode) {
                return ATTRIBUTES.reduce(function (formats, attribute) {
                  if (domNode.hasAttribute(attribute)) {
                    formats[attribute] = domNode.getAttribute(attribute);
                  }

                  return formats;
                }, {});
              }
            }, {
              key: 'sanitize',
              value: function sanitize(url) {
                return _link2.default.sanitize(url);
              }
            }, {
              key: 'value',
              value: function value(domNode) {
                return domNode.getAttribute('src');
              }
            }]);

            return Video;
          }(_block.BlockEmbed);

          Video.blotName = 'video';
          Video.className = 'ql-video';
          Video.tagName = 'IFRAME';
          exports.default = Video;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = exports.FormulaBlot = undefined;

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _embed = __webpack_require__(35);

          var _embed2 = _interopRequireDefault(_embed);

          var _quill = __webpack_require__(5);

          var _quill2 = _interopRequireDefault(_quill);

          var _module = __webpack_require__(9);

          var _module2 = _interopRequireDefault(_module);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var FormulaBlot = function (_Embed) {
            _inherits(FormulaBlot, _Embed);

            function FormulaBlot() {
              _classCallCheck(this, FormulaBlot);

              return _possibleConstructorReturn(this, (FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot)).apply(this, arguments));
            }

            _createClass(FormulaBlot, null, [{
              key: 'create',
              value: function create(value) {
                var node = _get(FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot), 'create', this).call(this, value);

                if (typeof value === 'string') {
                  window.katex.render(value, node, {
                    throwOnError: false,
                    errorColor: '#f00'
                  });
                  node.setAttribute('data-value', value);
                }

                return node;
              }
            }, {
              key: 'value',
              value: function value(domNode) {
                return domNode.getAttribute('data-value');
              }
            }]);

            return FormulaBlot;
          }(_embed2.default);

          FormulaBlot.blotName = 'formula';
          FormulaBlot.className = 'ql-formula';
          FormulaBlot.tagName = 'SPAN';

          var Formula = function (_Module) {
            _inherits(Formula, _Module);

            _createClass(Formula, null, [{
              key: 'register',
              value: function register() {
                _quill2.default.register(FormulaBlot, true);
              }
            }]);

            function Formula() {
              _classCallCheck(this, Formula);

              var _this2 = _possibleConstructorReturn(this, (Formula.__proto__ || Object.getPrototypeOf(Formula)).call(this));

              if (window.katex == null) {
                throw new Error('Formula module requires KaTeX.');
              }

              return _this2;
            }

            return Formula;
          }(_module2.default);

          exports.FormulaBlot = FormulaBlot;
          exports.default = Formula;
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = exports.CodeToken = exports.CodeBlock = undefined;

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _quill = __webpack_require__(5);

          var _quill2 = _interopRequireDefault(_quill);

          var _module = __webpack_require__(9);

          var _module2 = _interopRequireDefault(_module);

          var _code = __webpack_require__(13);

          var _code2 = _interopRequireDefault(_code);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var SyntaxCodeBlock = function (_CodeBlock) {
            _inherits(SyntaxCodeBlock, _CodeBlock);

            function SyntaxCodeBlock() {
              _classCallCheck(this, SyntaxCodeBlock);

              return _possibleConstructorReturn(this, (SyntaxCodeBlock.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock)).apply(this, arguments));
            }

            _createClass(SyntaxCodeBlock, [{
              key: 'replaceWith',
              value: function replaceWith(block) {
                this.domNode.textContent = this.domNode.textContent;
                this.attach();

                _get(SyntaxCodeBlock.prototype.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock.prototype), 'replaceWith', this).call(this, block);
              }
            }, {
              key: 'highlight',
              value: function highlight(_highlight) {
                var text = this.domNode.textContent;

                if (this.cachedText !== text) {
                  if (text.trim().length > 0 || this.cachedText == null) {
                    this.domNode.innerHTML = _highlight(text);
                    this.domNode.normalize();
                    this.attach();
                  }

                  this.cachedText = text;
                }
              }
            }]);

            return SyntaxCodeBlock;
          }(_code2.default);

          SyntaxCodeBlock.className = 'ql-syntax';
          var CodeToken = new _parchment2.default.Attributor.Class('token', 'hljs', {
            scope: _parchment2.default.Scope.INLINE
          });

          var Syntax = function (_Module) {
            _inherits(Syntax, _Module);

            _createClass(Syntax, null, [{
              key: 'register',
              value: function register() {
                _quill2.default.register(CodeToken, true);

                _quill2.default.register(SyntaxCodeBlock, true);
              }
            }]);

            function Syntax(quill, options) {
              _classCallCheck(this, Syntax);

              var _this2 = _possibleConstructorReturn(this, (Syntax.__proto__ || Object.getPrototypeOf(Syntax)).call(this, quill, options));

              if (typeof _this2.options.highlight !== 'function') {
                throw new Error('Syntax module requires highlight.js. Please include the library on the page before Quill.');
              }

              var timer = null;

              _this2.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {
                clearTimeout(timer);
                timer = setTimeout(function () {
                  _this2.highlight();

                  timer = null;
                }, _this2.options.interval);
              });

              _this2.highlight();

              return _this2;
            }

            _createClass(Syntax, [{
              key: 'highlight',
              value: function highlight() {
                var _this3 = this;

                if (this.quill.selection.composing) return;
                this.quill.update(_quill2.default.sources.USER);
                var range = this.quill.getSelection();
                this.quill.scroll.descendants(SyntaxCodeBlock).forEach(function (code) {
                  code.highlight(_this3.options.highlight);
                });
                this.quill.update(_quill2.default.sources.SILENT);

                if (range != null) {
                  this.quill.setSelection(range, _quill2.default.sources.SILENT);
                }
              }
            }]);

            return Syntax;
          }(_module2.default);

          Syntax.DEFAULTS = {
            highlight: function () {
              if (window.hljs == null) return null;
              return function (text) {
                var result = window.hljs.highlightAuto(text);
                return result.value;
              };
            }(),
            interval: 1000
          };
          exports.CodeBlock = SyntaxCodeBlock;
          exports.CodeToken = CodeToken;
          exports.default = Syntax;
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <g class=\"ql-fill ql-color-label\"> <polygon points=\"6 6.868 6 6 5 6 5 7 5.942 7 6 6.868\"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points=\"6.817 5 6 5 6 6 6.38 6 6.817 5\"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points=\"4 11.439 4 11 3 11 3 12 3.755 12 4 11.439\"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points=\"4.63 10 4 10 4 11 4.192 11 4.63 10\"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points=\"13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174\"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points=\"12 6.868 12 6 11.62 6 12 6.868\"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points=\"12.933 9 13 9 13 8 12.495 8 12.933 9\"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points=\"5.5 13 9 5 12.5 13\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=4 y=5></rect> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=11 y=5></rect> <path class=\"ql-even ql-fill ql-stroke\" d=M7,8c0,4.031-3,5-3,5></path> <path class=\"ql-even ql-fill ql-stroke\" d=M14,8c0,4.031-3,5-3,5></path> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>";
        }, function (module, exports) {
          module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-color-label ql-stroke ql-transparent\" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points=\"5.5 11 9 3 12.5 11\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"3 11 5 9 3 7 3 11\"></polygon> <line class=\"ql-stroke ql-fill\" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"15 12 13 10 15 8 15 12\"></polygon> <line class=\"ql-stroke ql-fill\" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform=\"translate(24 18) rotate(-180)\"/> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class=\"ql-even ql-fill\" points=\"5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12\"></polyline> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=\"ql-fill ql-stroke\" points=\"3 7 3 11 5 9 3 7\"></polyline> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"5 7 5 11 3 9 5 7\"></polyline> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class=\"ql-even ql-stroke\" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class=\"ql-even ql-stroke\" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class=\"ql-stroke ql-thin\" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class=\"ql-stroke ql-thin\" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class=\"ql-stroke ql-thin\" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>";
        }, function (module, exports) {
          module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points=\"3 4 4 5 6 3\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points=\"3 14 4 15 6 13\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"3 9 4 10 6 8\"></polyline> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-stroke ql-thin\" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>";
        }, function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=ql-stroke points=\"7 11 9 13 11 11 7 11\"></polygon> <polygon class=ql-stroke points=\"7 7 9 5 11 7 7 7\"></polygon> </svg>";
        }, function (module, exports, __webpack_require__) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = exports.BubbleTooltip = undefined;

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _extend = __webpack_require__(3);

          var _extend2 = _interopRequireDefault(_extend);

          var _emitter = __webpack_require__(8);

          var _emitter2 = _interopRequireDefault(_emitter);

          var _base = __webpack_require__(43);

          var _base2 = _interopRequireDefault(_base);

          var _selection = __webpack_require__(15);

          var _icons = __webpack_require__(41);

          var _icons2 = _interopRequireDefault(_icons);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (typeof call === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var TOOLBAR_CONFIG = [['bold', 'italic', 'link'], [{
            header: 1
          }, {
            header: 2
          }, 'blockquote']];

          var BubbleTheme = function (_BaseTheme) {
            _inherits(BubbleTheme, _BaseTheme);

            function BubbleTheme(quill, options) {
              _classCallCheck(this, BubbleTheme);

              if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
                options.modules.toolbar.container = TOOLBAR_CONFIG;
              }

              var _this = _possibleConstructorReturn(this, (BubbleTheme.__proto__ || Object.getPrototypeOf(BubbleTheme)).call(this, quill, options));

              _this.quill.container.classList.add('ql-bubble');

              return _this;
            }

            _createClass(BubbleTheme, [{
              key: 'extendToolbar',
              value: function extendToolbar(toolbar) {
                this.tooltip = new BubbleTooltip(this.quill, this.options.bounds);
                this.tooltip.root.appendChild(toolbar.container);
                this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
                this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
              }
            }]);

            return BubbleTheme;
          }(_base2.default);

          BubbleTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
            modules: {
              toolbar: {
                handlers: {
                  link: function link(value) {
                    if (!value) {
                      this.quill.format('link', false);
                    } else {
                      this.quill.theme.tooltip.edit();
                    }
                  }
                }
              }
            }
          });

          var BubbleTooltip = function (_BaseTooltip) {
            _inherits(BubbleTooltip, _BaseTooltip);

            function BubbleTooltip(quill, bounds) {
              _classCallCheck(this, BubbleTooltip);

              var _this2 = _possibleConstructorReturn(this, (BubbleTooltip.__proto__ || Object.getPrototypeOf(BubbleTooltip)).call(this, quill, bounds));

              _this2.quill.on(_emitter2.default.events.EDITOR_CHANGE, function (type, range, oldRange, source) {
                if (type !== _emitter2.default.events.SELECTION_CHANGE) return;

                if (range != null && range.length > 0 && source === _emitter2.default.sources.USER) {
                  _this2.show();

                  _this2.root.style.left = '0px';
                  _this2.root.style.width = '';
                  _this2.root.style.width = _this2.root.offsetWidth + 'px';

                  var lines = _this2.quill.getLines(range.index, range.length);

                  if (lines.length === 1) {
                    _this2.position(_this2.quill.getBounds(range));
                  } else {
                    var lastLine = lines[lines.length - 1];

                    var index = _this2.quill.getIndex(lastLine);

                    var length = Math.min(lastLine.length() - 1, range.index + range.length - index);

                    var _bounds = _this2.quill.getBounds(new _selection.Range(index, length));

                    _this2.position(_bounds);
                  }
                } else if (document.activeElement !== _this2.textbox && _this2.quill.hasFocus()) {
                  _this2.hide();
                }
              });

              return _this2;
            }

            _createClass(BubbleTooltip, [{
              key: 'listen',
              value: function listen() {
                var _this3 = this;

                _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'listen', this).call(this);

                this.root.querySelector('.ql-close').addEventListener('click', function () {
                  _this3.root.classList.remove('ql-editing');
                });
                this.quill.on(_emitter2.default.events.SCROLL_OPTIMIZE, function () {
                  setTimeout(function () {
                    if (_this3.root.classList.contains('ql-hidden')) return;

                    var range = _this3.quill.getSelection();

                    if (range != null) {
                      _this3.position(_this3.quill.getBounds(range));
                    }
                  }, 1);
                });
              }
            }, {
              key: 'cancel',
              value: function cancel() {
                this.show();
              }
            }, {
              key: 'position',
              value: function position(reference) {
                var shift = _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'position', this).call(this, reference);

                var arrow = this.root.querySelector('.ql-tooltip-arrow');
                arrow.style.marginLeft = '';
                if (shift === 0) return shift;
                arrow.style.marginLeft = -1 * shift - arrow.offsetWidth / 2 + 'px';
              }
            }]);

            return BubbleTooltip;
          }(_base.BaseTooltip);

          BubbleTooltip.TEMPLATE = ['<span class="ql-tooltip-arrow"></span>', '<div class="ql-tooltip-editor">', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-close"></a>', '</div>'].join('');
          exports.BubbleTooltip = BubbleTooltip;
          exports.default = BubbleTheme;
        }, function (module, exports, __webpack_require__) {
          module.exports = __webpack_require__(63);
        }])["default"];
      });
    });
    var Quill$1 = unwrapExports(quill);

    var classCallCheck$1 = function (instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    };

    var createClass$1 = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var defineProperty = function (obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    };

    var get = function get(object, property, receiver) {
      if (object === null) object = Function.prototype;
      var desc = Object.getOwnPropertyDescriptor(object, property);

      if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);

        if (parent === null) {
          return undefined;
        } else {
          return get(parent, property, receiver);
        }
      } else if ("value" in desc) {
        return desc.value;
      } else {
        var getter = desc.get;

        if (getter === undefined) {
          return undefined;
        }

        return getter.call(receiver);
      }
    };

    var inherits = function (subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    };

    var possibleConstructorReturn = function (self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    };

    var Inline = Quill$1.import('blots/inline');

    var BoldBlot = function (_Inline) {
      inherits(BoldBlot, _Inline);

      function BoldBlot() {
        classCallCheck$1(this, BoldBlot);
        return possibleConstructorReturn(this, (BoldBlot.__proto__ || Object.getPrototypeOf(BoldBlot)).apply(this, arguments));
      }

      return BoldBlot;
    }(Inline);

    BoldBlot.blotName = 'bold';
    BoldBlot.tagName = 'b';
    var Inline$1 = Quill$1.import('blots/inline');

    var ItalicBlot = function (_Inline) {
      inherits(ItalicBlot, _Inline);

      function ItalicBlot() {
        classCallCheck$1(this, ItalicBlot);
        return possibleConstructorReturn(this, (ItalicBlot.__proto__ || Object.getPrototypeOf(ItalicBlot)).apply(this, arguments));
      }

      return ItalicBlot;
    }(Inline$1);

    ItalicBlot.blotName = 'italic';
    ItalicBlot.tagName = 'i';
    var BlockEmbed = Quill$1.import('blots/block/embed');

    var Divider = function (_BlockEmbed) {
      inherits(Divider, _BlockEmbed);

      function Divider() {
        classCallCheck$1(this, Divider);
        return possibleConstructorReturn(this, (Divider.__proto__ || Object.getPrototypeOf(Divider)).apply(this, arguments));
      }

      return Divider;
    }(BlockEmbed);

    Divider.blotName = 'divider';
    Divider.tagName = 'hr';
    var BlockEmbed$1 = Quill$1.import('blots/block/embed');
    var SUPPORTED_ATTRS = ["accept", "action", "align", "alt", "autocomplete", "background", "bgcolor", "border", "cellpadding", "cellspacing", "checked", "cite", "class", "clear", "color", "cols", "colspan", "coords", "datetime", "default", "dir", "disabled", "download", "enctype", "face", "for", "headers", "height", "hidden", "high", "href", "hreflang", "id", "ismap", "label", "lang", "list", "loop", "low", "max", "maxlength", "media", "method", "min", "multiple", "name", "noshade", "novalidate", "nowrap", "open", "optimum", "pattern", "placeholder", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "rev", "reversed", "rowspan", "spellcheck", "scope", "selected", "shape", "size", "span", "srclang", "start", "src", "step", "style", "summary", "tabindex", "target", "title", "type", "usemap", "valign", "value", "width", "xmlns"];

    var Table = function (_BlockEmbed) {
      inherits(Table, _BlockEmbed);

      function Table() {
        classCallCheck$1(this, Table);
        return possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).apply(this, arguments));
      }

      createClass$1(Table, null, [{
        key: 'create',
        value: function create(value) {
          var node = get(Table.__proto__ || Object.getPrototypeOf(Table), 'create', this).call(this, value);
          node.innerHTML = value.innerHTML;

          for (var attr in value.attributes) {
            if (value.attributes[attr] !== null) {
              node.setAttribute(attr, value.attributes[attr]);
            }
          }

          return node;
        }
      }, {
        key: 'value',
        value: function value(node) {
          var ret = {
            attributes: {}
          };

          if (node.tagName === 'TABLE') {
            SUPPORTED_ATTRS.forEach(function (attr) {
              if (node[attr]) {
                ret.attributes[attr] = node.getAttribute(attr);
              }
            });
            ret.innerHTML = node.innerHTML;
          }

          return ret;
        }
      }]);
      return Table;
    }(BlockEmbed$1);

    Table.blotName = 'table';
    Table.tagName = 'TABLE';
    Table.className = 'ql-table-blob';
    var Inline$2 = Quill$1.import('blots/inline');

    var Abbr = function (_Inline) {
      inherits(Abbr, _Inline);

      function Abbr() {
        classCallCheck$1(this, Abbr);
        return possibleConstructorReturn(this, (Abbr.__proto__ || Object.getPrototypeOf(Abbr)).apply(this, arguments));
      }

      createClass$1(Abbr, null, [{
        key: 'create',
        value: function create(value) {
          var node = get(Abbr.__proto__ || Object.getPrototypeOf(Abbr), 'create', this).call(this);

          if (typeof value === 'string') {
            node.setAttribute('title', value);
          }

          return node;
        }
      }, {
        key: 'formats',
        value: function formats(node) {
          var title = node.getAttribute('title');

          if (title) {
            return title;
          } else {
            return true;
          }
        }
      }]);
      return Abbr;
    }(Inline$2);

    Abbr.blotName = 'abbr';
    Abbr.tagName = 'ABBR';
    var Inline$3 = Quill$1.import('blots/inline');

    var Small = function (_Inline) {
      inherits(Small, _Inline);

      function Small() {
        classCallCheck$1(this, Small);
        return possibleConstructorReturn(this, (Small.__proto__ || Object.getPrototypeOf(Small)).apply(this, arguments));
      }

      return Small;
    }(Inline$3);

    Small.blotName = 'small';
    Small.tagName = 'small';
    var Inline$4 = Quill$1.import('blots/inline');

    var Big = function (_Inline) {
      inherits(Big, _Inline);

      function Big() {
        classCallCheck$1(this, Big);
        return possibleConstructorReturn(this, (Big.__proto__ || Object.getPrototypeOf(Big)).apply(this, arguments));
      }

      return Big;
    }(Inline$4);

    Big.blotName = 'big';
    Big.tagName = 'big';
    var Inline$5 = Quill$1.import('blots/inline');

    var Cite = function (_Inline) {
      inherits(Cite, _Inline);

      function Cite() {
        classCallCheck$1(this, Cite);
        return possibleConstructorReturn(this, (Cite.__proto__ || Object.getPrototypeOf(Cite)).apply(this, arguments));
      }

      return Cite;
    }(Inline$5);

    Cite.blotName = 'cite';
    Cite.tagName = 'cite';
    var Block = Quill$1.import('blots/block');

    var Address = function (_Block) {
      inherits(Address, _Block);

      function Address() {
        classCallCheck$1(this, Address);
        return possibleConstructorReturn(this, (Address.__proto__ || Object.getPrototypeOf(Address)).apply(this, arguments));
      }

      return Address;
    }(Block);

    Address.blotName = 'address';
    Address.tagName = 'ADDRESS';
    var Inline$6 = Quill$1.import('blots/inline');

    var Del = function (_Inline) {
      inherits(Del, _Inline);

      function Del() {
        classCallCheck$1(this, Del);
        return possibleConstructorReturn(this, (Del.__proto__ || Object.getPrototypeOf(Del)).apply(this, arguments));
      }

      return Del;
    }(Inline$6);

    Del.blotName = 'del';
    Del.tagName = 'DEL';
    var Inline$7 = Quill$1.import('blots/inline');

    var Q = function (_Inline) {
      inherits(Q, _Inline);

      function Q() {
        classCallCheck$1(this, Q);
        return possibleConstructorReturn(this, (Q.__proto__ || Object.getPrototypeOf(Q)).apply(this, arguments));
      }

      return Q;
    }(Inline$7);

    Q.blotName = 'q';
    Q.tagName = 'Q';
    var Inline$8 = Quill$1.import('blots/inline');

    var Samp = function (_Inline) {
      inherits(Samp, _Inline);

      function Samp() {
        classCallCheck$1(this, Samp);
        return possibleConstructorReturn(this, (Samp.__proto__ || Object.getPrototypeOf(Samp)).apply(this, arguments));
      }

      return Samp;
    }(Inline$8);

    Samp.blotName = 'samp';
    Samp.tagName = 'SAMP';
    var Inline$9 = Quill$1.import('blots/inline');

    var Var = function (_Inline) {
      inherits(Var, _Inline);

      function Var() {
        classCallCheck$1(this, Var);
        return possibleConstructorReturn(this, (Var.__proto__ || Object.getPrototypeOf(Var)).apply(this, arguments));
      }

      return Var;
    }(Inline$9);

    Var.blotName = 'var';
    Var.tagName = 'VAR';
    var Inline$10 = Quill$1.import('blots/inline');

    var Ins = function (_Inline) {
      inherits(Ins, _Inline);

      function Ins() {
        classCallCheck$1(this, Ins);
        return possibleConstructorReturn(this, (Ins.__proto__ || Object.getPrototypeOf(Ins)).apply(this, arguments));
      }

      return Ins;
    }(Inline$10);

    Ins.blotName = 'ins';
    Ins.tagName = 'INS';
    var Inline$11 = Quill$1.import('blots/inline');

    var Kbd = function (_Inline) {
      inherits(Kbd, _Inline);

      function Kbd() {
        classCallCheck$1(this, Kbd);
        return possibleConstructorReturn(this, (Kbd.__proto__ || Object.getPrototypeOf(Kbd)).apply(this, arguments));
      }

      return Kbd;
    }(Inline$11);

    Kbd.blotName = 'kbd';
    Kbd.tagName = 'KBD';
    var Parchment = Quill$1.import('parchment');
    var config = {
      scope: Parchment.Scope.INLINE
    };

    var FontStyleAttributor = function (_Parchment$Attributor) {
      inherits(FontStyleAttributor, _Parchment$Attributor);

      function FontStyleAttributor() {
        classCallCheck$1(this, FontStyleAttributor);
        return possibleConstructorReturn(this, (FontStyleAttributor.__proto__ || Object.getPrototypeOf(FontStyleAttributor)).apply(this, arguments));
      }

      return FontStyleAttributor;
    }(Parchment.Attributor.Style);

    var FontStyle$1 = new FontStyleAttributor('font', 'font-family', config);
    var Parchment$1 = Quill$1.import('parchment');
    var Block$1 = Quill$1.import('blots/block');
    var Container = Quill$1.import('blots/container');
    var List = Quill$1.import('formats/list');
    var ListItem = Quill$1.import('formats/list/item');

    var Dd = function (_Block) {
      inherits(Dd, _Block);

      function Dd() {
        classCallCheck$1(this, Dd);
        return possibleConstructorReturn(this, (Dd.__proto__ || Object.getPrototypeOf(Dd)).apply(this, arguments));
      }

      createClass$1(Dd, [{
        key: 'format',
        value: function format(name, value) {
          if (name === Dl.blotName && !value) {
            this.replaceWith(Parchment$1.create(this.statics.scope));
          } else {
            get(Dd.prototype.__proto__ || Object.getPrototypeOf(Dd.prototype), 'format', this).call(this, name, value);
          }
        }
      }, {
        key: 'remove',
        value: function remove() {
          if (this.prev == null && this.next == null) {
            this.parent.remove();
          } else {
            get(Dd.prototype.__proto__ || Object.getPrototypeOf(Dd.prototype), 'remove', this).call(this);
          }
        }
      }], [{
        key: 'formats',
        value: function formats(domNode) {
          return domNode.tagName;
        }
      }, {
        key: 'create',
        value: function create(value) {
          var node = get(Dd.__proto__ || Object.getPrototypeOf(Dd), 'create', this).call(this, value);
          return node;
        }
      }]);
      return Dd;
    }(Block$1);

    Dd.blotName = 'dd';
    Dd.tagName = 'DD';

    var Dt = function (_Dd) {
      inherits(Dt, _Dd);

      function Dt() {
        classCallCheck$1(this, Dt);
        return possibleConstructorReturn(this, (Dt.__proto__ || Object.getPrototypeOf(Dt)).apply(this, arguments));
      }

      return Dt;
    }(Dd);

    Dt.blotName = 'dt';
    Dt.tagName = 'DT';

    var Dl = function (_Container) {
      inherits(Dl, _Container);
      createClass$1(Dl, null, [{
        key: 'create',
        value: function create(value) {
          var node = get(Dl.__proto__ || Object.getPrototypeOf(Dl), 'create', this).call(this, value);
          return node;
        }
      }, {
        key: 'formats',
        value: function formats(domNode) {
          return domNode.tagName.toLowerCase();
        }
      }]);

      function Dl(domNode) {
        classCallCheck$1(this, Dl);
        return possibleConstructorReturn(this, (Dl.__proto__ || Object.getPrototypeOf(Dl)).call(this, domNode));
      }

      createClass$1(Dl, [{
        key: 'format',
        value: function format(name, value) {
          return defineProperty({}, this.statics.blotName, this.statics.formats(this.domNode));
        }
      }, {
        key: 'formats',
        value: function formats(domNode) {
          return defineProperty({}, this.statics.blotName, this.statics.formats(this.domNode));
        }
      }, {
        key: 'insertBefore',
        value: function insertBefore(blot, ref) {
          if (blot instanceof Dd) {
            get(Dl.prototype.__proto__ || Object.getPrototypeOf(Dl.prototype), 'insertBefore', this).call(this, blot, ref);
          } else {
            var index = ref == null ? this.length() : ref.offset(this);
            var after = this.split(index);

            if (after) {
              after.parent.insertBefore(blot, after);
            } else {
              this.parent.insertBefore(blot);
            }
          }
        }
      }, {
        key: 'replace',
        value: function replace(target) {
          var item = void 0;

          if (target.statics.blotName !== this.statics.blotName) {
            if (target.statics.blotName !== Dd.blotName && target.statics.blotName !== Dt.blotName) {
              item = Parchment$1.create(this.statics.defaultChild);
            } else {
              item = Parchment$1.create(target.statics.blotName);
            }

            target.moveChildren(item);
            this.appendChild(item);
          }

          get(Dl.prototype.__proto__ || Object.getPrototypeOf(Dl.prototype), 'replace', this).call(this, target);
        }
      }, {
        key: 'remove',
        value: function remove() {
          if (this.domNode.parentNode != null) {
            this.domNode.parentNode.removeChild(this.domNode);
          }

          this.detach();
        }
      }, {
        key: 'optimize',
        value: function optimize() {
          get(Dl.prototype.__proto__ || Object.getPrototypeOf(Dl.prototype), 'optimize', this).call(this);
          var next = this.next;

          if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && next.domNode.tagName === this.domNode.tagName) {
            next.moveChildren(this);
            next.remove();
          }
        }
      }]);
      return Dl;
    }(Container);

    Dl.blotName = 'dl';
    Dl.tagName = 'DL';
    Dl.scope = Parchment$1.Scope.BLOCK_BLOT;
    Dl.defaultChild = 'dt';
    Dl.allowedChildren = [Dt, Dd];
    var Image = Quill$1.import('formats/image');
    var ATTRIBUTES = ['alt', 'height', 'width', 'data-fileid'];

    var SfdcImage = function (_Image) {
      inherits(SfdcImage, _Image);

      function SfdcImage() {
        classCallCheck$1(this, SfdcImage);
        return possibleConstructorReturn(this, (SfdcImage.__proto__ || Object.getPrototypeOf(SfdcImage)).apply(this, arguments));
      }

      createClass$1(SfdcImage, [{
        key: 'format',
        value: function format(name, value) {
          if (ATTRIBUTES.indexOf(name) > -1) {
            if (value) {
              this.domNode.setAttribute(name, value);
            } else {
              this.domNode.removeAttribute(name);
            }
          } else {
            get(SfdcImage.prototype.__proto__ || Object.getPrototypeOf(SfdcImage.prototype), 'format', this).call(this, name, value);
          }
        }
      }], [{
        key: 'formats',
        value: function formats(domNode) {
          return ATTRIBUTES.reduce(function (formats, attribute) {
            if (domNode.hasAttribute(attribute)) {
              formats[attribute] = domNode.getAttribute(attribute);
            }

            return formats;
          }, {});
        }
      }]);
      return SfdcImage;
    }(Image);

    SfdcImage.blotName = 'image';
    SfdcImage.tagName = 'IMG';
    var Block$2 = Quill$1.import('blots/block');
    var Container$1 = Quill$1.import('blots/container');
    var Parchment$2 = Quill$1.import('parchment');

    var QuoteBlock = function (_Block) {
      inherits(QuoteBlock, _Block);

      function QuoteBlock() {
        classCallCheck$1(this, QuoteBlock);
        return possibleConstructorReturn(this, (QuoteBlock.__proto__ || Object.getPrototypeOf(QuoteBlock)).apply(this, arguments));
      }

      createClass$1(QuoteBlock, [{
        key: 'format',
        value: function format(name, value) {
          if (name === Blockquote.blotName && !value) {
            this.replaceWith(Parchment$2.create(this.statics.scope));
          } else {
            get(QuoteBlock.prototype.__proto__ || Object.getPrototypeOf(QuoteBlock.prototype), 'format', this).call(this, name, value);
          }
        }
      }, {
        key: 'remove',
        value: function remove() {
          if (this.prev == null && this.next == null) {
            this.parent.remove();
          } else {
            get(QuoteBlock.prototype.__proto__ || Object.getPrototypeOf(QuoteBlock.prototype), 'remove', this).call(this);
          }
        }
      }, {
        key: 'replaceWith',
        value: function replaceWith(name, value) {
          this.parent.isolate(this.offset(this.parent), this.length());

          if (name === this.parent.statics.blotName) {
            this.parent.replaceWith(name, value);
            return this;
          } else {
            this.parent.unwrap();
            return get(QuoteBlock.prototype.__proto__ || Object.getPrototypeOf(QuoteBlock.prototype), 'replaceWith', this).call(this, name, value);
          }
        }
      }], [{
        key: 'formats',
        value: function formats(domNode) {
          return domNode.tagName === this.tagName ? undefined : get(QuoteBlock.__proto__ || Object.getPrototypeOf(QuoteBlock), 'formats', this).call(this, domNode);
        }
      }]);
      return QuoteBlock;
    }(Block$2);

    QuoteBlock.blotName = 'quote-block';
    QuoteBlock.className = 'ql-quote-block';
    QuoteBlock.tagName = ['P', 'H1', 'H2'];

    var Blockquote = function (_Container) {
      inherits(Blockquote, _Container);
      createClass$1(Blockquote, null, [{
        key: 'create',
        value: function create(value) {
          var node = get(Blockquote.__proto__ || Object.getPrototypeOf(Blockquote), 'create', this).call(this, value);
          return node;
        }
      }, {
        key: 'formats',
        value: function formats(domNode) {
          return domNode.tagName.toLowerCase();
        }
      }]);

      function Blockquote(domNode) {
        classCallCheck$1(this, Blockquote);
        return possibleConstructorReturn(this, (Blockquote.__proto__ || Object.getPrototypeOf(Blockquote)).call(this, domNode));
      }

      createClass$1(Blockquote, [{
        key: 'format',
        value: function format(name, value) {
          return defineProperty({}, this.statics.blotName, this.statics.formats(this.domNode));
        }
      }, {
        key: 'formats',
        value: function formats(domNode) {
          return defineProperty({}, this.statics.blotName, this.statics.formats(this.domNode));
        }
      }, {
        key: 'insertBefore',
        value: function insertBefore(blot, ref) {
          if (blot instanceof Block$2) {
            get(Blockquote.prototype.__proto__ || Object.getPrototypeOf(Blockquote.prototype), 'insertBefore', this).call(this, blot, ref);
          } else {
            var index = ref == null ? this.length() : ref.offset(this);
            var after = this.split(index);
            after.parent.insertBefore(blot, after);
          }
        }
      }, {
        key: 'replace',
        value: function replace(target) {
          if (target.statics.blotName !== this.statics.blotName) {
            var item = Parchment$2.create(this.statics.defaultChild);
            target.moveChildren(item);
            this.appendChild(item);
          }

          get(Blockquote.prototype.__proto__ || Object.getPrototypeOf(Blockquote.prototype), 'replace', this).call(this, target);
        }
      }, {
        key: 'remove',
        value: function remove() {
          if (this.domNode.parentNode != null) {
            this.domNode.parentNode.removeChild(this.domNode);
          }

          this.detach();
        }
      }, {
        key: 'optimize',
        value: function optimize() {
          get(Blockquote.prototype.__proto__ || Object.getPrototypeOf(Blockquote.prototype), 'optimize', this).call(this);
          var next = this.next;

          if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && next.domNode.tagName === this.domNode.tagName) {
            next.moveChildren(this);
            next.remove();
          }
        }
      }]);
      return Blockquote;
    }(Container$1);

    Blockquote.blotName = 'blockquote';
    Blockquote.tagName = 'blockquote';
    Blockquote.scope = Parchment$2.Scope.BLOCK_BLOT;
    Blockquote.defaultChild = 'quote-block';
    Blockquote.allowedChildren = [QuoteBlock];
    var Inline$12 = Quill$1.import('blots/inline');

    var Bdo = function (_Inline) {
      inherits(Bdo, _Inline);

      function Bdo() {
        classCallCheck$1(this, Bdo);
        return possibleConstructorReturn(this, (Bdo.__proto__ || Object.getPrototypeOf(Bdo)).apply(this, arguments));
      }

      createClass$1(Bdo, null, [{
        key: 'create',
        value: function create(value) {
          var node = get(Bdo.__proto__ || Object.getPrototypeOf(Bdo), 'create', this).call(this);
          node.setAttribute('dir', value);
          return node;
        }
      }, {
        key: 'formats',
        value: function formats(node) {
          return node.getAttribute('dir');
        }
      }]);
      return Bdo;
    }(Inline$12);

    Bdo.blotName = 'bdo';
    Bdo.tagName = 'BDO';
    var Inline$13 = Quill$1.import('blots/inline');

    var Dfn = function (_Inline) {
      inherits(Dfn, _Inline);

      function Dfn() {
        classCallCheck$1(this, Dfn);
        return possibleConstructorReturn(this, (Dfn.__proto__ || Object.getPrototypeOf(Dfn)).apply(this, arguments));
      }

      createClass$1(Dfn, null, [{
        key: 'create',
        value: function create(value) {
          var node = get(Dfn.__proto__ || Object.getPrototypeOf(Dfn), 'create', this).call(this);

          if (typeof value === 'string') {
            node.setAttribute('title', value);
          }

          return node;
        }
      }, {
        key: 'formats',
        value: function formats(node) {
          var value = node.getAttribute('title');

          if (value) {
            return value;
          } else {
            return true;
          }
        }
      }]);
      return Dfn;
    }(Inline$13);

    Dfn.blotName = 'dfn';
    Dfn.tagName = 'DFN';
    var Inline$14 = Quill$1.import('blots/inline');

    var Grammarly = function (_Inline) {
      inherits(Grammarly, _Inline);

      function Grammarly() {
        classCallCheck$1(this, Grammarly);
        return possibleConstructorReturn(this, (Grammarly.__proto__ || Object.getPrototypeOf(Grammarly)).apply(this, arguments));
      }

      return Grammarly;
    }(Inline$14);

    Grammarly.tagName = 'G';
    Grammarly.blotName = 'grammarly-inline';
    Grammarly.className = 'gr_';
    var Inline$15 = Quill$1.import('blots/inline');

    var MentionBlot = function (_Inline) {
      inherits(MentionBlot, _Inline);

      function MentionBlot() {
        classCallCheck$1(this, MentionBlot);
        return possibleConstructorReturn(this, (MentionBlot.__proto__ || Object.getPrototypeOf(MentionBlot)).apply(this, arguments));
      }

      createClass$1(MentionBlot, [{
        key: 'format',
        value: function format(name, value) {
          if (name === 'data-mention' && value) {
            this.domNode.setAttribute(name, value);
          } else {
            get(MentionBlot.prototype.__proto__ || Object.getPrototypeOf(MentionBlot.prototype), 'format', this).call(this, name, value);
          }
        }
      }], [{
        key: 'create',
        value: function create(id) {
          var node = get(MentionBlot.__proto__ || Object.getPrototypeOf(MentionBlot), 'create', this).call(this);
          node.classList.add('quill_widget_element');
          node.setAttribute('contenteditable', false);
          node.setAttribute('tabindex', "-1");
          node.setAttribute('data-widget', 'chatterMention');
          node.setAttribute('data-mention', id);
          node.addEventListener('keydown', function (event) {
            if (event.keyCode === 8 || event.keyCode === 46) {
              event.preventDefault();
              var parent = node.parentNode;

              if (parent) {
                parent.removeChild(node);
                parent.dispatchEvent(new CustomEvent('deletemention', {
                  bubbles: true
                }));
              }
            }
          });
          node.addEventListener('click', function (event) {
            node.focus();
            node.dispatchEvent(new CustomEvent('clickmention', {
              bubbles: true
            }));
          });
          return node;
        }
      }, {
        key: 'formats',
        value: function formats(domNode) {
          return domNode.getAttribute('data-mention');
        }
      }]);
      return MentionBlot;
    }(Inline$15);

    MentionBlot.blotName = 'mention';
    MentionBlot.tagName = 'span';
    MentionBlot.className = 'ql-chatter-mention';
    var BlockEmbed$2 = Quill$1.import('blots/block/embed');

    var CodeSnippet = function (_BlockEmbed) {
      inherits(CodeSnippet, _BlockEmbed);

      function CodeSnippet() {
        classCallCheck$1(this, CodeSnippet);
        return possibleConstructorReturn(this, (CodeSnippet.__proto__ || Object.getPrototypeOf(CodeSnippet)).apply(this, arguments));
      }

      createClass$1(CodeSnippet, null, [{
        key: 'create',
        value: function create(data) {
          var node = get(CodeSnippet.__proto__ || Object.getPrototypeOf(CodeSnippet), 'create', this).call(this);
          node.setAttribute('contenteditable', false);
          node.setAttribute('tabindex', "-1");
          node.classList.add('quill_widget_wrapper');
          node.classList.add('quill_widget_block');
          var pre = document.createElement("pre");
          pre.setAttribute('spellcheck', false);
          pre.setAttribute('data-widget', 'codeSnippet');
          pre.classList.add('quill_widget_element');
          node.appendChild(pre);
          var code = document.createElement("code");
          code.setAttribute('class', 'language-javascript');
          data = data.replace(/</g, "&lt;");
          data = data.replace(/>/g, "&gt;");
          node.setAttribute("data-code", data);

          if (window.Aura && Aura.Quill && Aura.Quill.Prettify) {
            var highlightedCode = Aura.Quill.Prettify.PR.prettyPrintOne(data, "", true);
            highlightedCode = highlightedCode.replace(/<li/gi, "<span");
            highlightedCode = highlightedCode.replace(/<\/li>/gi, "</span>");
            highlightedCode = highlightedCode.replace(/<ol/gi, "<span");
            highlightedCode = highlightedCode.replace(/<\/ol>/gi, "</span>");
            code.innerHTML = highlightedCode;
          } else {
            code.innerHTML = data;
          }

          pre.appendChild(code);
          node.addEventListener('keydown', function (event) {
            if (event.keyCode === 8 || event.keyCode === 46) {
              event.preventDefault();
              event.stopPropagation();
              node.parentNode.removeChild(node);
            }
          });
          node.addEventListener('click', function (event) {
            event.stopPropagation();
            node.focus();
          });
          return node;
        }
      }, {
        key: 'value',
        value: function value(node) {
          if (node.hasAttribute("data-code")) {
            return node.getAttribute("data-code");
          }

          return node.innerText;
        }
      }]);
      return CodeSnippet;
    }(BlockEmbed$2);

    CodeSnippet.blotName = 'code-snippet';
    CodeSnippet.className = 'ql-codesnippet';
    CodeSnippet.tagName = 'pre';
    var Parchment$3 = Quill$1.import('parchment');
    var config$1 = {
      scope: Parchment$3.Scope.BLOCK,
      whitelist: ['', 'left', 'right', 'center', 'justify']
    };
    var AlignStyle = new Parchment$3.Attributor.Style('align', 'text-align', config$1);
    var FontStyle = Quill$1.import('attributors/style/font');
    var SizeStyle = Quill$1.import('attributors/style/size');
    var ColorStyle = Quill$1.import('attributors/style/color');
    var Delta = Quill$1.import('delta');
    SizeStyle.whitelist = null;
    Quill$1.register(BoldBlot, true);
    Quill$1.register(ItalicBlot, true);
    Quill$1.register(AlignStyle, true);
    Quill$1.register(FontStyle$1, true);
    Quill$1.register(SizeStyle, true);
    Quill$1.register(ColorStyle, true);
    Quill$1.register(SfdcImage, true);
    Quill$1.register(Blockquote, true);
    Quill$1.register(QuoteBlock, true);
    Quill$1.register(Table, true);
    Quill$1.register(Abbr, true);
    Quill$1.register(Small, true);
    Quill$1.register(Big, true);
    Quill$1.register(Cite, true);
    Quill$1.register(Address, true);
    Quill$1.register(Del, true);
    Quill$1.register(Samp, true);
    Quill$1.register(Var, true);
    Quill$1.register(Q, true);
    Quill$1.register(Ins, true);
    Quill$1.register(Kbd, true);
    Quill$1.register(Dt, true);
    Quill$1.register(Dl, true);
    Quill$1.register(Dd, true);
    Quill$1.register(Divider, true);
    Quill$1.register(Bdo, true);
    Quill$1.register(Dfn, true);
    Quill$1.register(Grammarly, true);
    Quill$1.register(MentionBlot, true);
    Quill$1.register(CodeSnippet, true);
    Quill$1.Delta = Delta;
    var Quill = lwc.registerComponent(Quill$1, {
      tmpl: _tmpl$1
    });

    var labelImageSizeExceeded = 'The image exceeded the maximum size of 1 MB.';

    var labelImageUploadFailed = 'There was a problem uploading the file.';

    const QUILL_EMITTER_EVENT_LIST = ['selectionchange', 'mousedown', 'mouseup', 'click'];
    const Delta$1 = Quill.Delta;
    const ALLOWED_FORMATS_FOR_API = ['align', 'font', 'size'
    /* the following formats are not enabled for 220,
       leaving them here to simplify enabling them
    'link',
    'indent',
    'list',
    'bold',
    'italic',
    'strike',
    'header',
    'direction',
    'code',
    'code-block',
    'color',
    'script',
    'underline',
    'background',*/
    ];
    const ALLOWED_SIZES = [8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72];
    const FONT_LIST = [{
      label: 'Salesforce Sans',
      value: 'default'
    }, {
      label: 'Arial',
      class: 'sans-serif',
      value: 'sans-serif'
    }, {
      label: 'Courier',
      class: 'courier',
      value: 'courier'
    }, {
      label: 'Verdana',
      class: 'verdana',
      value: 'verdana'
    }, {
      label: 'Tahoma',
      class: 'tahoma',
      value: 'tahoma'
    }, {
      label: 'Garamond',
      class: 'garamond',
      value: 'garamond'
    }, {
      label: 'Times New Roman',
      class: 'serif',
      value: 'serif'
    }];
    const ALLOWED_FONTS = FONT_LIST.map(item => {
      return item.value;
    });
    const ALLOWED_TAGS = ['a', 'abbr', 'acronym', 'address', 'b', 'br', 'big', 'blockquote', 'caption', 'cite', 'code', 'col', 'colgroup', 'del', 'div', 'dl', 'dd', 'dt', 'em', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'i', 'img', 'ins', 'kbd', 'li', 'ol', 'p', 'param', 'pre', 'q', 's', 'samp', 'small', 'span', 'strong', 'sub', 'sup', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'tt', 'u', 'ul', 'var', 'strike', 'font'];
    const ALLOWED_ATTRS = ['accept', 'action', 'align', 'alt', 'autocomplete', 'background', 'bgcolor', 'border', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'coords', 'datetime', 'default', 'dir', 'disabled', 'download', 'enctype', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'ismap', 'label', 'lang', 'list', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'multiple', 'name', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'span', 'srclang', 'start', 'src', 'step', 'style', 'summary', 'tabindex', 'target', 'title', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns', // for custom blots
    'data-fileid'];
    const IMAGE_MAX_SIZE = 1048576; // Max size of image: 1MB - 1048576 bytes

    function _sanitize(val) {
      return sanitizeHTML(val, {
        ALLOWED_TAGS,
        ALLOWED_ATTRS
      });
    }

    function computeIndentLevel(node) {
      const indentMatch = node.className.match(/ql-indent-([0-9]+)/);

      if (indentMatch) {
        return parseInt(indentMatch[1], 10);
      }

      return 0;
    } // Patches quill emitter
    // https://github.com/quilljs/quill/blob/5b28603337f3a7a2b651f94cffc9754b61eaeec7/core/emitter.js#L8
    // To fix shadow dom issue


    function applyEmitterShadowDOMFix(quillInstance) {
      const callbacks = {};
      QUILL_EMITTER_EVENT_LIST.forEach(eventName => {
        function callback() {
          const args = ArraySlice.call(arguments, 0);

          if (quillInstance && quillInstance.emitter) {
            quillInstance.emitter.handleDOM(args[0]);
          }
        }

        document.addEventListener(eventName, callback);
        callbacks[eventName] = callback;
      });

      function removeEventListeners() {
        QUILL_EMITTER_EVENT_LIST.forEach(eventName => {
          document.removeEventListener(eventName, callbacks[eventName]);
        });
      }

      return removeEventListeners;
    }
    /**
     * Turn a list with ql- classes into a nested list.
     * Recursive!
     *
     * @param  {Array} list         an array of list items
     * @param  {Number} indentLevel the current indent level
     * @param  {String} type        ol or ul
     * @return {HTMLElement}        A DOM element
     */


    function nestList(list, indentLevel, type) {
      let level;
      let thisNode;
      let lastNode;
      const returnNode = document.createElement(type);

      while (list.length > 0) {
        if (thisNode) {
          lastNode = thisNode;
        }

        thisNode = list[0];
        level = computeIndentLevel(thisNode); // should be a sub-list. Recurse!

        if (lastNode && level > indentLevel) {
          lastNode.appendChild(nestList(list, level, type));
        } else if (level < indentLevel) {
          return returnNode;
        } else {
          thisNode.removeAttribute('class');
          returnNode.appendChild(list.shift());
        }
      }

      return returnNode;
    }
    /**
     * Recursivly flatten a nested list
     * an add quill classes
     *
     * No return, this will TRANSFORM the passed list
     * @param  {HTMLElement} list        This list node
     * @param  {Number} indentLevel The indentation level of the list passed
     */


    function unnestList(list, indentLevel) {
      const children = Array.prototype.slice.call(list.childNodes);
      children.forEach(node => {
        if (indentLevel > 0) {
          node.className = 'ql-indent-' + indentLevel;
        }

        Array.prototype.slice.call(node.childNodes).forEach(childNode => {
          const regex = /ol|ul/i;

          if (regex.test(childNode.tagName)) {
            unnestList(childNode, indentLevel + 1);
          }
        });
      });
    }

    function cleanInput(html) {
      const frag = document.createElement('div'); // eslint-disable-next-line @lwc/lwc/no-inner-html

      frag.innerHTML = _sanitize(html);
      const lists = Array.prototype.slice.call(frag.querySelectorAll('ol,ul'));

      if (lists) {
        lists.forEach(list => {
          unnestList(list, 0);
          const flatList = list.querySelectorAll('li');

          if (flatList.length > 0) {
            for (let i = 0; i < flatList.length; i += 1) {
              list.appendChild(flatList[i]);
            }
          }
        });
      } // eslint-disable-next-line @lwc/lwc/no-inner-html


      return frag.innerHTML;
    }

    function cleanOutput(html) {
      const frag = document.createElement('div'); // eslint-disable-next-line @lwc/lwc/no-inner-html

      frag.innerHTML = html;
      const lists = Array.prototype.slice.call(frag.querySelectorAll('ol,ul'));

      if (lists) {
        lists.forEach(list => {
          const myList = nestList(Array.prototype.slice.call(list.querySelectorAll('li')), 0, list.tagName);
          list.parentNode.replaceChild(myList, list);
        });
      } // eslint-disable-next-line @lwc/lwc/no-inner-html


      return frag.innerHTML;
    }

    function insertEmbed(quillInstance, format, value, attributes) {
      const insert = {};
      const attrs = attributes || {}; // this is important! if the editor
      // is not focused we can't insert.

      quillInstance.focus();
      const range = quillInstance.getSelection(); // TODO: handle alt tags!

      insert[format] = value;
      const delta = new Delta$1().retain(range.index).delete(range.length);
      delta.insert(insert, attrs);
      return quillInstance.updateContents(delta);
    }
    /**
     * 1. Attempt to upload the selected file
     *     a. If the file size exceeds 1MB, the file will not be uploaded
     *     b. If the upload encounters a problem, an error is thrown
     * 2. If the file is uploaded, insert the file/image into the editor
     * @param {Object} quillApi - Quill instance into which the image should be inserted
     * @param {Object} file - The file that needs to be uploaded
     * @param {Object} shareWithEntityId - Entity ID to share the image with
     */


    function uploadAndInsertSelectedFile(quillApi, file, shareWithEntityId) {
      aura.createComponent('force:fileUpload', {
        shareWithEntityId,
        onUpload: serverResponse => {
          if (serverResponse.successful) {
            this.insertEmbed(quillApi, 'image', serverResponse.response.downloadUrl, {
              alt: file.name
            });
          }
        }
      }, (uploadFileCmp, status) => {
        if (status === 'SUCCESS') {
          uploadFileCmp.uploadFile(file);
        }
      });
    }

    function filterFormats(formats) {
      const ret = {};
      const keys = Object.keys(formats);
      keys.forEach(key => {
        let value = formats[key]; // remove formats not in the white list

        if (ALLOWED_FORMATS_FOR_API.indexOf(key) === -1) {
          return;
        } // check font values whitelist


        if (key === 'font' && ALLOWED_FONTS.indexOf(value) === -1) {
          return;
        } // cast size to int, check value, cast back to string later when we set it


        if (key === 'size') {
          const size = parseInt(value, 10); // fast short circuit non number values;

          if (isNaN(size)) {
            return;
          }

          if (ALLOWED_SIZES.indexOf(size) === -1) {
            return;
          }

          value = size;
        }

        ret[key] = value;
      });
      return ret;
    }

    function applyFormats(api, formats) {
      const filtered = filterFormats(formats);
      Object.keys(filtered).forEach(key => {
        let value = formats[key];

        if (key === 'size') {
          value = `${value}px`;
        }

        api.format(key, value);
      });
    }

    const inputRichTextLibrary = {
      Delta: Delta$1,
      filterFormats,
      applyFormats,
      computeIndentLevel,
      nestList,
      unnestList,
      cleanInput,
      cleanOutput,
      insertEmbed,
      uploadAndInsertSelectedFile,
      ALLOWED_SIZES,
      FONT_LIST,
      ALLOWED_ATTRS,
      ALLOWED_TAGS,
      IMAGE_MAX_SIZE,
      labelImageSizeExceeded,
      labelImageUploadFailed
    };
    var lightningQuill = {
      Quill,
      inputRichTextLibrary,
      applyEmitterShadowDOMFix
    };

    const EMPTY_CHARACTER = '\u200B';
    const emptyCharMatcher = new RegExp(EMPTY_CHARACTER, 'g');
    const linesWithOnlyEmptyCharMatcher = new RegExp(`<p>${EMPTY_CHARACTER}</p>`, 'g');

    function isNonCharacterKey(keyCode) {
      return keyCode && keyCode < 48;
    }
    /**
     * Issue: the first couple letters are entered directly without being considered
     *   as part of IME. This has to do with quill trying to create the first text
     *   node and breaking the IME. This only happens to Chrome and IE11.
     * Workaround: on compositionstart, insert empty characters at the beginning of
     *   every line. Remove all the empty chars when selection is changed.
     *
     * We use a class here to store the state of the hack instead of creating private
     * attributes in the component.
     *
     * @param {Object} rte - input rich text LWC instantce
     */


    class IMEHandler {
      constructor(inputRichText) {
        this.inputRichText = void 0;
        this.isEmptyCharInserted = false;
        this.inputRichText = inputRichText;
      }

      initializeEmptyCharHack() {
        const quill = this.inputRichText.quill;
        const editorElement = quill.root;
        let shouldInsertEmptyChar = false;

        if (isChrome) {
          const handleInsertEmptyChar = event => {
            if (isNonCharacterKey(event.keyCode)) {
              return;
            } // Find all the paragraphs that have no text or images - make sure
            // they have an empty char


            const children = editorElement.querySelectorAll('p, li');

            for (let i = 0; i < children.length; i += 1) {
              const child = children[i];

              if (child.textContent.length === 0 && child.getElementsByTagName('img').length === 0) {
                child.textContent = EMPTY_CHARACTER;
              }
            }

            this.isEmptyCharInserted = true;
          };

          editorElement.addEventListener('compositionstart', handleInsertEmptyChar);
          shouldInsertEmptyChar = true;
        } else if (isIE11) {
          const handleInsertEmptyChar = () => {
            // Insert empty character into the editor when there is no content
            // This is to make sure it works in accordance to the hack applied
            // for W-3946761.
            // Using the workaround for Chrome here would cause IE11 to freeze.
            // IE11 also doesn't need every empty line to have empty char.
            if (quill.editor.isBlank()) {
              const child = editorElement.querySelector('p');
              child.textContent = EMPTY_CHARACTER;
              this.isEmptyCharInserted = true;
            }
          };

          ['focus', 'keydown'].forEach(eventName => {
            editorElement.addEventListener(eventName, handleInsertEmptyChar);
          });
          shouldInsertEmptyChar = true;
        }

        if (shouldInsertEmptyChar) {
          quill.on('selection-change', () => {
            if (this.isEmptyCharInserted) {
              this.clearEmptyCharIfTrulyEmpty(quill);
            }
          });
        }
      }

      clearEmptyCharIfTrulyEmpty() {
        const quill = this.inputRichText.quill;
        const text = quill.getText().replace(/\n/, ''); // if the text is only the empty char that means the editor
        // should be empty

        if (!quill.hasFocus() && text === EMPTY_CHARACTER) {
          quill.setText('');
          this.isEmptyCharInserted = false;
        }
      }

      clearEmptyChars(html) {
        if (this.isEmptyCharInserted) {
          /* W-7075801 Ensure empty lines with only empty character are replace with br */
          if (linesWithOnlyEmptyCharMatcher.test(html)) {
            html = html.replace(linesWithOnlyEmptyCharMatcher, '<p><br/></p>');
          }

          return html.replace(emptyCharMatcher, '');
        }

        return html;
      }

    }

    lwc.registerDecorators(IMEHandler, {
      fields: ["inputRichText", "isEmptyCharInserted"]
    });

    var IMEHandler$1 = lwc.registerComponent(IMEHandler, {
      tmpl: _tmpl$1
    });

    const {
      Quill: Quill$2,
      inputRichTextLibrary: inputRichTextLibrary$1,
      applyEmitterShadowDOMFix: applyEmitterShadowDOMFix$1
    } = lightningQuill;
    const TOOLBAR_CATEGORIES = {
      FORMAT_TEXT: 'FORMAT_TEXT',
      FORMAT_BACKGROUND: 'FORMAT_BACKGROUND',
      FORMAT_BODY: 'FORMAT_BODY',
      FORMAT_FONT: 'FORMAT_FONT',
      ALIGN_TEXT: 'ALIGN_TEXT',
      INSERT_CONTENT: 'INSERT_CONTENT',
      REMOVE_FORMATTING: 'REMOVE_FORMATTING'
    };
    const ALLOWED_IMAGE_FORMATS = ['image/png', 'image/jpg', 'image/jpeg', 'image/gif'];
    const CREATE_LINK_PANEL_WIDTH = 320,
          DEFAULT_FONT_NAME_VALUE = 'default',
          DEFAULT_FONT_SIZE_VALUE = '12px',
          DEFAULT_TEXT_COLOR_VALUE = '#000000',
          DEFAULT_CATEGORY = 'FORMAT_TEXT',
          SF_DEFAULT_FORMATS = ['table', 'image', 'link', 'header'],
          BUTTON_CLASSNAMES = 'slds-button slds-button_icon-border-filled',
          TOOLBAR_SELECTOR = '.slds-rich-text-editor__toolbar > ul li .slds-button, .overflow-menu > ul > li .slds-button';
    const i18n$c = {
      alignText: labelAlignText,
      bold: labelBold,
      bullet: labelBullet,
      centerAlign: labelCenterAlign,
      composeText: labelComposeText,
      font: labelFont,
      fontSize: labelFontSize,
      formatBackground: labelFormatBackground,
      formatBody: labelFormatBody,
      formatFont: labelFormatFont,
      formatText: labelFormatText,
      indent: labelIndent,
      insertContent: labelInsertContent,
      italic: labelItalic,
      leftAlign: labelLeftAlign,
      link: labelLink,
      image: labelImage,
      linkCancel: labelLinkCancel,
      linkInput: labelLinkInput,
      linkSave: labelLinkSave,
      number: labelNumber,
      outdent: labelOutdent,
      removeFormatting: labelRemoveFormatting,
      rightAlign: labelRightAlign,
      strike: labelStrike,
      underline: labelUnderline
    };

    function defaults() {
      const textAlignLeftButton = {
        label: i18n$c.leftAlign,
        iconName: 'utility:left_align_text',
        format: 'align',
        value: isRTL() ? 'left' : ''
      };
      const textAlignRightButton = {
        label: i18n$c.rightAlign,
        iconName: 'utility:right_align_text',
        format: 'align',
        value: 'right'
      };
      const textAlignCenterButton = {
        label: i18n$c.centerAlign,
        iconName: 'utility:center_align_text',
        format: 'align',
        value: 'center'
      };
      const textAlignButtons = isRTL() ? [textAlignRightButton, textAlignCenterButton, textAlignLeftButton] : [textAlignLeftButton, textAlignCenterButton, textAlignRightButton];
      return [{
        category: TOOLBAR_CATEGORIES.FORMAT_TEXT,
        label: i18n$c.formatText,
        buttons: [{
          label: i18n$c.bold,
          iconName: 'utility:bold',
          format: 'bold'
        }, {
          label: i18n$c.italic,
          iconName: 'utility:italic',
          format: 'italic'
        }, {
          label: i18n$c.underline,
          iconName: 'utility:underline',
          format: 'underline'
        }, {
          label: i18n$c.strike,
          iconName: 'utility:strikethrough',
          format: 'strike'
        }]
      }, {
        category: TOOLBAR_CATEGORIES.FORMAT_BACKGROUND,
        label: i18n$c.formatBackground,
        buttons: []
      }, {
        category: TOOLBAR_CATEGORIES.FORMAT_BODY,
        label: i18n$c.formatBody,
        buttons: [{
          label: i18n$c.bullet,
          iconName: 'utility:richtextbulletedlist',
          format: 'list',
          value: 'bullet'
        }, {
          label: i18n$c.number,
          iconName: 'utility:richtextnumberedlist',
          format: 'list',
          value: 'ordered'
        }, {
          label: i18n$c.indent,
          iconName: 'utility:richtextindent',
          format: 'indent',
          value: '+1'
        }, {
          label: i18n$c.outdent,
          iconName: 'utility:richtextoutdent',
          format: 'indent',
          value: '-1'
        }]
      }, {
        category: TOOLBAR_CATEGORIES.ALIGN_TEXT,
        label: i18n$c.alignText,
        buttons: textAlignButtons
      }, {
        category: TOOLBAR_CATEGORIES.INSERT_CONTENT,
        label: i18n$c.insertContent,
        buttons: [{
          label: i18n$c.link,
          iconName: 'utility:link',
          format: 'link'
        }, {
          label: i18n$c.image,
          iconName: 'utility:image',
          format: 'image'
        }]
      }, {
        category: TOOLBAR_CATEGORIES.REMOVE_FORMATTING,
        label: i18n$c.removeFormatting,
        buttons: [{
          label: i18n$c.removeFormatting,
          iconName: 'utility:remove_formatting',
          format: 'clean'
        }]
      }];
    }

    const FONT_LIST$1 = inputRichTextLibrary$1.FONT_LIST;
    const ALLOWED_SIZES$1 = [];
    inputRichTextLibrary$1.ALLOWED_SIZES.forEach(size => {
      ALLOWED_SIZES$1.push({
        label: `${size}`,
        value: `${size}px`
      });
    });
    const keyCodes$1 = {
      tab: 9,
      enter: 13,
      escape: 27,
      space: 32,
      end: 35,
      home: 36,
      left: 37,
      up: 38,
      right: 39,
      down: 40
    };
    const bindings = {
      // This will overwrite the default binding also named 'tab'
      // which would normally indent
      tab: {
        key: 9,
        shiftKey: false,

        handler() {
          // this will stop quill from preventingDefault
          // and stopping propigation on this event
          // so it will be handled normally
          return true;
        }

      },
      // names are not used, unique to avoid collision
      lightningOutdent: {
        key: 219,
        // [
        shortKey: true,

        handler() {
          this.quill.format('indent', '-1');
        }

      },
      lightningIndent: {
        key: 221,
        // ]
        shortKey: true,

        handler() {
          this.quill.format('indent', '+1');
        }

      }
    }; // Map for converting the size in <font size=x />
    // to an actual pixel value

    const FONT_SIZE_MAP = {
      1: '9px',
      2: '11px',
      3: '14px',
      4: '16px',
      5: '22px',
      6: '28px',
      7: '48px'
    };
    /**
     * Converts a CSS style value to an integer
     * Ex. "100px" -> 100
     * @param {HTMLElement} element - Element from which to retrieve the style
     * @param {String} style - The CSS style to retrieve from the element
     * @return {Integer} - Converted integer value
     */

    function getStyleAsInt(element, style) {
      return parseInt(element.style[style], 10);
    }
    /**
     * A WYSIWYG editor with a customizable toolbar for entering rich text
     */


    class LightningInputRichText extends lwc.LightningElement {
      constructor(...args) {
        super(...args);
        this._pendingFormats = [];
        this._valid = true;
        this._disabled = false;
        this.linkPanelOpen = false;
        this.queueLinkPanelOpen = false;
        this.selectedFontValue = DEFAULT_FONT_NAME_VALUE;
        this.selectedSizeValue = DEFAULT_FONT_SIZE_VALUE;
        this.quillNotReady = true;
        this.selectedTextColorValue = DEFAULT_TEXT_COLOR_VALUE;
        this.label = void 0;
        this.labelVisible = false;
        this.placeholder = void 0;
        this.disabledCategories = '';
        this.formats = '';
        this.variant = void 0;
        this.messageWhenBadInput = void 0;
        this.customButtons = void 0;
        this.shareWithEntityId = void 0;
        this.quill = void 0;
        this.initialRender = true;
        this.internalValue = void 0;
        this.linkValue = '';
        this.fontMenus = {
          fontList: FONT_LIST$1,
          sizeList: ALLOWED_SIZES$1
        };
      }

      /**
       * The HTML content in the rich text editor.
       * @type {string}
       *
       */
      get value() {
        return this.internalValue;
      }

      set value(val) {
        // Change internalValue and paste into editor only if
        // the contents are different from the previously saved value
        if (typeof val === 'string' && this.internalValue !== val) {
          this.internalValue = inputRichTextLibrary$1.cleanInput(val);

          if (!this.internalValue) {
            // eslint-disable-next-line no-console
            console.warn('No html sanitizer found for rich text, make sure to sanitize rich text before using lightning-input-rich-text. Using raw html value');
            this.internalValue = val;
          }

          this.setContent(this.internalValue, 'api');
        }
      }
      /**
       * Specifies whether the editor content is valid. If invalid, the slds-has-error class is added. This value defaults to true.
       * @type {boolean}
       * @default true
       */


      get valid() {
        return this._valid;
      }

      set valid(value) {
        this._valid = normalizeBoolean(value);

        if (this.quill) {
          const rteElement = this.template.querySelector('.slds-rich-text-editor');
          const editorElement = this.quill.root;

          if (!this.valid) {
            rteElement.classList.add('slds-has-error');
            editorElement.setAttribute('aria-describedby', this.errorMessageId);
          } else {
            rteElement.classList.remove('slds-has-error');
            editorElement.removeAttribute('aria-describedby');
          }
        }
      }
      /**
       * If present, the editor is disabled and users cannot interact with it.
       * @type {boolean}
       * @default false
       */


      get disabled() {
        return this._disabled;
      }

      set disabled(value) {
        this._disabled = normalizeBoolean(value);
      }
      /**
       * Sets focus on the rich text editor.
       */


      focus() {
        // Focus on inputRichText should activate editor.
        if (!this.quill) {
          this.activateEditor();
        }

        this.quill.root.focus();
      }
      /**
       * Removes focus from the rich text editor.
       */


      blur() {
        if (this.quill) {
          this.quill.root.blur();
        }
      }
      /**
       *
       * Sets a format in the editor from the cursor point onwards.
       * The format also applies to currently selected content.
       *
       * Valid formats are font, size, and align.
       * @param {Object} formats A key-value pair with format names and values.
       */


      setFormat(formats) {
        if (formats && this.quill) {
          inputRichTextLibrary$1.applyFormats(this.quill, deepCopy(formats));
          const selection = this.quill.getSelection();

          if (selection.length === 0) {
            this.syncFontMenus();
          }
        } else if (formats) {
          this._pendingFormats.push(formats);
        }
      }
      /**
       * Returns an object representing the formats applied to the current selection.
       * Only align, font, and size are supported.
       *
       * @returns {Object} format an object representing the formats applied
       *                   to the selection or editor
       */


      getFormat() {
        if (!this.quill) {
          this.activateEditor();
        }

        return inputRichTextLibrary$1.filterFormats(this.quill.getFormat());
      }

      syncFontMenus() {
        const format = this.quill.getFormat();
        this.updateFontMenu(format);
        this.updateSizeMenu(format);
      }

      get showLinkValue() {
        return this.linkValue;
      }

      get isBottomToolbar() {
        return this.variant === 'bottom-toolbar';
      }

      get isColorpickerVisible() {
        return this.formats.indexOf('color') > -1;
      }

      get isFontMenusVisible() {
        if (this.disabledCategories.indexOf(TOOLBAR_CATEGORIES.FORMAT_FONT) !== -1) {
          return false;
        } // If custom formats are specified,
        // hide the fonts menus if font is not a part
        // of the custom formats


        if (this.formats.length > 0) {
          if (this.formats.indexOf('font') === -1) {
            return false;
          }
        }

        return true;
      }

      get errorMessage() {
        return this.messageWhenBadInput;
      }

      get i18n() {
        return i18n$c;
      }

      get labelId() {
        return this.uniqueLabelId;
      }

      get errorMessageId() {
        const msg = this.template.querySelector('[data-error-message]');
        return getRealDOMId(msg);
      }

      get toolbarAriaLabel() {
        return this.disabled ? 'disabled' : '';
      }

      get renderLabel() {
        return this.labelVisible || this.label;
      }

      get computedLabel() {
        return this.label ? this.label : this.i18n.composeText;
      }

      get computedLabelClass() {
        const classnames = classSet('slds-form-element__label');
        return classnames.add({
          'slds-assistive-text': !this.labelVisible
        }).toString();
      }
      /**
       * Compute the complete set of buttons to be displayed and
       * add appropriate class names to each button
       *  - If the formats attribute is specified:
       *      Filter out buttons which do not match the specified formats
       *  - Merge the custom buttons with this filtered button set
       *  - Remove an entire category if:
       *      a. There are no remaining buttons in that category
       *      b. If it is a disabled category
       *  - Add the right class names to each remaining button
       * @returns {Object} Filtered set categories and buttons
       */


      get computedCategories() {
        // If custom formats are specified,
        // filter out the buttons which do not match
        // the specified custom formats, within each category
        const customFormats = !!this.formats.length;
        const formatList = this.formats;
        let categories = defaults();

        if (customFormats) {
          categories.forEach(cat => {
            cat.buttons = cat.buttons.filter(button => formatList.includes(button.format));
          });
        } // Merge custom buttons after filtering out default buttons which
        // do not match custom formats, so that the custom buttons may be
        // included even when the custom formats do not specify them


        categories = this.mergeCustomToolbarButtons(categories); // only keep categories that have buttons and not disabled

        categories = categories.filter(cat => cat.buttons && cat.buttons.length > 0 && !this.disabledCategories.includes(cat.category)); // Add additional attributes to each button

        categories.forEach(cat => {
          cat.buttons.forEach(button => {
            // add classes
            if (button.format) {
              button.computedClass = `${BUTTON_CLASSNAMES} ql-${button.format}`;
            } else {
              button.computedClass = BUTTON_CLASSNAMES;
            } // add key for iterations


            button.key = button.label + button.value;
          });
        });
        return categories;
      }
      /**
       * Merge the provided custom buttons with the existing set
       * If custom buttons are provided:
       *      Check if the custom button's category exists in the existing set
       *          If yes, add the button(s) into that category
       *          If no, add that entire category along with button(s) into the existing set
       *      If custom buttons' categories are not specified, add buttons to the default category
       * @param {Array} buttonSet - Set of filtered buttons;
       * If custom formats are provided, this set consists of default
       * buttons with those buttons removed, which do not match the format
       * Else, it is the default set of buttons
       * @returns {Array} Returns the merged set of buttons
       */


      mergeCustomToolbarButtons(buttonSet) {
        if (this.customButtons) {
          let existingCategory = false;
          this.customButtons.forEach(customButton => {
            existingCategory = false;
            buttonSet.forEach(cat => {
              // If the custom button is of an existing category,
              // add the custom button to the existing button set under that category
              // If a category for the custom button was not given
              // add the custom button into the default (Format Text) category
              if (!existingCategory && (cat.category === customButton.category || !customButton.category && cat.category === DEFAULT_CATEGORY)) {
                existingCategory = true;
                cat.buttons = cat.buttons.concat(deepCopy(customButton.buttons));
              }
            }); // If the user button is not part of an existing category,
            // append the button info along with category information
            // to the complete set of buttons

            if (!existingCategory) {
              buttonSet = buttonSet.concat(deepCopy(customButton));
            }
          });
        }

        return buttonSet;
      }
      /**
       * If it is a bottom-toolbar variant, add the appropriate
       * slds class to the toolbar
       */


      setupToolbar() {
        if (this.isBottomToolbar) {
          const toolbar = this.template.querySelector('.slds-rich-text-editor__toolbar');
          toolbar.classList.add('slds-rich-text-editor__toolbar_bottom');
        }
      }
      /**
       * For initial set up of buttons
       * We set the tabindex of every button to -1,
       * except the first button, which is set to 0
       *
       * This is so that tabbing through buttons is disabled
       * Instead ,users will be able to tab onto one button and use
       * arrow keys to navigate to other buttons
       */


      setupButtons() {
        const buttonList = this.template.querySelectorAll(TOOLBAR_SELECTOR);

        if (buttonList.length > 0) {
          this.setButtonTabindex(buttonList, 0);
        }
      }
      /**
       * Helper function to set tabindexes of all buttons to -1,
       * and to set the tabindex of the specified index to 0
       * @param {Array} buttonList - List of buttons to iterate through
       * @param {Number} index - Index of button whose tabindex to set to 0
       */


      setButtonTabindex(buttonList, index) {
        buttonList.forEach(button => {
          button.setAttribute('tabindex', -1);
        });
        buttonList[index].setAttribute('tabindex', 0);
      }
      /**
       * Attach custom handlers to the custom buttons
       * If custom buttons have been provided:
       *      Compare the custom button's format and the rendered
       *      toolbar button's quill class
       *      If they match, attach the provided custom handler as
       *      an onclick handler for that button
       */


      attachCustomButtonHandlers() {
        if (this.customButtons) {
          const renderedButtons = this.template.querySelectorAll(TOOLBAR_SELECTOR);
          this.customButtons.forEach(cat => {
            cat.buttons.forEach(button => {
              renderedButtons.forEach(renderedButton => {
                if (renderedButton.classList.contains('ql-' + button.format)) {
                  // Pass in the inputRichText component so that the handler
                  // has access to the quill instance
                  renderedButton.addEventListener('click', button.handler);
                }
              });
            });
          });
        }
      }
      /**
       * Add slds classes to the editor generated on initialization of Quill
       * @param {HTMLElement} qlEditor - Editor element generated from the
       * initialization of Quill
       */


      addInitialClassesAndAttributesToEditor(qlEditor) {
        qlEditor.classList.add('slds-rich-text-area__content');
        qlEditor.classList.add('slds-grow');
        qlEditor.classList.add('slds-text-color_weak');
        this.setAriaAttributesOnEditor(qlEditor);
      }
      /**
       * Add appropriate aria attributes based on values of label and labelVisible
       * @param {HTMLElement} qlEditor - Editor element on which to set aria attributes
       */


      setAriaAttributesOnEditor(qlEditor) {
        if (this.labelVisible || this.label) {
          qlEditor.setAttribute('aria-labelledby', this.uniqueLabelId);
        } else {
          qlEditor.setAttribute('aria-label', this.i18n.composeText);
        }
      }
      /**
       * Compute the list of formats to be passed in to the Quill configuration
       * If the formats attributes is specified, use that list
       * If formats are not specified:
       *      a. We set the formats of the buttons as the
       *         list of formats to pass into the Quill config
       *      b. Add font menus to list if it is not a disabled category
       * Add the Salesforce default formats to the filtered list - these are
       * on by default
       * @returns {Array} Final list of formats to pass into the Quill config
       */


      computeFormats() {
        let computedFormats = []; // If custom formats are specified, don't do anything
        // we will use this list in the quill config

        if (this.formats.length > 0) {
          return this.formats;
        } // If custom formats are not specified, we should set the
        // formats of the buttons as the formats list in the quill config
        // Visible buttons have already been calculated by the time
        // this stage is reached


        this.computedCategories.forEach(cat => {
          cat.buttons.forEach(button => {
            if (button.format) {
              // to make sure we don't have duplicates
              if (computedFormats.indexOf(button.format) === -1) {
                computedFormats.push(button.format);
              }
            }
          });
        }); // add font separately

        if (this.isFontMenusVisible) {
          computedFormats.push('font');
          computedFormats.push('size');
        }

        computedFormats = computedFormats.concat(SF_DEFAULT_FORMATS);
        return computedFormats;
      }
      /**
       * This is for conversion from <font size="">
       * to a quill size format. The font tag size is defined as
       * an integer between 1-7 with 3 being "normal" or default
       * there is no specified meaning to these sizes, so this is
       * a fairly arbitrary mapping based on experiments in the inspector
       * with font tags and slds
       * @param {Number} fontSize - Refers to the value of the size attribute
       * in a font tag
       * @returns {Number} - Value that corresponds to the right pixel size
       * in the FONT_SIZE_MAP to be rendered
       */


      getNormalizedFontSize(fontSize) {
        const size = fontSize || 3;
        const relativeSize = /^[+-]\d/.test(size) ? Number(size) + 3 : Number(size);
        let normalizedSize = relativeSize > 7 ? 7 : relativeSize;
        normalizedSize = relativeSize < 1 ? 1 : normalizedSize;
        return normalizedSize;
      }
      /**
       * Add matchers to quill so that particular tags can be converted from
       * one to another
       * Conversions:
       *      <font>    -> <span>
       *      <s>       -> <strike>
       *      <tt>      -> <code>
       *      <acronym> -> <abbr>
       *      <table>   -> {tableBlot}
       *      text-decoration
       *          underline    -> <underline>
       *          line-through -> <strike>
       */


      addTagMatchers() {
        // Convert font tags to spans
        this.quill.clipboard.addMatcher('font', (node, delta) => {
          let size = node.getAttribute('size'); // map <font> integers to px sizes

          if (size) {
            size = FONT_SIZE_MAP[this.getNormalizedFontSize(size)];
          } // size may still be undefined, that means it won't be applied
          // so this is fine


          const nodeFormats = {
            font: node.getAttribute('face'),
            // trust the defined font face
            size,
            color: node.getAttribute('color') // color is css compatible

          };
          return delta.compose(new Quill$2.Delta().retain(delta.length(), nodeFormats));
        }); // convert <s> to <strike>

        this.quill.clipboard.addMatcher('s', (node, delta) => {
          return delta.compose(new Quill$2.Delta().retain(delta.length(), {
            strike: true
          }));
        }); // convert <tt> to <code>

        this.quill.clipboard.addMatcher('tt', (node, delta) => {
          return delta.compose(new Quill$2.Delta().retain(delta.length(), {
            code: true
          }));
        }); // convert <acronym> to <abbr>

        this.quill.clipboard.addMatcher('acronym', (node, delta) => {
          const title = node.getAttribute('title');
          return delta.compose(new Quill$2.Delta().retain(delta.length(), {
            abbr: title ? title : true
          }));
        });
        this.quill.clipboard.addMatcher('span[style*=text-decoration]', (node, delta) => {
          const computedStyle = getComputedStyle(node) || node.style;
          const underline = computedStyle.textDecoration.match(/underline/);
          const strike = computedStyle.textDecoration.match(/line-through/);
          return delta.compose(new Quill$2.Delta().retain(delta.length(), {
            underline: underline ? true : false,
            strike: strike ? true : false
          }));
        }); // This matcher detects tables, and if tables are disabled, returns a normal
        // delta, otherwise it applies the table format

        this.quill.clipboard.addMatcher('table', node => {
          if (this.formats.indexOf('table') === -1) {
            // convert creates a delta from html, in this case the html
            // *inside* the <table>
            return this.quill.clipboard.convert(node.innerHTML); // eslint-disable-line @lwc/lwc/no-inner-html
          }

          const tableBlot = Quill$2.import('formats/table');
          return new Quill$2.Delta().insert({
            table: tableBlot.value(node)
          });
        });
      }
      /**
       * Initialize a new Quill instance and attach the required
       * handlers for various events
       *      1. Compute information required for configuring Quill
       *      2. Initialize Quill by passing in the computed configuration
       *      3. Add slds classes to editor element generated on init of Quill
       *      4. Add handlers for various events:
       *          a. on text change - dispatch change event
       *          b. on selection change update font and size menu values
       *          c. on double click, open link insertion panel if target is anchor
       *          d. attach custom handler for clicking on link insert button
       */


      initializeQuill() {
        const container = this.template.querySelector('.editor');
        const toolbar = this.template.querySelector('.slds-rich-text-editor__toolbar');
        const computedFormats = this.computeFormats();
        const placeholder = this.placeholder;
        this._hasBeenFocused = false; // Quill Configuration: https://quilljs.com/docs/configuration/

        const quillConfig = {
          modules: {
            toolbar,
            keyboard: {
              bindings
            }
          },
          formats: computedFormats,
          placeholder
        }; // Override S -> STRIKE

        const Strike = Quill$2.import('formats/strike');
        Strike.tagName = 'STRIKE'; // Quill uses <s> by default

        Quill$2.register(Strike, true); // Init Quill

        this.quill = new Quill$2(container, quillConfig); // Monkeypatches binding of event emitter
        // As it doesn't work w/ shadow dom out of the box

        this.removeQuillEmitterEventListeners = applyEmitterShadowDOMFix$1(this.quill);
        const editor = this.quill.root;
        this.addInitialClassesAndAttributesToEditor(this.quill.root);
        const imeHandler = new IMEHandler$1(this);
        imeHandler.initializeEmptyCharHack(); // If the editor is 'blank' it still contains a new
        // line (<p><br></p>); check if it is in fact blank
        // If so, we just use an empty string for the value
        // If not blank, clean the editor's contents
        // Fire a change event with the cleaned content as the value

        this.quill.on('text-change', () => {
          let cleanedContent = '';

          if (!this.quill.editor.isBlank()) {
            const editorContents = this.quill.scroll.domNode.innerHTML; // eslint-disable-line @lwc/lwc/no-inner-html

            cleanedContent = inputRichTextLibrary$1.cleanOutput(editorContents);
          } // make sure we don't send the hacky empty characters back to the user


          cleanedContent = imeHandler.clearEmptyChars(cleanedContent);
          this.internalValue = cleanedContent;
          this.dispatchChangeEvent();
        }); // Update the font, font size menu display values and button pressed state
        // depending on where the cursor is at the time

        this.quill.on('selection-change', range => {
          if (!this._hasBeenFocused) {
            // Due to a bug in quill setting the link format before focusing the cursor in
            // the editor causes the `ql-blank` to never be removed, this change prevents enabling
            // the link button until the editor has been focused (by the user)
            const qlLink = this.template.querySelector('.ql-link');

            if (qlLink) {
              qlLink.removeAttribute('disabled');
            }

            this._hasBeenFocused = true;
          }

          let format = null;

          if (range) {
            // If no range, nothing is selected
            format = this.quill.getFormat(range);
            this.updateFontMenu(format);
            this.updateSizeMenu(format);
            this.updateTextColorButton(format);
            this.applyTextAlignment(format);
          }

          this.updateButtonPressedState(range);
        }); // Update button pressed state depending on what the user is typing.

        this.quill.on('scroll-optimize', () => {
          // eslint-disable-next-line @lwc/lwc/no-async-operation
          requestAnimationFrame(() => {
            const range = this.quill.selection.getRange()[0];
            this.updateButtonPressedState(range);
          });
        }); // If user double clicks on a link node in the editor,
        // open the link insertion panel with the href value
        // populated in the input

        this.quill.scroll.domNode.addEventListener('dblclick', clickEvt => {
          const linkNode = this.getEnclosingLinkNode(clickEvt.target);

          if (linkNode) {
            this.expandSelectionToNode(linkNode);
            this.openLinkPanel(linkNode.getAttribute('href'));
          }
        });
        const toolbarModule = this.quill.getModule('toolbar');
        toolbarModule.addHandler('link', () => {
          this.linkButtonClickHandler();
        });
        toolbarModule.addHandler('image', () => {
          this.imageButtonClickHandler();
        });
        const previousCleanHandler = toolbarModule.handlers.clean;
        toolbarModule.addHandler('clean', () => {
          previousCleanHandler.call(this);
          const range = this.quill.getSelection();

          if (range) {
            const format = this.quill.getFormat(range);
            this.updateFontMenu(format);
            this.updateSizeMenu(format);
            this.updateTextColorButton(format);
          }

          this.updateButtonPressedState(range);
        }); // Add tag matchers

        this.addTagMatchers(); // Set initial value passed in to the editor

        if (this.internalValue) {
          this.setContent(this.internalValue, 'silent');
        } // When the editor is focused, set the slds-has-focus class and
        // dispatch focus event to execute onfocus method thats passed in


        editor.addEventListener('focus', () => {
          const rteElement = this.template.querySelector('.slds-rich-text-editor');
          rteElement.classList.add('slds-has-focus');
          this.dispatchEvent(new CustomEvent('focus'));
        }); // When the editor is blurred, remove the slds-has-focus class and
        // dispatch blur event to execute onblur method thats passed in

        editor.addEventListener('blur', () => {
          const rteElement = this.template.querySelector('.slds-rich-text-editor');
          rteElement.classList.remove('slds-has-focus');
          this.dispatchEvent(new CustomEvent('blur'));
        }); // If a file was pasted and is of the image formats supported,
        // proceed to upload the image and insert into the editor

        editor.addEventListener('paste', pasteEvt => {
          const clipboardData = pasteEvt.clipboardData;

          if (clipboardData && clipboardData.files && clipboardData.files.length && clipboardData.types.indexOf('text/html') === -1) {
            const pastedFile = clipboardData.files[0];

            if (ALLOWED_IMAGE_FORMATS.indexOf(pastedFile.type) > -1) {
              pasteEvt.preventDefault();
              pasteEvt.stopPropagation();
              inputRichTextLibrary$1.uploadAndInsertSelectedFile(this.quill, pastedFile, this.shareWithEntityId);
            }
          }
        });

        if (this._pendingFormats) {
          while (this._pendingFormats.length > 0) {
            const toDo = this._pendingFormats.shift();

            this.setFormat(toDo);
            this.syncFontMenus();
          }
        }
      } // Set Editor state to Disabled:
      // Disable Buttons, Comboboxes and the Editor

      /**
       * Set editor's state depending on the disabled attribute value
       * If disabled is set to true:
       *      a. Disable each button
       *      b. Disable the editor
       * If disabled is false:
       *      a. Ensure buttons are not disabled
       *      b. Enable the editor
       * Note: Font and font size menus are disabled directly
       *       based on the disabled attribute
       */


      setEditorAndButtonState() {
        const buttonList = this.template.querySelectorAll(TOOLBAR_SELECTOR);

        if (this.disabled) {
          buttonList.forEach(button => {
            button.setAttribute('disabled', true);
          });

          if (this.quill) {
            this.quill.disable();
          }
        } else {
          buttonList.forEach(button => {
            // prevent link button from being enabled until editor was focused
            if (!this._hasBeenFocused && button.classList.contains('ql-link')) {
              button.setAttribute('disabled', true);
            } else {
              button.removeAttribute('disabled');
            }
          });

          if (this.quill) {
            this.quill.enable();
          }
        }
      }
      /**
       * Set appropriate error classes based on the valid attribute value
       * If valid attribute is false:
       *      a. Set the slds error class on the editor element
       *      b. Unhide the element containing the error message
       *      c. Set aria-describedby to point to error message element
       */


      setEditorValidityState() {
        // Checking validity to append error class
        if (!this.valid) {
          // Add the error class on the editor
          const rteElement = this.template.querySelector('.slds-rich-text-editor');
          rteElement.classList.add('slds-has-error'); // Set editor's aria-describedby to point to error message element

          const editorElement = this.quill.root;
          editorElement.setAttribute('aria-describedby', this.errorMessageId);
        }
      }
      /**
       * Generate a unique id for the errormessage and label
       */


      connectedCallback() {
        this.classList.add('slds-form-element__control');
      }

      get uniqueLabelId() {
        const label = this.template.querySelector('[data-label]');
        return getRealDOMId(label);
      }

      activateEditor(e) {
        // Initialize the Quill instance on initial render
        if (this.initialRender) {
          this.setupToolbar();
          this.setupButtons();
          this.attachCustomButtonHandlers();
          this.initializeQuill();
          this.setEditorValidityState();
          this.initialRender = false;
          this.setEditorAndButtonState();
          this.quillNotReady = false;

          if (e) {
            const shouldFocus = e.target.classList.contains('standin') || e.target.localName === 'lightning-formatted-rich-text';

            if (shouldFocus) {
              this.quill.setSelection(this.quill.getLength());
            }
          }
        }
      }

      disconnectedCallback() {
        // Removes events listener bound by quill emitter fix
        if (this.removeQuillEmitterEventListeners && typeof this.removeQuillEmitterEventListeners === 'function') {
          this.removeQuillEmitterEventListeners();
        }
      }
      /**
       * On the first render cycle:
       *      1. Set up button tabindexes to be accessible
       *      2. Attach custom handlers for custom buttons
       *      3. Initialize the Quill instance
       * On every rerender:
       *      1. Set editor's disabled state based on disabled attribute
       *      2. Set editor's valid state based on the valid attribute
       *      3. Open the link panel if queued
       */


      renderedCallback() {
        this.setEditorAndButtonState();

        if (this.queueLinkPanelOpen) {
          this.queueLinkPanelOpen = false;
          const createLinkPanel = this.template.querySelector('.slds-popover__body');
          const buttonList = this.template.querySelectorAll(TOOLBAR_SELECTOR);
          this.calculateLinkPanelPositioning(createLinkPanel, buttonList);
          this.template.querySelector('.link-input').focus();
        }
      }
      /* *******************************
          Keyboard Button Navigation
      ******************************** */

      /**
       * Move to the next button on the toolbar
       * Wrap around to the first button if currently on last
       * Move to next button by:
       *      1. Setting tabindex to 0 on the new button and -1 on the rest
       *      2. Setting focus on the new button
       * @param {Array} buttonList - Array of toolbar button elements
       * @param {Number} currentIndex - Index on which focus is on currently
       */


      moveToNextButton(buttonList, currentIndex) {
        // Determine next index to move to
        let newIndex = currentIndex + 1;

        if (newIndex === buttonList.length) {
          newIndex = 0;
        } // Set tabindex 0 on new button moved to and -1 on rest


        this.setButtonTabindex(buttonList, newIndex);
        buttonList[newIndex].focus();
      }
      /**
       * Move to the previous button on the toolbar
       * Wrap around to the last button if currently on first
       * Move to previous button by:
       *      1. Setting tabindex to 0 on the new button and -1 on the rest
       *      2. Setting focus on the new button
       * @param {Array} buttonList - Array of toolbar button elements
       * @param {Number} currentIndex - Index on which focus is on currently
       */


      moveToPreviousButton(buttonList, currentIndex) {
        // Determine previous index to move to
        let newIndex = currentIndex - 1;

        if (newIndex === -1) {
          newIndex = buttonList.length - 1;
        } // Set tabindex 0 on new button moved to and -1 on rest


        this.setButtonTabindex(buttonList, newIndex);
        buttonList[newIndex].focus();
      }
      /**
       * Navigate the toolbar buttons based on the keyboard input:
       *      1. Determine the current button by capturing event's target
       *      2. If user pressed the right arrow, move to the next button in toolbar
       *      3. If user pressed the left arrow, move to the previous button in toolbar
       * @param {Event} evt - Keyboard event to retrieve target and keyCode from
       */


      navigateToolbar(evt) {
        this.activateEditor();
        const event = evt || window.event;
        const target = event.target;
        const buttonList = Array.from(this.template.querySelectorAll(TOOLBAR_SELECTOR)).filter(button => !button.disabled);

        if (target && target.classList.contains('slds-button')) {
          const currentIndex = buttonList.indexOf(target);

          if (currentIndex === -1) {
            return; // somehow the button that caught the event is not in the toolbar; ignore
          }

          if (event.keyCode === keyCodes$1.right) {
            this.moveToNextButton(buttonList, currentIndex);
          }

          if (event.keyCode === keyCodes$1.left) {
            this.moveToPreviousButton(buttonList, currentIndex);
          }
        }
      }
      /* ***********************************
           Inline image insertion handling
         *********************************** */

      /**
       * 1. Load the browser's native file selector
       * 2. Upload the selected file
       * 3. Insert the uploaded image into the editor
       */


      imageButtonClickHandler() {
        this.loadNativeFileSelector(fileList => {
          inputRichTextLibrary$1.uploadAndInsertSelectedFile(this.quill, fileList[0], this.shareWithEntityId);
        });
      }
      /**
       * 1. Load the browser's native file selector
       *     a. File selector will only show files of certain file types
       *     b. Supported file types - png, jpg, jpeg, gif
       * 2. Execute callback with the file list as param after a file has been selected
       * @param {Function} callback - Callback to be executed after file selection
       */


      loadNativeFileSelector(callback) {
        const container = document.createDocumentFragment();
        const input = document.createElement('input');
        input.type = 'file';
        input.multiple = false;
        input.accept = ALLOWED_IMAGE_FORMATS;

        input.onchange = function () {
          callback(this.files);
        };

        container.appendChild(input);
        input.click();
      }
      /* ***************************
           Link insertion handling
         *************************** */

      /**
       * Custom handler for onclick of link insertion button
       * 1. Get the text selected by user to insert a link on
       * 2. Get the formatting already present on the selected text
       * 3. If selected text already has a link format on it:
       *     a. If length of selected text is 0
       *         i.  Expand the selection length to the enclosing anchor node
       *         ii. Open create link panel with href value populated in input
       *     b. If length of selected text is more than 0
       *         i. Remove the link formatting from that selection
       * 4. If selected text does not have a link format on it:
       *     a. Open create link panel with 'http://' populated in input
       */


      linkButtonClickHandler() {
        const quillApi = this.quill;
        const selection = quillApi.getSelection();
        const format = quillApi.getFormat();
        quillApi.focus();

        if (format.link) {
          if (selection.length === 0) {
            // when cursor is on a link with no selection, show edit panel
            const nodeOnCursor = quillApi.getLeaf(selection.index)[0].domNode;
            const linkNode = this.getEnclosingLinkNode(nodeOnCursor);
            this.expandSelectionToNode(linkNode);
            this.openLinkPanel(linkNode.getAttribute('href'));
          } else {
            // when a link is selected, unlink it
            quillApi.format('link', false);
          }
        } else {
          this.openLinkPanel();
        }
      }
      /**
       * Update the link value to be saved as user types in create link panel input
       * @param {Event} event - Keyboard event to detect value of input
       */


      handleLinkValueChange(event) {
        event.stopPropagation(); // When pressing ESC after some input, a change evt gets fired too
        // During this case, detail doesn't exist and there is no change in value

        if (event.detail) {
          this.linkValue = event.detail.value;
        }
      }
      /**
       * Open the create link panel with the value of link already set
       * on the selection or the default value if no value is set
       * @param {String} value - Value to populate in create link panel input
       */


      openLinkPanel(value) {
        this.linkValue = value ? value : 'https://';
        this.queueLinkPanelOpen = true;
        this.linkPanelOpen = true;
      }

      closeLinkPanel() {
        this.linkPanelOpen = false;
      }
      /**
       * Set the text selection's format to link type,
       * with the href value being the value typed in by
       * the user in the create link panel input box
       */


      saveLink() {
        const quillApi = this.quill;
        const selection = quillApi.getSelection(true);

        if (selection.length === 0) {
          quillApi.insertText(selection.index, this.linkValue, {
            link: this.linkValue
          });
        } else {
          quillApi.format('link', this.linkValue);
        }

        this.closeLinkPanel();
      }
      /**
       * Close create link panel without saving
       */


      cancelLink() {
        this.closeLinkPanel();
      }
      /**
       * Calculate and position the create link panel correctly based on the editor's bounds
       * 1. Attempt to align the panel's center with the insert link button's center
       * 2. If panel's right edge goes past the editor's right edge, align both the right edges
       * 3. If panel's left edge goes past the editor's left edge, align both the left edges
       * 4. Vertically position the panel based on the toolbar's position
       * @param {HTMLElement} createLinkPanel -
       */


      calculateLinkPanelPositioning(createLinkPanel) {
        const linkButton = this.template.querySelector('.ql-link');
        const toolbar = this.template.querySelector('.ql-toolbar');
        createLinkPanel.style.position = 'absolute';
        createLinkPanel.style.width = CREATE_LINK_PANEL_WIDTH + 'px'; // Horizontal Positioning of Create Link Panel:
        // Align the center of the panel with the center of the button

        const linkButtonCenter = linkButton.offsetLeft + linkButton.offsetWidth / 2;
        createLinkPanel.style.left = linkButtonCenter - CREATE_LINK_PANEL_WIDTH / 2 + 'px';
        const createLinkPanelLeft = getStyleAsInt(createLinkPanel, 'left');
        const createLinkPanelWidth = getStyleAsInt(createLinkPanel, 'width'); // If panel is going out of the editor/toolbar on the right, position the right
        // of the panel to the right of the editor/toolbar

        if (createLinkPanelLeft + createLinkPanelWidth > toolbar.offsetWidth) {
          const diff = createLinkPanelLeft + createLinkPanelWidth - toolbar.offsetWidth;
          createLinkPanel.style.left = createLinkPanelLeft - diff + 'px';
        } // If panel is going out of the editor/toolbar on the left, position the left
        // of the panel to the left of the editor/toolbar


        if (getStyleAsInt(createLinkPanel, 'left') < toolbar.offsetLeft) {
          createLinkPanel.style.left = toolbar.offsetLeft + 'px';
        } // Vertical Positioning of Create Link Panel


        if (this.variant === 'bottom-toolbar') {
          createLinkPanel.style.top = toolbar.offsetTop - createLinkPanel.offsetHeight + 'px';
        } else {
          createLinkPanel.style.top = toolbar.offsetTop + toolbar.offsetHeight + 'px';
        }
      }
      /**
       * Get the enclosing link node.
       * Search upward through parentNode.
       *
       * @param {Object} node - node of which to find enclosing node
       * @returns {Object} returns the enclosing link node
       */


      getEnclosingLinkNode(node) {
        const quillApi = this.quill;
        const endNode = quillApi.scroll.domNode;
        let currentNode = node;

        while (currentNode && currentNode !== endNode) {
          if (currentNode.tagName === 'A') {
            return currentNode;
          }

          currentNode = currentNode.parentNode;
        }

        return null;
      }
      /**
       * Expand selection to the whole node
       * when selection only covers the node partially
       *
       * @param {Object} node - node of which to expand selection
       */


      expandSelectionToNode(node) {
        const quillApi = this.quill;
        const blot = quillApi.constructor.find(node);

        if (blot) {
          quillApi.focus();
          quillApi.setSelection(quillApi.getIndex(blot), blot.length());
        }
      }
      /**
       * Handle the ENTER and ESC keys appropriately:
       *  1. Handle ENTER key to save the input value
       *  2. Handle ESC key to close the create link panel
       *
       * @param {Event} evt Keyboard event to detect and handle the key pressed
       */


      linkKeyboardPress(evt) {
        this.activateEditor();
        let handled = false;

        if (evt.keyCode === keyCodes$1.enter) {
          this.saveLink();
          handled = true;
        } else if (evt.keyCode === keyCodes$1.escape) {
          this.closeLinkPanel();
          handled = true;
        } // If the events are handled,
        // let them die here


        if (handled) {
          evt.stopPropagation();
          evt.preventDefault();
        }
      }

      handleLinkPanelFocusOut() {
        this.linkPanelHasFocus = false; // Check if in the next frame the panel still has focus, and if not, close the panel
        // eslint-disable-next-line @lwc/lwc/no-async-operation

        requestAnimationFrame(() => {
          if (!this.linkPanelHasFocus) {
            this.closeLinkPanel();
          }
        });
      }

      handleLinkPanelFocusIn() {
        this.linkPanelHasFocus = true;
      }
      /**
       * Set the format of the text to font selected from the font dropdown
       * If user selects the default font, we do not set a font name when
       * formatting the text
       * Set the selected font so the font menu displays the right value
       * @param {Event} fontChangeEvt - Event fired by dropdown combobox
       */


      selectFont(fontChangeEvt) {
        fontChangeEvt.stopPropagation();
        const selectFont = fontChangeEvt.detail.value;
        let formatFont = selectFont;

        if (formatFont === DEFAULT_FONT_NAME_VALUE) {
          // We don't want quill to set the font name to 'default'
          formatFont = '';
        }

        const quillApi = this.quill;
        quillApi.focus();
        quillApi.format('font', formatFont);
        this.selectedFontValue = selectFont;
      }
      /**
       * Set the format of the text to font size selected from the dropdown
       * @param {Event} sizeChangeEvt - Event fired by dropdown combobox
       */


      selectSize(sizeChangeEvt) {
        sizeChangeEvt.stopPropagation();
        const selectSize = sizeChangeEvt.detail.value;
        const quillApi = this.quill;
        quillApi.focus();
        quillApi.format('size', selectSize);
        this.selectedSizeValue = selectSize;
      }
      /**
       * Update the value shown by the font dropdown based on cursor location
       * @param {Object} format - Format of the selected text
       */


      updateFontMenu(format) {
        const newFont = format && format.font ? format.font : DEFAULT_FONT_NAME_VALUE;
        this.selectedFontValue = newFont;
      }
      /**
       * Update the value shown by the font size dropdown based on cursor location
       * @param {Object} format - Format of the selected text
       */


      updateSizeMenu(format) {
        const newSize = format && format.size ? format.size : DEFAULT_FONT_SIZE_VALUE;
        this.selectedSizeValue = newSize;
      }
      /**
       * Update the color shown by the color picker button based on cursor location
       * @param {Object} format - Format of the selected text
       */


      updateTextColorButton(format) {
        const newTextColor = format && format.color ? format.color : DEFAULT_TEXT_COLOR_VALUE;
        this.selectedTextColorValue = newTextColor;
      }
      /**
       *
       * @param {Object} format - Format of the selected text
       */


      applyTextAlignment(format) {
        // Default to right alignment in RTL if existing selection has no alignment
        if (isRTL() && (!format.align || format.align === '')) {
          this.quill.format('align', 'right', 'silent');
        }
      }
      /**
       * Whenever the color changes, it will trigger quill API color change
       * @param {Object} event - change event with text color from colorpicker.
       */


      handleColorUpdate(event) {
        const quillApi = this.quill;
        this.selectedTextColorValue = event.detail.color;
        quillApi.format('color', this.selectedTextColorValue);
      }
      /**
       * Whenever the quill state changes, update each button's pressed state based on the format of given range.
       * @param {Object} range - text range from quill.
       */


      updateButtonPressedState(range) {
        const buttonList = this.template.querySelectorAll(TOOLBAR_SELECTOR);
        const formats = range ? this.quill.getFormat(range) : {};
        buttonList.forEach(button => {
          if (button) {
            const {
              format
            } = button.dataset;
            const value = button.getAttribute('value');
            let isActive = false;

            if (value === null) {
              isActive = !!formats[format];
            } else if (format === 'align' && value === '' && !isRTL()) {
              isActive = !formats[format] || formats[format] === 'left';
            } else {
              isActive = formats[format] === value;
            }

            button.classList.toggle('slds-is-selected', isActive);
            button.setAttribute('aria-pressed', isActive);
          }
        });
      }
      /**
       * Check if the current device is desktop or not.
       * @returns {boolean} true if its desktop, false otherwise.
       */


      get isDesktop() {
        return formFactor === 'Large';
      }
      /**
       * Fire a change event by passing the contents of the
       * editor as the value
       */


      dispatchChangeEvent() {
        this.dispatchEvent(new CustomEvent('change', {
          composed: true,
          bubbles: true,
          detail: {
            value: this.internalValue
          }
        }));
      }

      get shouldShowPlaceholder() {
        return !this.value && this.placeholder;
      }

      handleStandInClick(event) {
        // prevent any navigation from links being clicked
        event.preventDefault();
      }

      setContent(html, source = 'api') {
        if (this.quill) {
          // convert api is not documented in official doc
          const delta = this.quill.clipboard.convert(this.internalValue);
          this.quill.setContents(delta, source);
        }
      }
      /**
       * Reserved for internal use. Insert text in the rich text editor at cursor position.
       *
       * @param {String} text - text to insert
       */


      insertTextAtCursor(text) {
        if (!this.quill) {
          this.activateEditor();
        }

        const selection = this.quill.getSelection(true);
        const cursorPosition = selection ? selection.index : this.quill.getLength() - 1;

        if (selection && selection.length !== 0) {
          this.quill.deleteText(selection.index, selection.length);
        }

        this.quill.insertText(cursorPosition, text);
      }

    }

    lwc.registerDecorators(LightningInputRichText, {
      publicProps: {
        label: {
          config: 0
        },
        labelVisible: {
          config: 0
        },
        placeholder: {
          config: 0
        },
        disabledCategories: {
          config: 0
        },
        formats: {
          config: 0
        },
        variant: {
          config: 0
        },
        messageWhenBadInput: {
          config: 0
        },
        customButtons: {
          config: 0
        },
        shareWithEntityId: {
          config: 0
        },
        value: {
          config: 3
        },
        valid: {
          config: 3
        },
        disabled: {
          config: 3
        }
      },
      publicMethods: ["focus", "blur", "setFormat", "getFormat", "insertTextAtCursor"],
      track: {
        _valid: 1,
        _disabled: 1,
        linkPanelOpen: 1,
        queueLinkPanelOpen: 1,
        selectedFontValue: 1,
        selectedSizeValue: 1,
        quillNotReady: 1,
        selectedTextColorValue: 1
      },
      fields: ["_pendingFormats", "quill", "initialRender", "internalValue", "linkValue", "fontMenus"]
    });

    var _lightningInputRichText = lwc.registerComponent(LightningInputRichText, {
      tmpl: _tmpl$n
    });

    function tmpl$p($api, $cmp, $slotset, $ctx) {
      const {
        d: api_dynamic,
        h: api_element,
        b: api_bind,
        c: api_custom_element
      } = $api;
      const {
        _m0
      } = $ctx;
      return [api_element("p", {
        classMap: {
          "msg": true
        },
        key: 0
      }, [api_dynamic($cmp.msg)]), api_custom_element("lightning-input-rich-text", _lightningInputRichText, {
        props: {
          "value": $cmp.richtext
        },
        key: 1,
        on: {
          "change": _m0 || ($ctx._m0 = api_bind($cmp.handleChange))
        }
      }, [])];
    }

    var _tmpl$o = lwc.registerTemplate(tmpl$p);
    tmpl$p.stylesheets = [];
    tmpl$p.stylesheetTokens = {
      hostAttribute: "lwc-dynamicMsg_dynamicMsg-host",
      shadowAttribute: "lwc-dynamicMsg_dynamicMsg"
    };

    class DynamicMsg extends lwc.LightningElement {
      constructor(...args) {
        super(...args);
        this.msg = 'mani<b>abc</b>';
        this.richtext = '<p>hello<b>bold</b></p>';
      }

    }

    lwc.registerDecorators(DynamicMsg, {
      fields: ["msg", "richtext"]
    });

    var dynamicMsg = lwc.registerComponent(DynamicMsg, {
      tmpl: _tmpl$o
    });

    return dynamicMsg;

});
